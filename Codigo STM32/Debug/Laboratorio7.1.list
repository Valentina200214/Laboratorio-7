
Laboratorio7.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b658  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800b7f0  0800b7f0  0000c7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b858  0800b858  0000d324  2**0
                  CONTENTS
  4 .ARM          00000008  0800b858  0800b858  0000c858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b860  0800b860  0000d324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b860  0800b860  0000c860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b864  0800b864  0000c864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000324  20000000  0800b868  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002070  20000324  0800bb8c  0000d324  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002394  0800bb8c  0000d394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d324  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8b0  00000000  00000000  0000d354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042f2  00000000  00000000  00027c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  0002bef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b9  00000000  00000000  0002d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b90c  00000000  00000000  0002e569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d908  00000000  00000000  00049e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ebf8  00000000  00000000  0006777d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00106375  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb0  00000000  00000000  001063b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010bf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000324 	.word	0x20000324
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800b7d8 	.word	0x0800b7d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000328 	.word	0x20000328
 80001d4:	0800b7d8 	.word	0x0800b7d8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b96a 	b.w	8000d50 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9d08      	ldr	r5, [sp, #32]
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d14e      	bne.n	8000b3e <__udivmoddi4+0xaa>
 8000aa0:	4694      	mov	ip, r2
 8000aa2:	458c      	cmp	ip, r1
 8000aa4:	4686      	mov	lr, r0
 8000aa6:	fab2 f282 	clz	r2, r2
 8000aaa:	d962      	bls.n	8000b72 <__udivmoddi4+0xde>
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0320 	rsb	r3, r2, #32
 8000ab2:	4091      	lsls	r1, r2
 8000ab4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	4319      	orrs	r1, r3
 8000abe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac6:	fa1f f68c 	uxth.w	r6, ip
 8000aca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ace:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ad2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ada:	fb04 f106 	mul.w	r1, r4, r6
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	d90a      	bls.n	8000af8 <__udivmoddi4+0x64>
 8000ae2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aea:	f080 8112 	bcs.w	8000d12 <__udivmoddi4+0x27e>
 8000aee:	4299      	cmp	r1, r3
 8000af0:	f240 810f 	bls.w	8000d12 <__udivmoddi4+0x27e>
 8000af4:	3c02      	subs	r4, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	fa1f f38e 	uxth.w	r3, lr
 8000afe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b02:	fb07 1110 	mls	r1, r7, r0, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb00 f606 	mul.w	r6, r0, r6
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x94>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1a:	f080 80fc 	bcs.w	8000d16 <__udivmoddi4+0x282>
 8000b1e:	429e      	cmp	r6, r3
 8000b20:	f240 80f9 	bls.w	8000d16 <__udivmoddi4+0x282>
 8000b24:	4463      	add	r3, ip
 8000b26:	3802      	subs	r0, #2
 8000b28:	1b9b      	subs	r3, r3, r6
 8000b2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b2e:	2100      	movs	r1, #0
 8000b30:	b11d      	cbz	r5, 8000b3a <__udivmoddi4+0xa6>
 8000b32:	40d3      	lsrs	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d905      	bls.n	8000b4e <__udivmoddi4+0xba>
 8000b42:	b10d      	cbz	r5, 8000b48 <__udivmoddi4+0xb4>
 8000b44:	e9c5 0100 	strd	r0, r1, [r5]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	e7f5      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000b4e:	fab3 f183 	clz	r1, r3
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d146      	bne.n	8000be4 <__udivmoddi4+0x150>
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xcc>
 8000b5a:	4290      	cmp	r0, r2
 8000b5c:	f0c0 80f0 	bcc.w	8000d40 <__udivmoddi4+0x2ac>
 8000b60:	1a86      	subs	r6, r0, r2
 8000b62:	eb64 0303 	sbc.w	r3, r4, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d0e6      	beq.n	8000b3a <__udivmoddi4+0xa6>
 8000b6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b70:	e7e3      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	f040 8090 	bne.w	8000c98 <__udivmoddi4+0x204>
 8000b78:	eba1 040c 	sub.w	r4, r1, ip
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	fa1f f78c 	uxth.w	r7, ip
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b96:	fb07 f006 	mul.w	r0, r7, r6
 8000b9a:	4298      	cmp	r0, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x11c>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x11a>
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2b4>
 8000bae:	4626      	mov	r6, r4
 8000bb0:	1a1c      	subs	r4, r3, r0
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bba:	fb08 4410 	mls	r4, r8, r0, r4
 8000bbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc2:	fb00 f707 	mul.w	r7, r0, r7
 8000bc6:	429f      	cmp	r7, r3
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x148>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x146>
 8000bd4:	429f      	cmp	r7, r3
 8000bd6:	f200 80b0 	bhi.w	8000d3a <__udivmoddi4+0x2a6>
 8000bda:	4620      	mov	r0, r4
 8000bdc:	1bdb      	subs	r3, r3, r7
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	e7a5      	b.n	8000b30 <__udivmoddi4+0x9c>
 8000be4:	f1c1 0620 	rsb	r6, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 f706 	lsr.w	r7, r2, r6
 8000bee:	431f      	orrs	r7, r3
 8000bf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf8:	ea43 030c 	orr.w	r3, r3, ip
 8000bfc:	40f4      	lsrs	r4, r6
 8000bfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000c02:	0c38      	lsrs	r0, r7, #16
 8000c04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c08:	fbb4 fef0 	udiv	lr, r4, r0
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fb00 441e 	mls	r4, r0, lr, r4
 8000c14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c18:	fb0e f90c 	mul.w	r9, lr, ip
 8000c1c:	45a1      	cmp	r9, r4
 8000c1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x1a6>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c2a:	f080 8084 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000c2e:	45a1      	cmp	r9, r4
 8000c30:	f240 8081 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000c34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	eba4 0409 	sub.w	r4, r4, r9
 8000c3e:	fa1f f983 	uxth.w	r9, r3
 8000c42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c46:	fb00 4413 	mls	r4, r0, r3, r4
 8000c4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0x1d2>
 8000c56:	193c      	adds	r4, r7, r4
 8000c58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c5c:	d267      	bcs.n	8000d2e <__udivmoddi4+0x29a>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	d965      	bls.n	8000d2e <__udivmoddi4+0x29a>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	429c      	cmp	r4, r3
 8000c74:	46ce      	mov	lr, r9
 8000c76:	469c      	mov	ip, r3
 8000c78:	d351      	bcc.n	8000d1e <__udivmoddi4+0x28a>
 8000c7a:	d04e      	beq.n	8000d1a <__udivmoddi4+0x286>
 8000c7c:	b155      	cbz	r5, 8000c94 <__udivmoddi4+0x200>
 8000c7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c82:	eb64 040c 	sbc.w	r4, r4, ip
 8000c86:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8a:	40cb      	lsrs	r3, r1
 8000c8c:	431e      	orrs	r6, r3
 8000c8e:	40cc      	lsrs	r4, r1
 8000c90:	e9c5 6400 	strd	r6, r4, [r5]
 8000c94:	2100      	movs	r1, #0
 8000c96:	e750      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000c98:	f1c2 0320 	rsb	r3, r2, #32
 8000c9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	430c      	orrs	r4, r1
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc0:	0c23      	lsrs	r3, r4, #16
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f107 	mul.w	r1, r0, r7
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x24c>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cd6:	d22c      	bcs.n	8000d32 <__udivmoddi4+0x29e>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d92a      	bls.n	8000d32 <__udivmoddi4+0x29e>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb01 f307 	mul.w	r3, r1, r7
 8000cf4:	42a3      	cmp	r3, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x276>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d00:	d213      	bcs.n	8000d2a <__udivmoddi4+0x296>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d911      	bls.n	8000d2a <__udivmoddi4+0x296>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4464      	add	r4, ip
 8000d0a:	1ae4      	subs	r4, r4, r3
 8000d0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d10:	e739      	b.n	8000b86 <__udivmoddi4+0xf2>
 8000d12:	4604      	mov	r4, r0
 8000d14:	e6f0      	b.n	8000af8 <__udivmoddi4+0x64>
 8000d16:	4608      	mov	r0, r1
 8000d18:	e706      	b.n	8000b28 <__udivmoddi4+0x94>
 8000d1a:	45c8      	cmp	r8, r9
 8000d1c:	d2ae      	bcs.n	8000c7c <__udivmoddi4+0x1e8>
 8000d1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d26:	3801      	subs	r0, #1
 8000d28:	e7a8      	b.n	8000c7c <__udivmoddi4+0x1e8>
 8000d2a:	4631      	mov	r1, r6
 8000d2c:	e7ed      	b.n	8000d0a <__udivmoddi4+0x276>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	e799      	b.n	8000c66 <__udivmoddi4+0x1d2>
 8000d32:	4630      	mov	r0, r6
 8000d34:	e7d4      	b.n	8000ce0 <__udivmoddi4+0x24c>
 8000d36:	46d6      	mov	lr, sl
 8000d38:	e77f      	b.n	8000c3a <__udivmoddi4+0x1a6>
 8000d3a:	4463      	add	r3, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	e74d      	b.n	8000bdc <__udivmoddi4+0x148>
 8000d40:	4606      	mov	r6, r0
 8000d42:	4623      	mov	r3, r4
 8000d44:	4608      	mov	r0, r1
 8000d46:	e70f      	b.n	8000b68 <__udivmoddi4+0xd4>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	e730      	b.n	8000bb0 <__udivmoddi4+0x11c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <aplicarFiltroFIR>:

float fir_coeffs[FILTER_LENGTH] = {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1};
float rpm_buffer[FILTER_LENGTH];
int buffer_index = 0;

int16_t aplicarFiltroFIR(int16_t rpm_actual) {
 8000d54:	b480      	push	{r7}
 8000d56:	b087      	sub	sp, #28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
    rpm_buffer[buffer_index] = rpm_actual;
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	@ (8000e18 <aplicarFiltroFIR+0xc4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d66:	ee07 2a90 	vmov	s15, r2
 8000d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000e1c <aplicarFiltroFIR+0xc8>)
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	4413      	add	r3, r2
 8000d74:	edc3 7a00 	vstr	s15, [r3]
    buffer_index = (buffer_index + 1) % FILTER_LENGTH;
 8000d78:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <aplicarFiltroFIR+0xc4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	1c59      	adds	r1, r3, #1
 8000d7e:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <aplicarFiltroFIR+0xcc>)
 8000d80:	fb83 2301 	smull	r2, r3, r3, r1
 8000d84:	109a      	asrs	r2, r3, #2
 8000d86:	17cb      	asrs	r3, r1, #31
 8000d88:	1ad2      	subs	r2, r2, r3
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	4413      	add	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	1aca      	subs	r2, r1, r3
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <aplicarFiltroFIR+0xc4>)
 8000d96:	601a      	str	r2, [r3, #0]

    float filtered_rpm = 0.0;
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < FILTER_LENGTH; i++) {
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	e028      	b.n	8000df6 <aplicarFiltroFIR+0xa2>
        int idx = (buffer_index - i + FILTER_LENGTH) % FILTER_LENGTH;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e18 <aplicarFiltroFIR+0xc4>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f103 020a 	add.w	r2, r3, #10
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <aplicarFiltroFIR+0xcc>)
 8000db2:	fb83 1302 	smull	r1, r3, r3, r2
 8000db6:	1099      	asrs	r1, r3, #2
 8000db8:	17d3      	asrs	r3, r2, #31
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	60fb      	str	r3, [r7, #12]
        filtered_rpm += fir_coeffs[i] * rpm_buffer[idx];
 8000dc8:	4a16      	ldr	r2, [pc, #88]	@ (8000e24 <aplicarFiltroFIR+0xd0>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	4413      	add	r3, r2
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	4a11      	ldr	r2, [pc, #68]	@ (8000e1c <aplicarFiltroFIR+0xc8>)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4413      	add	r3, r2
 8000ddc:	edd3 7a00 	vldr	s15, [r3]
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dec:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < FILTER_LENGTH; i++) {
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	3301      	adds	r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	2b09      	cmp	r3, #9
 8000dfa:	ddd3      	ble.n	8000da4 <aplicarFiltroFIR+0x50>
    }
    return filtered_rpm;
 8000dfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e04:	ee17 3a90 	vmov	r3, s15
 8000e08:	b21b      	sxth	r3, r3
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000368 	.word	0x20000368
 8000e1c:	20000340 	.word	0x20000340
 8000e20:	66666667 	.word	0x66666667
 8000e24:	20000000 	.word	0x20000000

08000e28 <calibracion>:

void calibracion() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
    int vrb = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
    int abc;
    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8000e32:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <calibracion+0xec>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
    abc = __HAL_TIM_GET_COUNTER(&htim4);
 8000e3a:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <calibracion+0xec>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e40:	603b      	str	r3, [r7, #0]
    while (abc >= 0) {
 8000e42:	e05e      	b.n	8000f02 <calibracion+0xda>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e4a:	4833      	ldr	r0, [pc, #204]	@ (8000f18 <calibracion+0xf0>)
 8000e4c:	f003 fb1a 	bl	8004484 <HAL_GPIO_WritePin>

        while ((abc = __HAL_TIM_GET_COUNTER(&htim4)) >= 2) {
 8000e50:	e04b      	b.n	8000eea <calibracion+0xc2>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e58:	482f      	ldr	r0, [pc, #188]	@ (8000f18 <calibracion+0xf0>)
 8000e5a:	f003 fb13 	bl	8004484 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e64:	482c      	ldr	r0, [pc, #176]	@ (8000f18 <calibracion+0xf0>)
 8000e66:	f003 fb0d 	bl	8004484 <HAL_GPIO_WritePin>

            while ((abc = __HAL_TIM_GET_COUNTER(&htim4)) >= 4) {
 8000e6a:	e032      	b.n	8000ed2 <calibracion+0xaa>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e72:	4829      	ldr	r0, [pc, #164]	@ (8000f18 <calibracion+0xf0>)
 8000e74:	f003 fb06 	bl	8004484 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e7e:	4826      	ldr	r0, [pc, #152]	@ (8000f18 <calibracion+0xf0>)
 8000e80:	f003 fb00 	bl	8004484 <HAL_GPIO_WritePin>

                while ((abc = __HAL_TIM_GET_COUNTER(&htim4)) >= 6) {
 8000e84:	e01b      	b.n	8000ebe <calibracion+0x96>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e8c:	4822      	ldr	r0, [pc, #136]	@ (8000f18 <calibracion+0xf0>)
 8000e8e:	f003 faf9 	bl	8004484 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e98:	481f      	ldr	r0, [pc, #124]	@ (8000f18 <calibracion+0xf0>)
 8000e9a:	f003 faf3 	bl	8004484 <HAL_GPIO_WritePin>

                    if ((abc = __HAL_TIM_GET_COUNTER(&htim4)) >= 8) {
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <calibracion+0xec>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b07      	cmp	r3, #7
 8000eaa:	dd08      	ble.n	8000ebe <calibracion+0x96>
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb2:	4819      	ldr	r0, [pc, #100]	@ (8000f18 <calibracion+0xf0>)
 8000eb4:	f003 fae6 	bl	8004484 <HAL_GPIO_WritePin>
                        vrb = 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
                        break;
 8000ebc:	e006      	b.n	8000ecc <calibracion+0xa4>
                while ((abc = __HAL_TIM_GET_COUNTER(&htim4)) >= 6) {
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <calibracion+0xec>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	dcdc      	bgt.n	8000e86 <calibracion+0x5e>
                    }
                }
                if (vrb == 1) break;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d007      	beq.n	8000ee2 <calibracion+0xba>
            while ((abc = __HAL_TIM_GET_COUNTER(&htim4)) >= 4) {
 8000ed2:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <calibracion+0xec>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	dcc5      	bgt.n	8000e6c <calibracion+0x44>
 8000ee0:	e000      	b.n	8000ee4 <calibracion+0xbc>
                if (vrb == 1) break;
 8000ee2:	bf00      	nop
            }
            if (vrb == 1) break;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d007      	beq.n	8000efa <calibracion+0xd2>
        while ((abc = __HAL_TIM_GET_COUNTER(&htim4)) >= 2) {
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <calibracion+0xec>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	dcac      	bgt.n	8000e52 <calibracion+0x2a>
 8000ef8:	e000      	b.n	8000efc <calibracion+0xd4>
            if (vrb == 1) break;
 8000efa:	bf00      	nop
        }
        if (vrb == 1) break;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d003      	beq.n	8000f0a <calibracion+0xe2>
    while (abc >= 0) {
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da9d      	bge.n	8000e44 <calibracion+0x1c>
    }
}
 8000f08:	e000      	b.n	8000f0c <calibracion+0xe4>
        if (vrb == 1) break;
 8000f0a:	bf00      	nop
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000590 	.word	0x20000590
 8000f18:	40020400 	.word	0x40020400

08000f1c <datos_enviar>:
extern uint8_t bnd;

void datos_enviar(int16_t rev, int32_t contador, uint32_t tiempo, int16_t mm_s, int16_t rad_s,
                  uint16_t adc1, uint16_t adc2, uint16_t adc3, uint16_t adc4,
                  float volt1, float volt2, float volt3, float volt4,
                  uint16_t dist1, uint16_t dist2, uint16_t dist3, uint16_t dist4) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08e      	sub	sp, #56	@ 0x38
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	61b9      	str	r1, [r7, #24]
 8000f24:	617a      	str	r2, [r7, #20]
 8000f26:	461a      	mov	r2, r3
 8000f28:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f2c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f30:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f34:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f38:	4603      	mov	r3, r0
 8000f3a:	83fb      	strh	r3, [r7, #30]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	83bb      	strh	r3, [r7, #28]
    int idxx = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	637b      	str	r3, [r7, #52]	@ 0x34

    buffer[idxx++] = 1;
 8000f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f4a:	4aa2      	ldr	r2, [pc, #648]	@ (80011d4 <datos_enviar+0x2b8>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (rev >> 8) & 0xFF;
 8000f50:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f54:	121b      	asrs	r3, r3, #8
 8000f56:	b219      	sxth	r1, r3
 8000f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f5e:	b2c9      	uxtb	r1, r1
 8000f60:	4a9c      	ldr	r2, [pc, #624]	@ (80011d4 <datos_enviar+0x2b8>)
 8000f62:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = rev & 0xFF;
 8000f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f6a:	8bfa      	ldrh	r2, [r7, #30]
 8000f6c:	b2d1      	uxtb	r1, r2
 8000f6e:	4a99      	ldr	r2, [pc, #612]	@ (80011d4 <datos_enviar+0x2b8>)
 8000f70:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 2;
 8000f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f74:	1c5a      	adds	r2, r3, #1
 8000f76:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f78:	4a96      	ldr	r2, [pc, #600]	@ (80011d4 <datos_enviar+0x2b8>)
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 24) & 0xFF;
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	0e19      	lsrs	r1, r3, #24
 8000f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f84:	1c5a      	adds	r2, r3, #1
 8000f86:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f88:	b2c9      	uxtb	r1, r1
 8000f8a:	4a92      	ldr	r2, [pc, #584]	@ (80011d4 <datos_enviar+0x2b8>)
 8000f8c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 16) & 0xFF;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	1419      	asrs	r1, r3, #16
 8000f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	637a      	str	r2, [r7, #52]	@ 0x34
 8000f98:	b2c9      	uxtb	r1, r1
 8000f9a:	4a8e      	ldr	r2, [pc, #568]	@ (80011d4 <datos_enviar+0x2b8>)
 8000f9c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (contador >> 8) & 0xFF;
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	1219      	asrs	r1, r3, #8
 8000fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fa8:	b2c9      	uxtb	r1, r1
 8000faa:	4a8a      	ldr	r2, [pc, #552]	@ (80011d4 <datos_enviar+0x2b8>)
 8000fac:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = contador & 0xFF;
 8000fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	b2d1      	uxtb	r1, r2
 8000fb8:	4a86      	ldr	r2, [pc, #536]	@ (80011d4 <datos_enviar+0x2b8>)
 8000fba:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 3;
 8000fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fc2:	4a84      	ldr	r2, [pc, #528]	@ (80011d4 <datos_enviar+0x2b8>)
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 24) & 0xFF;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	0e19      	lsrs	r1, r3, #24
 8000fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fd2:	b2c9      	uxtb	r1, r1
 8000fd4:	4a7f      	ldr	r2, [pc, #508]	@ (80011d4 <datos_enviar+0x2b8>)
 8000fd6:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 16) & 0xFF;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	0c19      	lsrs	r1, r3, #16
 8000fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000fe2:	b2c9      	uxtb	r1, r1
 8000fe4:	4a7b      	ldr	r2, [pc, #492]	@ (80011d4 <datos_enviar+0x2b8>)
 8000fe6:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (tiempo >> 8) & 0xFF;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	0a19      	lsrs	r1, r3, #8
 8000fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ff2:	b2c9      	uxtb	r1, r1
 8000ff4:	4a77      	ldr	r2, [pc, #476]	@ (80011d4 <datos_enviar+0x2b8>)
 8000ff6:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = tiempo & 0xFF;
 8000ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ffa:	1c5a      	adds	r2, r3, #1
 8000ffc:	637a      	str	r2, [r7, #52]	@ 0x34
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	b2d1      	uxtb	r1, r2
 8001002:	4a74      	ldr	r2, [pc, #464]	@ (80011d4 <datos_enviar+0x2b8>)
 8001004:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 4;
 8001006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	637a      	str	r2, [r7, #52]	@ 0x34
 800100c:	4a71      	ldr	r2, [pc, #452]	@ (80011d4 <datos_enviar+0x2b8>)
 800100e:	2104      	movs	r1, #4
 8001010:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (mm_s >> 8) & 0xFF;
 8001012:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001016:	121b      	asrs	r3, r3, #8
 8001018:	b219      	sxth	r1, r3
 800101a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001020:	b2c9      	uxtb	r1, r1
 8001022:	4a6c      	ldr	r2, [pc, #432]	@ (80011d4 <datos_enviar+0x2b8>)
 8001024:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = mm_s & 0xFF;
 8001026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	637a      	str	r2, [r7, #52]	@ 0x34
 800102c:	8bba      	ldrh	r2, [r7, #28]
 800102e:	b2d1      	uxtb	r1, r2
 8001030:	4a68      	ldr	r2, [pc, #416]	@ (80011d4 <datos_enviar+0x2b8>)
 8001032:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 5;
 8001034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001036:	1c5a      	adds	r2, r3, #1
 8001038:	637a      	str	r2, [r7, #52]	@ 0x34
 800103a:	4a66      	ldr	r2, [pc, #408]	@ (80011d4 <datos_enviar+0x2b8>)
 800103c:	2105      	movs	r1, #5
 800103e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (rad_s >> 8) & 0xFF;
 8001040:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001044:	121b      	asrs	r3, r3, #8
 8001046:	b219      	sxth	r1, r3
 8001048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104a:	1c5a      	adds	r2, r3, #1
 800104c:	637a      	str	r2, [r7, #52]	@ 0x34
 800104e:	b2c9      	uxtb	r1, r1
 8001050:	4a60      	ldr	r2, [pc, #384]	@ (80011d4 <datos_enviar+0x2b8>)
 8001052:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = rad_s & 0xFF;
 8001054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	637a      	str	r2, [r7, #52]	@ 0x34
 800105a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800105e:	b2d1      	uxtb	r1, r2
 8001060:	4a5c      	ldr	r2, [pc, #368]	@ (80011d4 <datos_enviar+0x2b8>)
 8001062:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 6;
 8001064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001066:	1c5a      	adds	r2, r3, #1
 8001068:	637a      	str	r2, [r7, #52]	@ 0x34
 800106a:	4a5a      	ldr	r2, [pc, #360]	@ (80011d4 <datos_enviar+0x2b8>)
 800106c:	2106      	movs	r1, #6
 800106e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc1 >> 8) & 0xFF;
 8001070:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b299      	uxth	r1, r3
 8001078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	637a      	str	r2, [r7, #52]	@ 0x34
 800107e:	b2c9      	uxtb	r1, r1
 8001080:	4a54      	ldr	r2, [pc, #336]	@ (80011d4 <datos_enviar+0x2b8>)
 8001082:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc1 & 0xFF;
 8001084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	637a      	str	r2, [r7, #52]	@ 0x34
 800108a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800108e:	b2d1      	uxtb	r1, r2
 8001090:	4a50      	ldr	r2, [pc, #320]	@ (80011d4 <datos_enviar+0x2b8>)
 8001092:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 7;
 8001094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	637a      	str	r2, [r7, #52]	@ 0x34
 800109a:	4a4e      	ldr	r2, [pc, #312]	@ (80011d4 <datos_enviar+0x2b8>)
 800109c:	2107      	movs	r1, #7
 800109e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc2 >> 8) & 0xFF;
 80010a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b299      	uxth	r1, r3
 80010a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80010ae:	b2c9      	uxtb	r1, r1
 80010b0:	4a48      	ldr	r2, [pc, #288]	@ (80011d4 <datos_enviar+0x2b8>)
 80010b2:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc2 & 0xFF;
 80010b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	637a      	str	r2, [r7, #52]	@ 0x34
 80010ba:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80010be:	b2d1      	uxtb	r1, r2
 80010c0:	4a44      	ldr	r2, [pc, #272]	@ (80011d4 <datos_enviar+0x2b8>)
 80010c2:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 8;
 80010c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c6:	1c5a      	adds	r2, r3, #1
 80010c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80010ca:	4a42      	ldr	r2, [pc, #264]	@ (80011d4 <datos_enviar+0x2b8>)
 80010cc:	2108      	movs	r1, #8
 80010ce:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc3 >> 8) & 0xFF;
 80010d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	b299      	uxth	r1, r3
 80010d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80010de:	b2c9      	uxtb	r1, r1
 80010e0:	4a3c      	ldr	r2, [pc, #240]	@ (80011d4 <datos_enviar+0x2b8>)
 80010e2:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc3 & 0xFF;
 80010e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	637a      	str	r2, [r7, #52]	@ 0x34
 80010ea:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80010ee:	b2d1      	uxtb	r1, r2
 80010f0:	4a38      	ldr	r2, [pc, #224]	@ (80011d4 <datos_enviar+0x2b8>)
 80010f2:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 9;
 80010f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80010fa:	4a36      	ldr	r2, [pc, #216]	@ (80011d4 <datos_enviar+0x2b8>)
 80010fc:	2109      	movs	r1, #9
 80010fe:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (adc4 >> 8) & 0xFF;
 8001100:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b299      	uxth	r1, r3
 8001108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	637a      	str	r2, [r7, #52]	@ 0x34
 800110e:	b2c9      	uxtb	r1, r1
 8001110:	4a30      	ldr	r2, [pc, #192]	@ (80011d4 <datos_enviar+0x2b8>)
 8001112:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = adc4 & 0xFF;
 8001114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	637a      	str	r2, [r7, #52]	@ 0x34
 800111a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800111e:	b2d1      	uxtb	r1, r2
 8001120:	4a2c      	ldr	r2, [pc, #176]	@ (80011d4 <datos_enviar+0x2b8>)
 8001122:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 10;
 8001124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	637a      	str	r2, [r7, #52]	@ 0x34
 800112a:	4a2a      	ldr	r2, [pc, #168]	@ (80011d4 <datos_enviar+0x2b8>)
 800112c:	210a      	movs	r1, #10
 800112e:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt1_bytes = (uint8_t*)&volt1;
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	633b      	str	r3, [r7, #48]	@ 0x30
    buffer[idxx++] = volt1_bytes[0];
 8001136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	637a      	str	r2, [r7, #52]	@ 0x34
 800113c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800113e:	7811      	ldrb	r1, [r2, #0]
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <datos_enviar+0x2b8>)
 8001142:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[1];
 8001144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	637a      	str	r2, [r7, #52]	@ 0x34
 800114a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800114c:	7851      	ldrb	r1, [r2, #1]
 800114e:	4a21      	ldr	r2, [pc, #132]	@ (80011d4 <datos_enviar+0x2b8>)
 8001150:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[2];
 8001152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	637a      	str	r2, [r7, #52]	@ 0x34
 8001158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800115a:	7891      	ldrb	r1, [r2, #2]
 800115c:	4a1d      	ldr	r2, [pc, #116]	@ (80011d4 <datos_enviar+0x2b8>)
 800115e:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt1_bytes[3];
 8001160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001162:	1c5a      	adds	r2, r3, #1
 8001164:	637a      	str	r2, [r7, #52]	@ 0x34
 8001166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001168:	78d1      	ldrb	r1, [r2, #3]
 800116a:	4a1a      	ldr	r2, [pc, #104]	@ (80011d4 <datos_enviar+0x2b8>)
 800116c:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 11;
 800116e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	637a      	str	r2, [r7, #52]	@ 0x34
 8001174:	4a17      	ldr	r2, [pc, #92]	@ (80011d4 <datos_enviar+0x2b8>)
 8001176:	210b      	movs	r1, #11
 8001178:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt2_bytes = (uint8_t*)&volt2;
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    buffer[idxx++] = volt2_bytes[0];
 8001180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	637a      	str	r2, [r7, #52]	@ 0x34
 8001186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001188:	7811      	ldrb	r1, [r2, #0]
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <datos_enviar+0x2b8>)
 800118c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[1];
 800118e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	637a      	str	r2, [r7, #52]	@ 0x34
 8001194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001196:	7851      	ldrb	r1, [r2, #1]
 8001198:	4a0e      	ldr	r2, [pc, #56]	@ (80011d4 <datos_enviar+0x2b8>)
 800119a:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[2];
 800119c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80011a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011a4:	7891      	ldrb	r1, [r2, #2]
 80011a6:	4a0b      	ldr	r2, [pc, #44]	@ (80011d4 <datos_enviar+0x2b8>)
 80011a8:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt2_bytes[3];
 80011aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80011b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011b2:	78d1      	ldrb	r1, [r2, #3]
 80011b4:	4a07      	ldr	r2, [pc, #28]	@ (80011d4 <datos_enviar+0x2b8>)
 80011b6:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 12;
 80011b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ba:	1c5a      	adds	r2, r3, #1
 80011bc:	637a      	str	r2, [r7, #52]	@ 0x34
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <datos_enviar+0x2b8>)
 80011c0:	210c      	movs	r1, #12
 80011c2:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt3_bytes = (uint8_t*)&volt3;
 80011c4:	f107 0308 	add.w	r3, r7, #8
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    buffer[idxx++] = volt3_bytes[0];
 80011ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	637a      	str	r2, [r7, #52]	@ 0x34
 80011d0:	e002      	b.n	80011d8 <datos_enviar+0x2bc>
 80011d2:	bf00      	nop
 80011d4:	2000036c 	.word	0x2000036c
 80011d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011da:	7811      	ldrb	r1, [r2, #0]
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <datos_enviar+0x40c>)
 80011de:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[1];
 80011e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80011e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011e8:	7851      	ldrb	r1, [r2, #1]
 80011ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001328 <datos_enviar+0x40c>)
 80011ec:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[2];
 80011ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	637a      	str	r2, [r7, #52]	@ 0x34
 80011f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011f6:	7891      	ldrb	r1, [r2, #2]
 80011f8:	4a4b      	ldr	r2, [pc, #300]	@ (8001328 <datos_enviar+0x40c>)
 80011fa:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt3_bytes[3];
 80011fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	637a      	str	r2, [r7, #52]	@ 0x34
 8001202:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001204:	78d1      	ldrb	r1, [r2, #3]
 8001206:	4a48      	ldr	r2, [pc, #288]	@ (8001328 <datos_enviar+0x40c>)
 8001208:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 13;
 800120a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001210:	4a45      	ldr	r2, [pc, #276]	@ (8001328 <datos_enviar+0x40c>)
 8001212:	210d      	movs	r1, #13
 8001214:	54d1      	strb	r1, [r2, r3]
    uint8_t* volt4_bytes = (uint8_t*)&volt4;
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer[idxx++] = volt4_bytes[0];
 800121a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001222:	7811      	ldrb	r1, [r2, #0]
 8001224:	4a40      	ldr	r2, [pc, #256]	@ (8001328 <datos_enviar+0x40c>)
 8001226:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[1];
 8001228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	637a      	str	r2, [r7, #52]	@ 0x34
 800122e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001230:	7851      	ldrb	r1, [r2, #1]
 8001232:	4a3d      	ldr	r2, [pc, #244]	@ (8001328 <datos_enviar+0x40c>)
 8001234:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[2];
 8001236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	637a      	str	r2, [r7, #52]	@ 0x34
 800123c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800123e:	7891      	ldrb	r1, [r2, #2]
 8001240:	4a39      	ldr	r2, [pc, #228]	@ (8001328 <datos_enviar+0x40c>)
 8001242:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = volt4_bytes[3];
 8001244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001246:	1c5a      	adds	r2, r3, #1
 8001248:	637a      	str	r2, [r7, #52]	@ 0x34
 800124a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124c:	78d1      	ldrb	r1, [r2, #3]
 800124e:	4a36      	ldr	r2, [pc, #216]	@ (8001328 <datos_enviar+0x40c>)
 8001250:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 14;
 8001252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	637a      	str	r2, [r7, #52]	@ 0x34
 8001258:	4a33      	ldr	r2, [pc, #204]	@ (8001328 <datos_enviar+0x40c>)
 800125a:	210e      	movs	r1, #14
 800125c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist1 >> 8) & 0xFF;
 800125e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001262:	0a1b      	lsrs	r3, r3, #8
 8001264:	b299      	uxth	r1, r3
 8001266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	637a      	str	r2, [r7, #52]	@ 0x34
 800126c:	b2c9      	uxtb	r1, r1
 800126e:	4a2e      	ldr	r2, [pc, #184]	@ (8001328 <datos_enviar+0x40c>)
 8001270:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist1 & 0xFF;
 8001272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	637a      	str	r2, [r7, #52]	@ 0x34
 8001278:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800127c:	b2d1      	uxtb	r1, r2
 800127e:	4a2a      	ldr	r2, [pc, #168]	@ (8001328 <datos_enviar+0x40c>)
 8001280:	54d1      	strb	r1, [r2, r3]


    buffer[idxx++] = 15;
 8001282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	637a      	str	r2, [r7, #52]	@ 0x34
 8001288:	4a27      	ldr	r2, [pc, #156]	@ (8001328 <datos_enviar+0x40c>)
 800128a:	210f      	movs	r1, #15
 800128c:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist2 >> 8) & 0xFF;
 800128e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8001292:	0a1b      	lsrs	r3, r3, #8
 8001294:	b299      	uxth	r1, r3
 8001296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001298:	1c5a      	adds	r2, r3, #1
 800129a:	637a      	str	r2, [r7, #52]	@ 0x34
 800129c:	b2c9      	uxtb	r1, r1
 800129e:	4a22      	ldr	r2, [pc, #136]	@ (8001328 <datos_enviar+0x40c>)
 80012a0:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist2 & 0xFF;
 80012a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80012a8:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80012ac:	b2d1      	uxtb	r1, r2
 80012ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001328 <datos_enviar+0x40c>)
 80012b0:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 16;
 80012b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80012b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001328 <datos_enviar+0x40c>)
 80012ba:	2110      	movs	r1, #16
 80012bc:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist3 >> 8) & 0xFF;
 80012be:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b299      	uxth	r1, r3
 80012c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	637a      	str	r2, [r7, #52]	@ 0x34
 80012cc:	b2c9      	uxtb	r1, r1
 80012ce:	4a16      	ldr	r2, [pc, #88]	@ (8001328 <datos_enviar+0x40c>)
 80012d0:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist3 & 0xFF;
 80012d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80012d8:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 80012dc:	b2d1      	uxtb	r1, r2
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <datos_enviar+0x40c>)
 80012e0:	54d1      	strb	r1, [r2, r3]

    buffer[idxx++] = 17;
 80012e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80012e8:	4a0f      	ldr	r2, [pc, #60]	@ (8001328 <datos_enviar+0x40c>)
 80012ea:	2111      	movs	r1, #17
 80012ec:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = (dist4 >> 8) & 0xFF;
 80012ee:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	b299      	uxth	r1, r3
 80012f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	637a      	str	r2, [r7, #52]	@ 0x34
 80012fc:	b2c9      	uxtb	r1, r1
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <datos_enviar+0x40c>)
 8001300:	54d1      	strb	r1, [r2, r3]
    buffer[idxx++] = dist4 & 0xFF;
 8001302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001304:	1c5a      	adds	r2, r3, #1
 8001306:	637a      	str	r2, [r7, #52]	@ 0x34
 8001308:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 800130c:	b2d1      	uxtb	r1, r2
 800130e:	4a06      	ldr	r2, [pc, #24]	@ (8001328 <datos_enviar+0x40c>)
 8001310:	54d1      	strb	r1, [r2, r3]

    EnviarPaquete(buffer, idxx);
 8001312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	4803      	ldr	r0, [pc, #12]	@ (8001328 <datos_enviar+0x40c>)
 800131a:	f000 f807 	bl	800132c <EnviarPaquete>
}
 800131e:	bf00      	nop
 8001320:	3738      	adds	r7, #56	@ 0x38
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	2000036c 	.word	0x2000036c

0800132c <EnviarPaquete>:

void EnviarPaquete(uint8_t *dat, uint8_t tam) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	70fb      	strb	r3, [r7, #3]
    pk1.inicio = 0x09;
 8001338:	4b10      	ldr	r3, [pc, #64]	@ (800137c <EnviarPaquete+0x50>)
 800133a:	2209      	movs	r2, #9
 800133c:	701a      	strb	r2, [r3, #0]
    pk1.tamano = tam + 4;
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	3304      	adds	r3, #4
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <EnviarPaquete+0x50>)
 8001346:	705a      	strb	r2, [r3, #1]
    pk1.datos = dat;
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <EnviarPaquete+0x50>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6053      	str	r3, [r2, #4]
    pk1.crc = 0x00;
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <EnviarPaquete+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	721a      	strb	r2, [r3, #8]
    pk1.fin = 0x07;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <EnviarPaquete+0x50>)
 8001356:	2207      	movs	r2, #7
 8001358:	725a      	strb	r2, [r3, #9]

    int numDatos = serializarPaquete(&pk1, datosTX);
 800135a:	4909      	ldr	r1, [pc, #36]	@ (8001380 <EnviarPaquete+0x54>)
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <EnviarPaquete+0x50>)
 800135e:	f000 f811 	bl	8001384 <serializarPaquete>
 8001362:	4603      	mov	r3, r0
 8001364:	60fb      	str	r3, [r7, #12]
    CDC_Transmit_FS(datosTX, numDatos);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <EnviarPaquete+0x54>)
 800136e:	f009 fda7 	bl	800aec0 <CDC_Transmit_FS>
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000404 	.word	0x20000404
 8001380:	200003ac 	.word	0x200003ac

08001384 <serializarPaquete>:

int8_t serializarPaquete(const PAQUETE* paquete, uint8_t *buffer) {
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
    int idx = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]

    if (!paquete || !buffer) return -1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <serializarPaquete+0x1a>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <serializarPaquete+0x20>
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e045      	b.n	8001430 <serializarPaquete+0xac>

    buffer[idx++] = paquete->inicio;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	60fa      	str	r2, [r7, #12]
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4413      	add	r3, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	7812      	ldrb	r2, [r2, #0]
 80013b4:	701a      	strb	r2, [r3, #0]
    buffer[idx++] = paquete->tamano;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60fa      	str	r2, [r7, #12]
 80013bc:	461a      	mov	r2, r3
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	7852      	ldrb	r2, [r2, #1]
 80013c6:	701a      	strb	r2, [r3, #0]
    if (paquete->datos && paquete->tamano > 3) {
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d015      	beq.n	80013fc <serializarPaquete+0x78>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d911      	bls.n	80013fc <serializarPaquete+0x78>
        memcpy(&buffer[idx], paquete->datos, paquete->tamano - 3);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	18d0      	adds	r0, r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6859      	ldr	r1, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	785b      	ldrb	r3, [r3, #1]
 80013e6:	3b03      	subs	r3, #3
 80013e8:	461a      	mov	r2, r3
 80013ea:	f00a f9e7 	bl	800b7bc <memcpy>
        idx = idx + paquete->tamano - 3;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	3b03      	subs	r3, #3
 80013fa:	60fb      	str	r3, [r7, #12]
    }
    uint8_t ss = idx;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	72fb      	strb	r3, [r7, #11]
    buffer[idx++] = calcularCRC(buffer, ss);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60fa      	str	r2, [r7, #12]
 8001406:	461a      	mov	r2, r3
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	189c      	adds	r4, r3, r2
 800140c:	7afb      	ldrb	r3, [r7, #11]
 800140e:	4619      	mov	r1, r3
 8001410:	6838      	ldr	r0, [r7, #0]
 8001412:	f000 f811 	bl	8001438 <calcularCRC>
 8001416:	4603      	mov	r3, r0
 8001418:	7023      	strb	r3, [r4, #0]
    buffer[idx++] = paquete->fin;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1c5a      	adds	r2, r3, #1
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	461a      	mov	r2, r3
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	4413      	add	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	7a52      	ldrb	r2, [r2, #9]
 800142a:	701a      	strb	r2, [r3, #0]
    return idx;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	b25b      	sxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bd90      	pop	{r4, r7, pc}

08001438 <calcularCRC>:

uint8_t calcularCRC(uint8_t *datos, uint8_t tam) {
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < tam; i++) {
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	e009      	b.n	8001462 <calcularCRC+0x2a>
        crc ^= datos[i];
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	4053      	eors	r3, r2
 800145a:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < tam; i++) {
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3301      	adds	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	429a      	cmp	r2, r3
 8001468:	dbf1      	blt.n	800144e <calcularCRC+0x16>
    }
    return crc;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <CDC_ReceiveCallBack>:

void CDC_ReceiveCallBack(uint8_t* Buf, uint32_t Len) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
    memcpy(datosRX, Buf, Len);
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <CDC_ReceiveCallBack+0x24>)
 8001488:	f00a f998 	bl	800b7bc <memcpy>
    indexRX = Len;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	4b03      	ldr	r3, [pc, #12]	@ (80014a0 <CDC_ReceiveCallBack+0x28>)
 8001492:	701a      	strb	r2, [r3, #0]
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200003f4 	.word	0x200003f4
 80014a0:	200003f0 	.word	0x200003f0

080014a4 <instruction>:

void instruction() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
    if (indexRX != 0) {
 80014a8:	4b6c      	ldr	r3, [pc, #432]	@ (800165c <instruction+0x1b8>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80d2 	beq.w	8001658 <instruction+0x1b4>
        if (datosRX[0] == 0x0A) {
 80014b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001660 <instruction+0x1bc>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b0a      	cmp	r3, #10
 80014bc:	d10d      	bne.n	80014da <instruction+0x36>
            velocidad_motor = 100;
 80014be:	4b69      	ldr	r3, [pc, #420]	@ (8001664 <instruction+0x1c0>)
 80014c0:	2264      	movs	r2, #100	@ 0x64
 80014c2:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 80014c4:	4b67      	ldr	r3, [pc, #412]	@ (8001664 <instruction+0x1c0>)
 80014c6:	f993 3000 	ldrsb.w	r3, [r3]
 80014ca:	4a66      	ldr	r2, [pc, #408]	@ (8001664 <instruction+0x1c0>)
 80014cc:	f992 2000 	ldrsb.w	r2, [r2]
 80014d0:	4611      	mov	r1, r2
 80014d2:	4618      	mov	r0, r3
 80014d4:	f001 f85c 	bl	8002590 <motores>
        } else if (datosRX[0] == 0x0D) {
            distancia_objetivo = (datosRX[2] << 8) | datosRX[1];
            bnd = 1;
        }
    }
}
 80014d8:	e0be      	b.n	8001658 <instruction+0x1b4>
        } else if (datosRX[0] == 0x0B) {
 80014da:	4b61      	ldr	r3, [pc, #388]	@ (8001660 <instruction+0x1bc>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b0b      	cmp	r3, #11
 80014e2:	d10d      	bne.n	8001500 <instruction+0x5c>
            velocidad_motor = -100;
 80014e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001664 <instruction+0x1c0>)
 80014e6:	229c      	movs	r2, #156	@ 0x9c
 80014e8:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 80014ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001664 <instruction+0x1c0>)
 80014ec:	f993 3000 	ldrsb.w	r3, [r3]
 80014f0:	4a5c      	ldr	r2, [pc, #368]	@ (8001664 <instruction+0x1c0>)
 80014f2:	f992 2000 	ldrsb.w	r2, [r2]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 f849 	bl	8002590 <motores>
}
 80014fe:	e0ab      	b.n	8001658 <instruction+0x1b4>
        } else if (datosRX[0] == 0x0C) {
 8001500:	4b57      	ldr	r3, [pc, #348]	@ (8001660 <instruction+0x1bc>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b0c      	cmp	r3, #12
 8001508:	d10d      	bne.n	8001526 <instruction+0x82>
            velocidad_motor = 0;
 800150a:	4b56      	ldr	r3, [pc, #344]	@ (8001664 <instruction+0x1c0>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 8001510:	4b54      	ldr	r3, [pc, #336]	@ (8001664 <instruction+0x1c0>)
 8001512:	f993 3000 	ldrsb.w	r3, [r3]
 8001516:	4a53      	ldr	r2, [pc, #332]	@ (8001664 <instruction+0x1c0>)
 8001518:	f992 2000 	ldrsb.w	r2, [r2]
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f001 f836 	bl	8002590 <motores>
}
 8001524:	e098      	b.n	8001658 <instruction+0x1b4>
        } else if (datosRX[0] == 0x09) {
 8001526:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <instruction+0x1bc>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b09      	cmp	r3, #9
 800152e:	d118      	bne.n	8001562 <instruction+0xbe>
            valor = datosRX[1];
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <instruction+0x1bc>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	b2db      	uxtb	r3, r3
 8001536:	461a      	mov	r2, r3
 8001538:	4b4b      	ldr	r3, [pc, #300]	@ (8001668 <instruction+0x1c4>)
 800153a:	601a      	str	r2, [r3, #0]
            velocidad_motor = valor * (-1);
 800153c:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <instruction+0x1c4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	b2db      	uxtb	r3, r3
 8001542:	425b      	negs	r3, r3
 8001544:	b2db      	uxtb	r3, r3
 8001546:	b25a      	sxtb	r2, r3
 8001548:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <instruction+0x1c0>)
 800154a:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 800154c:	4b45      	ldr	r3, [pc, #276]	@ (8001664 <instruction+0x1c0>)
 800154e:	f993 3000 	ldrsb.w	r3, [r3]
 8001552:	4a44      	ldr	r2, [pc, #272]	@ (8001664 <instruction+0x1c0>)
 8001554:	f992 2000 	ldrsb.w	r2, [r2]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f818 	bl	8002590 <motores>
}
 8001560:	e07a      	b.n	8001658 <instruction+0x1b4>
        } else if (datosRX[0] == 0x07) {
 8001562:	4b3f      	ldr	r3, [pc, #252]	@ (8001660 <instruction+0x1bc>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b07      	cmp	r3, #7
 800156a:	d136      	bne.n	80015da <instruction+0x136>
            memcpy(&voltaje_float, &datosRX[1], sizeof(float));
 800156c:	4b3c      	ldr	r3, [pc, #240]	@ (8001660 <instruction+0x1bc>)
 800156e:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8001572:	461a      	mov	r2, r3
 8001574:	4b3d      	ldr	r3, [pc, #244]	@ (800166c <instruction+0x1c8>)
 8001576:	601a      	str	r2, [r3, #0]
            if (voltaje_float < 0) voltaje_float = 0;
 8001578:	4b3c      	ldr	r3, [pc, #240]	@ (800166c <instruction+0x1c8>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001586:	d504      	bpl.n	8001592 <instruction+0xee>
 8001588:	4b38      	ldr	r3, [pc, #224]	@ (800166c <instruction+0x1c8>)
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	e00c      	b.n	80015ac <instruction+0x108>
            else if (voltaje_float > 7.5) voltaje_float = 7.5;
 8001592:	4b36      	ldr	r3, [pc, #216]	@ (800166c <instruction+0x1c8>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	dd02      	ble.n	80015ac <instruction+0x108>
 80015a6:	4b31      	ldr	r3, [pc, #196]	@ (800166c <instruction+0x1c8>)
 80015a8:	4a31      	ldr	r2, [pc, #196]	@ (8001670 <instruction+0x1cc>)
 80015aa:	601a      	str	r2, [r3, #0]
            conversor(voltaje_float);
 80015ac:	4b2f      	ldr	r3, [pc, #188]	@ (800166c <instruction+0x1c8>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	eeb0 0a67 	vmov.f32	s0, s15
 80015b6:	f001 fc2d 	bl	8002e14 <conversor>
            velocidad_motor = val_pwm;
 80015ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001674 <instruction+0x1d0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <instruction+0x1c0>)
 80015c2:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <instruction+0x1c0>)
 80015c6:	f993 3000 	ldrsb.w	r3, [r3]
 80015ca:	4a26      	ldr	r2, [pc, #152]	@ (8001664 <instruction+0x1c0>)
 80015cc:	f992 2000 	ldrsb.w	r2, [r2]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 ffdc 	bl	8002590 <motores>
}
 80015d8:	e03e      	b.n	8001658 <instruction+0x1b4>
        } else if (datosRX[0] == 0x08) {
 80015da:	4b21      	ldr	r3, [pc, #132]	@ (8001660 <instruction+0x1bc>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d123      	bne.n	800162c <instruction+0x188>
            vel_mm_s = (datosRX[1] << 8) | (datosRX[2]);
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <instruction+0x1bc>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001660 <instruction+0x1bc>)
 80015f0:	789b      	ldrb	r3, [r3, #2]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b21a      	sxth	r2, r3
 80015fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <instruction+0x1d4>)
 80015fc:	801a      	strh	r2, [r3, #0]
            conversor_mm_s(vel_mm_s);
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <instruction+0x1d4>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fc45 	bl	8002e94 <conversor_mm_s>
            velocidad_motor = pwm_mm;
 800160a:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <instruction+0x1d8>)
 800160c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001610:	b25a      	sxtb	r2, r3
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <instruction+0x1c0>)
 8001614:	701a      	strb	r2, [r3, #0]
            motores(velocidad_motor, velocidad_motor);
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <instruction+0x1c0>)
 8001618:	f993 3000 	ldrsb.w	r3, [r3]
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <instruction+0x1c0>)
 800161e:	f992 2000 	ldrsb.w	r2, [r2]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f000 ffb3 	bl	8002590 <motores>
}
 800162a:	e015      	b.n	8001658 <instruction+0x1b4>
        } else if (datosRX[0] == 0x0D) {
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <instruction+0x1bc>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b0d      	cmp	r3, #13
 8001634:	d110      	bne.n	8001658 <instruction+0x1b4>
            distancia_objetivo = (datosRX[2] << 8) | datosRX[1];
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <instruction+0x1bc>)
 8001638:	789b      	ldrb	r3, [r3, #2]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b21a      	sxth	r2, r3
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <instruction+0x1bc>)
 8001642:	785b      	ldrb	r3, [r3, #1]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21b      	sxth	r3, r3
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b0c      	ldr	r3, [pc, #48]	@ (8001680 <instruction+0x1dc>)
 8001650:	801a      	strh	r2, [r3, #0]
            bnd = 1;
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <instruction+0x1e0>)
 8001654:	2201      	movs	r2, #1
 8001656:	701a      	strb	r2, [r3, #0]
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200003f0 	.word	0x200003f0
 8001660:	200003f4 	.word	0x200003f4
 8001664:	200006f2 	.word	0x200006f2
 8001668:	200006ec 	.word	0x200006ec
 800166c:	200006f4 	.word	0x200006f4
 8001670:	40f00000 	.word	0x40f00000
 8001674:	200006c0 	.word	0x200006c0
 8001678:	200006f0 	.word	0x200006f0
 800167c:	200006bc 	.word	0x200006bc
 8001680:	20000724 	.word	0x20000724
 8001684:	200007a5 	.word	0x200007a5

08001688 <promedio_adc>:
extern uint32_t tiempo;
extern int16_t rpm_f;
extern int16_t velocidad_mm_s;
extern int16_t velocidad_rad_s;

void promedio_adc(void) {
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 5; i++) {
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e013      	b.n	80016bc <promedio_adc+0x34>
        adc_buffer[i][adc_buffer_index] = adcValue[i];
 8001694:	4b46      	ldr	r3, [pc, #280]	@ (80017b0 <promedio_adc+0x128>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461c      	mov	r4, r3
 800169a:	4a46      	ldr	r2, [pc, #280]	@ (80017b4 <promedio_adc+0x12c>)
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80016a2:	4945      	ldr	r1, [pc, #276]	@ (80017b8 <promedio_adc+0x130>)
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4423      	add	r3, r4
 80016b0:	4602      	mov	r2, r0
 80016b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < 5; i++) {
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	3301      	adds	r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b04      	cmp	r3, #4
 80016c0:	dde8      	ble.n	8001694 <promedio_adc+0xc>
    }

    adc_buffer_index++;
 80016c2:	4b3b      	ldr	r3, [pc, #236]	@ (80017b0 <promedio_adc+0x128>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b39      	ldr	r3, [pc, #228]	@ (80017b0 <promedio_adc+0x128>)
 80016cc:	701a      	strb	r2, [r3, #0]
    muestras++;
 80016ce:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <promedio_adc+0x134>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <promedio_adc+0x134>)
 80016d8:	701a      	strb	r2, [r3, #0]

    if (muestras >= ADC_BUFFER_SIZE) {
 80016da:	4b38      	ldr	r3, [pc, #224]	@ (80017bc <promedio_adc+0x134>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b09      	cmp	r3, #9
 80016e0:	d958      	bls.n	8001794 <promedio_adc+0x10c>
        for (int i = 0; i < 5; i++) {
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	e04c      	b.n	8001782 <promedio_adc+0xfa>
            uint32_t sum = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	607b      	str	r3, [r7, #4]
            for (int j = 0; j < ADC_BUFFER_SIZE; j++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	e010      	b.n	8001714 <promedio_adc+0x8c>
                sum += adc_buffer[i][j];
 80016f2:	4931      	ldr	r1, [pc, #196]	@ (80017b8 <promedio_adc+0x130>)
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001706:	461a      	mov	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	607b      	str	r3, [r7, #4]
            for (int j = 0; j < ADC_BUFFER_SIZE; j++) {
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2b09      	cmp	r3, #9
 8001718:	ddeb      	ble.n	80016f2 <promedio_adc+0x6a>
            }
            adc_avg[i] = (float)sum / ADC_BUFFER_SIZE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001724:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	4a24      	ldr	r2, [pc, #144]	@ (80017c0 <promedio_adc+0x138>)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	edc3 7a00 	vstr	s15, [r3]
            adcVoltaje[i] = (adc_avg[i] * 3.3) / 4095.0;
 8001738:	4a21      	ldr	r2, [pc, #132]	@ (80017c0 <promedio_adc+0x138>)
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe feac 	bl	80004a0 <__aeabi_f2d>
 8001748:	a315      	add	r3, pc, #84	@ (adr r3, 80017a0 <promedio_adc+0x118>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe feff 	bl	8000550 <__aeabi_dmul>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	a313      	add	r3, pc, #76	@ (adr r3, 80017a8 <promedio_adc+0x120>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	f7ff f820 	bl	80007a4 <__aeabi_ddiv>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	f7ff f92a 	bl	80009c4 <__aeabi_d2f>
 8001770:	4602      	mov	r2, r0
 8001772:	4914      	ldr	r1, [pc, #80]	@ (80017c4 <promedio_adc+0x13c>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	601a      	str	r2, [r3, #0]
        for (int i = 0; i < 5; i++) {
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3301      	adds	r3, #1
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2b04      	cmp	r3, #4
 8001786:	ddaf      	ble.n	80016e8 <promedio_adc+0x60>
        }

        adc_buffer_index = 0;
 8001788:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <promedio_adc+0x128>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
        muestras = 0;
 800178e:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <promedio_adc+0x134>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
    }
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	f3af 8000 	nop.w
 80017a0:	66666666 	.word	0x66666666
 80017a4:	400a6666 	.word	0x400a6666
 80017a8:	00000000 	.word	0x00000000
 80017ac:	40affe00 	.word	0x40affe00
 80017b0:	2000078c 	.word	0x2000078c
 80017b4:	200006f8 	.word	0x200006f8
 80017b8:	20000728 	.word	0x20000728
 80017bc:	200007a4 	.word	0x200007a4
 80017c0:	20000790 	.word	0x20000790
 80017c4:	20000710 	.word	0x20000710

080017c8 <calculo_mm>:

void calculo_mm() {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
    adcMM[0] = (uint16_t)interpolar_distancia((uint16_t)adc_avg[0], adc_sensor1, distancias_mm, num_puntos);
 80017cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001888 <calculo_mm+0xc0>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d6:	ee17 3a90 	vmov	r3, s15
 80017da:	b298      	uxth	r0, r3
 80017dc:	4b2b      	ldr	r3, [pc, #172]	@ (800188c <calculo_mm+0xc4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a2b      	ldr	r2, [pc, #172]	@ (8001890 <calculo_mm+0xc8>)
 80017e2:	492c      	ldr	r1, [pc, #176]	@ (8001894 <calculo_mm+0xcc>)
 80017e4:	f000 f860 	bl	80018a8 <interpolar_distancia>
 80017e8:	eef0 7a40 	vmov.f32	s15, s0
 80017ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f0:	ee17 3a90 	vmov	r3, s15
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <calculo_mm+0xd0>)
 80017f8:	801a      	strh	r2, [r3, #0]
    adcMM[1] = (uint16_t)interpolar_distancia((uint16_t)adc_avg[1], adc_sensor2, distancias_mm, num_puntos);
 80017fa:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <calculo_mm+0xc0>)
 80017fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001804:	ee17 3a90 	vmov	r3, s15
 8001808:	b298      	uxth	r0, r3
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <calculo_mm+0xc4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a20      	ldr	r2, [pc, #128]	@ (8001890 <calculo_mm+0xc8>)
 8001810:	4922      	ldr	r1, [pc, #136]	@ (800189c <calculo_mm+0xd4>)
 8001812:	f000 f849 	bl	80018a8 <interpolar_distancia>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181e:	ee17 3a90 	vmov	r3, s15
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <calculo_mm+0xd0>)
 8001826:	805a      	strh	r2, [r3, #2]
    adcMM[2] = (uint16_t)interpolar_distancia((uint16_t)adc_avg[2], adc_sensor3, distancias_mm, num_puntos);
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <calculo_mm+0xc0>)
 800182a:	edd3 7a02 	vldr	s15, [r3, #8]
 800182e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001832:	ee17 3a90 	vmov	r3, s15
 8001836:	b298      	uxth	r0, r3
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <calculo_mm+0xc4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a14      	ldr	r2, [pc, #80]	@ (8001890 <calculo_mm+0xc8>)
 800183e:	4918      	ldr	r1, [pc, #96]	@ (80018a0 <calculo_mm+0xd8>)
 8001840:	f000 f832 	bl	80018a8 <interpolar_distancia>
 8001844:	eef0 7a40 	vmov.f32	s15, s0
 8001848:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184c:	ee17 3a90 	vmov	r3, s15
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <calculo_mm+0xd0>)
 8001854:	809a      	strh	r2, [r3, #4]
    adcMM[3] = (uint16_t)interpolar_distancia((uint16_t)adc_avg[3], adc_sensor4, distancias_mm, num_puntos);
 8001856:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <calculo_mm+0xc0>)
 8001858:	edd3 7a03 	vldr	s15, [r3, #12]
 800185c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001860:	ee17 3a90 	vmov	r3, s15
 8001864:	b298      	uxth	r0, r3
 8001866:	4b09      	ldr	r3, [pc, #36]	@ (800188c <calculo_mm+0xc4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a09      	ldr	r2, [pc, #36]	@ (8001890 <calculo_mm+0xc8>)
 800186c:	490d      	ldr	r1, [pc, #52]	@ (80018a4 <calculo_mm+0xdc>)
 800186e:	f000 f81b 	bl	80018a8 <interpolar_distancia>
 8001872:	eef0 7a40 	vmov.f32	s15, s0
 8001876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187a:	ee17 3a90 	vmov	r3, s15
 800187e:	b29a      	uxth	r2, r3
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <calculo_mm+0xd0>)
 8001882:	80da      	strh	r2, [r3, #6]
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000790 	.word	0x20000790
 800188c:	200000d4 	.word	0x200000d4
 8001890:	20000030 	.word	0x20000030
 8001894:	200000d8 	.word	0x200000d8
 8001898:	20000704 	.word	0x20000704
 800189c:	2000012c 	.word	0x2000012c
 80018a0:	20000180 	.word	0x20000180
 80018a4:	200001d4 	.word	0x200001d4

080018a8 <interpolar_distancia>:

float interpolar_distancia(uint16_t adc_recibido, uint16_t *adc_tabla, float *distancias, int num_puntos) {
 80018a8:	b480      	push	{r7}
 80018aa:	b08d      	sub	sp, #52	@ 0x34
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4603      	mov	r3, r0
 80018b6:	81fb      	strh	r3, [r7, #14]
    if (adc_recibido >= adc_tabla[0]) {
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	89fa      	ldrh	r2, [r7, #14]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d303      	bcc.n	80018ca <interpolar_distancia+0x22>
        return distancias[0];
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	e087      	b.n	80019da <interpolar_distancia+0x132>
    }
    if (adc_recibido <= adc_tabla[num_puntos - 1]) {
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80018d0:	3b01      	subs	r3, #1
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	4413      	add	r3, r2
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	89fa      	ldrh	r2, [r7, #14]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d809      	bhi.n	80018f4 <interpolar_distancia+0x4c>
        return distancias[num_puntos - 1];
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80018e6:	3b01      	subs	r3, #1
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	e072      	b.n	80019da <interpolar_distancia+0x132>
    }

    for (int i = 0; i < num_puntos - 1; i++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f8:	e061      	b.n	80019be <interpolar_distancia+0x116>
        if (adc_recibido <= adc_tabla[i] && adc_recibido >= adc_tabla[i + 1]) {
 80018fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	4413      	add	r3, r2
 8001902:	881b      	ldrh	r3, [r3, #0]
 8001904:	89fa      	ldrh	r2, [r7, #14]
 8001906:	429a      	cmp	r2, r3
 8001908:	d856      	bhi.n	80019b8 <interpolar_distancia+0x110>
 800190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190c:	3301      	adds	r3, #1
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	4413      	add	r3, r2
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	89fa      	ldrh	r2, [r7, #14]
 8001918:	429a      	cmp	r2, r3
 800191a:	d34d      	bcc.n	80019b8 <interpolar_distancia+0x110>
            float x0 = adc_tabla[i];
 800191c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	4413      	add	r3, r2
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float x1 = adc_tabla[i + 1];
 8001932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001934:	3301      	adds	r3, #1
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4413      	add	r3, r2
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001946:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            float y0 = distancias[i];
 800194a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	623b      	str	r3, [r7, #32]
            float y1 = distancias[i + 1];
 8001956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001958:	3301      	adds	r3, #1
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4413      	add	r3, r2
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	61fb      	str	r3, [r7, #28]

            float m = (y1 - y0) / (x1 - x0);
 8001964:	ed97 7a07 	vldr	s14, [r7, #28]
 8001968:	edd7 7a08 	vldr	s15, [r7, #32]
 800196c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001970:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001974:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001978:	ee37 7a67 	vsub.f32	s14, s14, s15
 800197c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001980:	edc7 7a06 	vstr	s15, [r7, #24]
            float b = y0 - m * x0;
 8001984:	ed97 7a06 	vldr	s14, [r7, #24]
 8001988:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800198c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001990:	ed97 7a08 	vldr	s14, [r7, #32]
 8001994:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001998:	edc7 7a05 	vstr	s15, [r7, #20]
            return m * adc_recibido + b;
 800199c:	89fb      	ldrh	r3, [r7, #14]
 800199e:	ee07 3a90 	vmov	s15, r3
 80019a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	e010      	b.n	80019da <interpolar_distancia+0x132>
    for (int i = 0; i < num_puntos - 1; i++) {
 80019b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ba:	3301      	adds	r3, #1
 80019bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019c4:	429a      	cmp	r2, r3
 80019c6:	db98      	blt.n	80018fa <interpolar_distancia+0x52>
        }
    }

    return distancias[num_puntos - 1];
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019ce:	3b01      	subs	r3, #1
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	edd3 7a00 	vldr	s15, [r3]
}
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	3734      	adds	r7, #52	@ 0x34
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <control_distancia>:

void control_distancia(uint16_t distancia_objetivo_mm) {
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ea:	b093      	sub	sp, #76	@ 0x4c
 80019ec:	af0a      	add	r7, sp, #40	@ 0x28
 80019ee:	4603      	mov	r3, r0
 80019f0:	82fb      	strh	r3, [r7, #22]
    const uint8_t TOLERANCIA_MM = 2;
 80019f2:	2302      	movs	r3, #2
 80019f4:	77bb      	strb	r3, [r7, #30]

    int16_t distancia_actual;
    int8_t velocidad_pwm;
    uint8_t bandera_movimiento = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	77fb      	strb	r3, [r7, #31]

    while (bandera_movimiento) {
 80019fa:	e0b7      	b.n	8001b6c <control_distancia+0x184>
        distancia_actual = (adcMM[0] + adcMM[1] + adcMM[2] + adcMM[3]) / 4;
 80019fc:	4b60      	ldr	r3, [pc, #384]	@ (8001b80 <control_distancia+0x198>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b5f      	ldr	r3, [pc, #380]	@ (8001b80 <control_distancia+0x198>)
 8001a04:	885b      	ldrh	r3, [r3, #2]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a5d      	ldr	r2, [pc, #372]	@ (8001b80 <control_distancia+0x198>)
 8001a0a:	8892      	ldrh	r2, [r2, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001b80 <control_distancia+0x198>)
 8001a10:	88d2      	ldrh	r2, [r2, #6]
 8001a12:	4413      	add	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	da00      	bge.n	8001a1a <control_distancia+0x32>
 8001a18:	3303      	adds	r3, #3
 8001a1a:	109b      	asrs	r3, r3, #2
 8001a1c:	83bb      	strh	r3, [r7, #28]

        int16_t error_distancia = distancia_objetivo_mm - distancia_actual;
 8001a1e:	8bbb      	ldrh	r3, [r7, #28]
 8001a20:	8afa      	ldrh	r2, [r7, #22]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	837b      	strh	r3, [r7, #26]

        if (abs(error_distancia) <= TOLERANCIA_MM) {
 8001a28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	bfb8      	it	lt
 8001a30:	425b      	neglt	r3, r3
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	7fbb      	ldrb	r3, [r7, #30]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d814      	bhi.n	8001a66 <control_distancia+0x7e>
            velocidad_pwm = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	767b      	strb	r3, [r7, #25]
            motores(velocidad_pwm, velocidad_pwm);
 8001a40:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8001a44:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fda0 	bl	8002590 <motores>
            if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0){
 8001a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a54:	484b      	ldr	r0, [pc, #300]	@ (8001b84 <control_distancia+0x19c>)
 8001a56:	f002 fcfd 	bl	8004454 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d126      	bne.n	8001aae <control_distancia+0xc6>
            	bandera_movimiento = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	77fb      	strb	r3, [r7, #31]
 8001a64:	e023      	b.n	8001aae <control_distancia+0xc6>
            }
        } else {
            if (error_distancia > 0) {
 8001a66:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	dd0f      	ble.n	8001a8e <control_distancia+0xa6>
                conversor_mm_s(-400);
 8001a6e:	4846      	ldr	r0, [pc, #280]	@ (8001b88 <control_distancia+0x1a0>)
 8001a70:	f001 fa10 	bl	8002e94 <conversor_mm_s>
                velocidad_pwm = pwm_mm;
 8001a74:	4b45      	ldr	r3, [pc, #276]	@ (8001b8c <control_distancia+0x1a4>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	767b      	strb	r3, [r7, #25]
                motores(velocidad_pwm, velocidad_pwm);
 8001a7c:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8001a80:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fd82 	bl	8002590 <motores>
 8001a8c:	e00f      	b.n	8001aae <control_distancia+0xc6>
            } else {
                conversor_mm_s(400);
 8001a8e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001a92:	f001 f9ff 	bl	8002e94 <conversor_mm_s>
                velocidad_pwm = pwm_mm;
 8001a96:	4b3d      	ldr	r3, [pc, #244]	@ (8001b8c <control_distancia+0x1a4>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	767b      	strb	r3, [r7, #25]
                motores(velocidad_pwm, velocidad_pwm);
 8001a9e:	f997 2019 	ldrsb.w	r2, [r7, #25]
 8001aa2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fd71 	bl	8002590 <motores>
            }
        }

        calculo_rpm();
 8001aae:	f001 f8ef 	bl	8002c90 <calculo_rpm>
        contador = ((int32_t)__HAL_TIM_GET_COUNTER(&htim5)) / 1431;
 8001ab2:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <control_distancia+0x1a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab8:	4a36      	ldr	r2, [pc, #216]	@ (8001b94 <control_distancia+0x1ac>)
 8001aba:	fb82 1203 	smull	r1, r2, r2, r3
 8001abe:	1252      	asrs	r2, r2, #9
 8001ac0:	17db      	asrs	r3, r3, #31
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	4a34      	ldr	r2, [pc, #208]	@ (8001b98 <control_distancia+0x1b0>)
 8001ac6:	6013      	str	r3, [r2, #0]
        tiempo = (__HAL_TIM_GET_COUNTER(&htim2) / 2);
 8001ac8:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <control_distancia+0x1b4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	085b      	lsrs	r3, r3, #1
 8001ad0:	4a33      	ldr	r2, [pc, #204]	@ (8001ba0 <control_distancia+0x1b8>)
 8001ad2:	6013      	str	r3, [r2, #0]
        calibracion();
 8001ad4:	f7ff f9a8 	bl	8000e28 <calibracion>
        promedio_adc();
 8001ad8:	f7ff fdd6 	bl	8001688 <promedio_adc>
        calculo_mm();
 8001adc:	f7ff fe74 	bl	80017c8 <calculo_mm>
        datos_enviar(rpm_f, contador, tiempo, velocidad_mm_s, velocidad_rad_s,
 8001ae0:	4b30      	ldr	r3, [pc, #192]	@ (8001ba4 <control_distancia+0x1bc>)
 8001ae2:	f9b3 c000 	ldrsh.w	ip, [r3]
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8001b98 <control_distancia+0x1b0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba0 <control_distancia+0x1b8>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	60fa      	str	r2, [r7, #12]
 8001af2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <control_distancia+0x1c0>)
 8001af4:	f9b3 e000 	ldrsh.w	lr, [r3]
 8001af8:	4b2c      	ldr	r3, [pc, #176]	@ (8001bac <control_distancia+0x1c4>)
 8001afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afe:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb0 <control_distancia+0x1c8>)
 8001b00:	8812      	ldrh	r2, [r2, #0]
 8001b02:	492b      	ldr	r1, [pc, #172]	@ (8001bb0 <control_distancia+0x1c8>)
 8001b04:	8849      	ldrh	r1, [r1, #2]
 8001b06:	482a      	ldr	r0, [pc, #168]	@ (8001bb0 <control_distancia+0x1c8>)
 8001b08:	8880      	ldrh	r0, [r0, #4]
 8001b0a:	60b8      	str	r0, [r7, #8]
 8001b0c:	4c28      	ldr	r4, [pc, #160]	@ (8001bb0 <control_distancia+0x1c8>)
 8001b0e:	88e4      	ldrh	r4, [r4, #6]
 8001b10:	4d28      	ldr	r5, [pc, #160]	@ (8001bb4 <control_distancia+0x1cc>)
 8001b12:	edd5 7a00 	vldr	s15, [r5]
 8001b16:	4d27      	ldr	r5, [pc, #156]	@ (8001bb4 <control_distancia+0x1cc>)
 8001b18:	ed95 7a01 	vldr	s14, [r5, #4]
 8001b1c:	4d25      	ldr	r5, [pc, #148]	@ (8001bb4 <control_distancia+0x1cc>)
 8001b1e:	edd5 6a02 	vldr	s13, [r5, #8]
 8001b22:	4d24      	ldr	r5, [pc, #144]	@ (8001bb4 <control_distancia+0x1cc>)
 8001b24:	ed95 6a03 	vldr	s12, [r5, #12]
 8001b28:	4d15      	ldr	r5, [pc, #84]	@ (8001b80 <control_distancia+0x198>)
 8001b2a:	882d      	ldrh	r5, [r5, #0]
 8001b2c:	4e14      	ldr	r6, [pc, #80]	@ (8001b80 <control_distancia+0x198>)
 8001b2e:	8876      	ldrh	r6, [r6, #2]
 8001b30:	4813      	ldr	r0, [pc, #76]	@ (8001b80 <control_distancia+0x198>)
 8001b32:	8880      	ldrh	r0, [r0, #4]
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	4812      	ldr	r0, [pc, #72]	@ (8001b80 <control_distancia+0x198>)
 8001b38:	88c0      	ldrh	r0, [r0, #6]
 8001b3a:	9008      	str	r0, [sp, #32]
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	9007      	str	r0, [sp, #28]
 8001b40:	9606      	str	r6, [sp, #24]
 8001b42:	9505      	str	r5, [sp, #20]
 8001b44:	9404      	str	r4, [sp, #16]
 8001b46:	68b8      	ldr	r0, [r7, #8]
 8001b48:	9003      	str	r0, [sp, #12]
 8001b4a:	9102      	str	r1, [sp, #8]
 8001b4c:	9201      	str	r2, [sp, #4]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	eef0 1a46 	vmov.f32	s3, s12
 8001b54:	eeb0 1a66 	vmov.f32	s2, s13
 8001b58:	eef0 0a47 	vmov.f32	s1, s14
 8001b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b60:	4673      	mov	r3, lr
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6939      	ldr	r1, [r7, #16]
 8001b66:	4660      	mov	r0, ip
 8001b68:	f7ff f9d8 	bl	8000f1c <datos_enviar>
    while (bandera_movimiento) {
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f47f af44 	bne.w	80019fc <control_distancia+0x14>
                     adcValue[0], adcValue[1], adcValue[2], adcValue[3],
                     adcVoltaje[0], adcVoltaje[1], adcVoltaje[2], adcVoltaje[3],
                     adcMM[0], adcMM[1], adcMM[2], adcMM[3]);

    }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3724      	adds	r7, #36	@ 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000704 	.word	0x20000704
 8001b84:	40020400 	.word	0x40020400
 8001b88:	fffffe70 	.word	0xfffffe70
 8001b8c:	200006bc 	.word	0x200006bc
 8001b90:	200005d8 	.word	0x200005d8
 8001b94:	5b983d8b 	.word	0x5b983d8b
 8001b98:	200006dc 	.word	0x200006dc
 8001b9c:	20000500 	.word	0x20000500
 8001ba0:	200006b8 	.word	0x200006b8
 8001ba4:	200006e4 	.word	0x200006e4
 8001ba8:	200006e6 	.word	0x200006e6
 8001bac:	200006e8 	.word	0x200006e8
 8001bb0:	200006f8 	.word	0x200006f8
 8001bb4:	20000710 	.word	0x20000710

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	b08f      	sub	sp, #60	@ 0x3c
 8001bbc:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bbe:	f001 f9b5 	bl	8002f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc2:	f000 f8cd 	bl	8001d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc6:	f000 fc09 	bl	80023dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001bca:	f000 fbe7 	bl	800239c <MX_DMA_Init>
  MX_TIM2_Init();
 8001bce:	f000 fa0b 	bl	8001fe8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bd2:	f000 fa57 	bl	8002084 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001bd6:	f009 f8af 	bl	800ad38 <MX_USB_DEVICE_Init>
  MX_TIM5_Init();
 8001bda:	f000 faf5 	bl	80021c8 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001bde:	f000 fb47 	bl	8002270 <MX_TIM9_Init>
  MX_ADC1_Init();
 8001be2:	f000 f925 	bl	8001e30 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001be6:	f000 faa1 	bl	800212c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001bea:	f000 f9ab 	bl	8001f44 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001bee:	f000 fbab 	bl	8002348 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  motoresInit(&htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4847      	ldr	r0, [pc, #284]	@ (8001d14 <main+0x15c>)
 8001bf8:	f000 fc8c 	bl	8002514 <motoresInit>
  HAL_TIM_Base_Start(&htim1);
 8001bfc:	4846      	ldr	r0, [pc, #280]	@ (8001d18 <main+0x160>)
 8001bfe:	f004 fb55 	bl	80062ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8001c02:	4846      	ldr	r0, [pc, #280]	@ (8001d1c <main+0x164>)
 8001c04:	f004 fb52 	bl	80062ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8001c08:	4845      	ldr	r0, [pc, #276]	@ (8001d20 <main+0x168>)
 8001c0a:	f004 fb4f 	bl	80062ac <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001c0e:	4845      	ldr	r0, [pc, #276]	@ (8001d24 <main+0x16c>)
 8001c10:	f004 fb4c 	bl	80062ac <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001c14:	213c      	movs	r1, #60	@ 0x3c
 8001c16:	4844      	ldr	r0, [pc, #272]	@ (8001d28 <main+0x170>)
 8001c18:	f004 fd52 	bl	80066c0 <HAL_TIM_Encoder_Start>

  HAL_ADC_Start_DMA(&hadc1, adcValue, 5);
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	4943      	ldr	r1, [pc, #268]	@ (8001d2c <main+0x174>)
 8001c20:	4843      	ldr	r0, [pc, #268]	@ (8001d30 <main+0x178>)
 8001c22:	f001 fa5d 	bl	80030e0 <HAL_ADC_Start_DMA>
  while (1)
  {



	  instruction();
 8001c26:	f7ff fc3d 	bl	80014a4 <instruction>

	  calculo_rpm();
 8001c2a:	f001 f831 	bl	8002c90 <calculo_rpm>

	  contador = ((int32_t)__HAL_TIM_GET_COUNTER(&htim5)) /1431;
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <main+0x170>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c34:	4a3f      	ldr	r2, [pc, #252]	@ (8001d34 <main+0x17c>)
 8001c36:	fb82 1203 	smull	r1, r2, r2, r3
 8001c3a:	1252      	asrs	r2, r2, #9
 8001c3c:	17db      	asrs	r3, r3, #31
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	4a3d      	ldr	r2, [pc, #244]	@ (8001d38 <main+0x180>)
 8001c42:	6013      	str	r3, [r2, #0]
	  tiempo = (__HAL_TIM_GET_COUNTER(&htim2)/2);
 8001c44:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <main+0x164>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4a:	085b      	lsrs	r3, r3, #1
 8001c4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d3c <main+0x184>)
 8001c4e:	6013      	str	r3, [r2, #0]


	  calibracion();
 8001c50:	f7ff f8ea 	bl	8000e28 <calibracion>
	  promedio_adc();
 8001c54:	f7ff fd18 	bl	8001688 <promedio_adc>
	  calculo_mm();
 8001c58:	f7ff fdb6 	bl	80017c8 <calculo_mm>

	  datos_enviar(rpm_f, contador, tiempo, velocidad_mm_s, velocidad_rad_s,
 8001c5c:	4b38      	ldr	r3, [pc, #224]	@ (8001d40 <main+0x188>)
 8001c5e:	f9b3 c000 	ldrsh.w	ip, [r3]
 8001c62:	4b35      	ldr	r3, [pc, #212]	@ (8001d38 <main+0x180>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4b34      	ldr	r3, [pc, #208]	@ (8001d3c <main+0x184>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	4b35      	ldr	r3, [pc, #212]	@ (8001d44 <main+0x18c>)
 8001c70:	f9b3 e000 	ldrsh.w	lr, [r3]
 8001c74:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <main+0x190>)
 8001c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d2c <main+0x174>)
 8001c7c:	8812      	ldrh	r2, [r2, #0]
 8001c7e:	492b      	ldr	r1, [pc, #172]	@ (8001d2c <main+0x174>)
 8001c80:	8849      	ldrh	r1, [r1, #2]
 8001c82:	482a      	ldr	r0, [pc, #168]	@ (8001d2c <main+0x174>)
 8001c84:	8880      	ldrh	r0, [r0, #4]
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	4c28      	ldr	r4, [pc, #160]	@ (8001d2c <main+0x174>)
 8001c8a:	88e4      	ldrh	r4, [r4, #6]
 8001c8c:	4d2f      	ldr	r5, [pc, #188]	@ (8001d4c <main+0x194>)
 8001c8e:	edd5 7a00 	vldr	s15, [r5]
 8001c92:	4d2e      	ldr	r5, [pc, #184]	@ (8001d4c <main+0x194>)
 8001c94:	ed95 7a01 	vldr	s14, [r5, #4]
 8001c98:	4d2c      	ldr	r5, [pc, #176]	@ (8001d4c <main+0x194>)
 8001c9a:	edd5 6a02 	vldr	s13, [r5, #8]
 8001c9e:	4d2b      	ldr	r5, [pc, #172]	@ (8001d4c <main+0x194>)
 8001ca0:	ed95 6a03 	vldr	s12, [r5, #12]
 8001ca4:	4d2a      	ldr	r5, [pc, #168]	@ (8001d50 <main+0x198>)
 8001ca6:	882d      	ldrh	r5, [r5, #0]
 8001ca8:	4e29      	ldr	r6, [pc, #164]	@ (8001d50 <main+0x198>)
 8001caa:	8876      	ldrh	r6, [r6, #2]
 8001cac:	4828      	ldr	r0, [pc, #160]	@ (8001d50 <main+0x198>)
 8001cae:	8880      	ldrh	r0, [r0, #4]
 8001cb0:	6038      	str	r0, [r7, #0]
 8001cb2:	4827      	ldr	r0, [pc, #156]	@ (8001d50 <main+0x198>)
 8001cb4:	88c0      	ldrh	r0, [r0, #6]
 8001cb6:	9008      	str	r0, [sp, #32]
 8001cb8:	6838      	ldr	r0, [r7, #0]
 8001cba:	9007      	str	r0, [sp, #28]
 8001cbc:	9606      	str	r6, [sp, #24]
 8001cbe:	9505      	str	r5, [sp, #20]
 8001cc0:	9404      	str	r4, [sp, #16]
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	9003      	str	r0, [sp, #12]
 8001cc6:	9102      	str	r1, [sp, #8]
 8001cc8:	9201      	str	r2, [sp, #4]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	eef0 1a46 	vmov.f32	s3, s12
 8001cd0:	eeb0 1a66 	vmov.f32	s2, s13
 8001cd4:	eef0 0a47 	vmov.f32	s1, s14
 8001cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cdc:	4673      	mov	r3, lr
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	68f9      	ldr	r1, [r7, #12]
 8001ce2:	4660      	mov	r0, ip
 8001ce4:	f7ff f91a 	bl	8000f1c <datos_enviar>
	                   adcValue[0], adcValue[1], adcValue[2], adcValue[3],
	                   adcVoltaje[0], adcVoltaje[1], adcVoltaje[2], adcVoltaje[3],
	                   adcMM[0], adcMM[1], adcMM[2], adcMM[3]);


	  if((bnd == 1) && (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 0)){
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <main+0x19c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d19a      	bne.n	8001c26 <main+0x6e>
 8001cf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cf4:	4818      	ldr	r0, [pc, #96]	@ (8001d58 <main+0x1a0>)
 8001cf6:	f002 fbad 	bl	8004454 <HAL_GPIO_ReadPin>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d192      	bne.n	8001c26 <main+0x6e>
		  control_distancia(distancia_objetivo);
 8001d00:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <main+0x1a4>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fe6f 	bl	80019e8 <control_distancia>
		  bnd = 0;
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <main+0x19c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
	  instruction();
 8001d10:	e789      	b.n	8001c26 <main+0x6e>
 8001d12:	bf00      	nop
 8001d14:	20000620 	.word	0x20000620
 8001d18:	200004b8 	.word	0x200004b8
 8001d1c:	20000500 	.word	0x20000500
 8001d20:	20000548 	.word	0x20000548
 8001d24:	20000590 	.word	0x20000590
 8001d28:	200005d8 	.word	0x200005d8
 8001d2c:	200006f8 	.word	0x200006f8
 8001d30:	20000410 	.word	0x20000410
 8001d34:	5b983d8b 	.word	0x5b983d8b
 8001d38:	200006dc 	.word	0x200006dc
 8001d3c:	200006b8 	.word	0x200006b8
 8001d40:	200006e4 	.word	0x200006e4
 8001d44:	200006e6 	.word	0x200006e6
 8001d48:	200006e8 	.word	0x200006e8
 8001d4c:	20000710 	.word	0x20000710
 8001d50:	20000704 	.word	0x20000704
 8001d54:	200007a5 	.word	0x200007a5
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	20000724 	.word	0x20000724

08001d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b094      	sub	sp, #80	@ 0x50
 8001d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d66:	f107 0320 	add.w	r3, r7, #32
 8001d6a:	2230      	movs	r2, #48	@ 0x30
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f009 fcf8 	bl	800b764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <SystemClock_Config+0xc8>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	4a26      	ldr	r2, [pc, #152]	@ (8001e28 <SystemClock_Config+0xc8>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d92:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d94:	4b24      	ldr	r3, [pc, #144]	@ (8001e28 <SystemClock_Config+0xc8>)
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da0:	2300      	movs	r3, #0
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <SystemClock_Config+0xcc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a20      	ldr	r2, [pc, #128]	@ (8001e2c <SystemClock_Config+0xcc>)
 8001daa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <SystemClock_Config+0xcc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dc0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001dd0:	2319      	movs	r3, #25
 8001dd2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001dd4:	23c0      	movs	r3, #192	@ 0xc0
 8001dd6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fdb9 	bl	800595c <HAL_RCC_OscConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001df0:	f000 fb8a 	bl	8002508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2103      	movs	r1, #3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 f81b 	bl	8005e4c <HAL_RCC_ClockConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e1c:	f000 fb74 	bl	8002508 <Error_Handler>
  }
}
 8001e20:	bf00      	nop
 8001e22:	3750      	adds	r7, #80	@ 0x50
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40007000 	.word	0x40007000

08001e30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e36:	463b      	mov	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e44:	4a3d      	ldr	r2, [pc, #244]	@ (8001f3c <MX_ADC1_Init+0x10c>)
 8001e46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e48:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e50:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e56:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e5c:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e62:	4b35      	ldr	r3, [pc, #212]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e6a:	4b33      	ldr	r3, [pc, #204]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e70:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e72:	4a33      	ldr	r2, [pc, #204]	@ (8001f40 <MX_ADC1_Init+0x110>)
 8001e74:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e76:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e7e:	2205      	movs	r2, #5
 8001e80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e90:	4829      	ldr	r0, [pc, #164]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001e92:	f001 f8e1 	bl	8003058 <HAL_ADC_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e9c:	f000 fb34 	bl	8002508 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eac:	463b      	mov	r3, r7
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4821      	ldr	r0, [pc, #132]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001eb2:	f001 fa19 	bl	80032e8 <HAL_ADC_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ebc:	f000 fb24 	bl	8002508 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4619      	mov	r1, r3
 8001ecc:	481a      	ldr	r0, [pc, #104]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001ece:	f001 fa0b 	bl	80032e8 <HAL_ADC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ed8:	f000 fb16 	bl	8002508 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001edc:	2306      	movs	r3, #6
 8001ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4813      	ldr	r0, [pc, #76]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001eea:	f001 f9fd 	bl	80032e8 <HAL_ADC_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001ef4:	f000 fb08 	bl	8002508 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001ef8:	2307      	movs	r3, #7
 8001efa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001efc:	2304      	movs	r3, #4
 8001efe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f00:	463b      	mov	r3, r7
 8001f02:	4619      	mov	r1, r3
 8001f04:	480c      	ldr	r0, [pc, #48]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001f06:	f001 f9ef 	bl	80032e8 <HAL_ADC_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001f10:	f000 fafa 	bl	8002508 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001f14:	2308      	movs	r3, #8
 8001f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001f18:	2305      	movs	r3, #5
 8001f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_ADC1_Init+0x108>)
 8001f22:	f001 f9e1 	bl	80032e8 <HAL_ADC_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001f2c:	f000 faec 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000410 	.word	0x20000410
 8001f3c:	40012000 	.word	0x40012000
 8001f40:	0f000001 	.word	0x0f000001

08001f44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0308 	add.w	r3, r7, #8
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f60:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f62:	4a20      	ldr	r2, [pc, #128]	@ (8001fe4 <MX_TIM1_Init+0xa0>)
 8001f64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000-1;
 8001f66:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f68:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8001f6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f82:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b15      	ldr	r3, [pc, #84]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f8e:	4814      	ldr	r0, [pc, #80]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001f90:	f004 f93c 	bl	800620c <HAL_TIM_Base_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001f9a:	f000 fab5 	bl	8002508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001fac:	f004 fcd8 	bl	8006960 <HAL_TIM_ConfigClockSource>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001fb6:	f000 faa7 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4806      	ldr	r0, [pc, #24]	@ (8001fe0 <MX_TIM1_Init+0x9c>)
 8001fc8:	f005 f86a 	bl	80070a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001fd2:	f000 fa99 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200004b8 	.word	0x200004b8
 8001fe4:	40010000 	.word	0x40010000

08001fe8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
 8001ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002004:	4b1e      	ldr	r3, [pc, #120]	@ (8002080 <MX_TIM2_Init+0x98>)
 8002006:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800200a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 800200c:	4b1c      	ldr	r3, [pc, #112]	@ (8002080 <MX_TIM2_Init+0x98>)
 800200e:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002014:	4b1a      	ldr	r3, [pc, #104]	@ (8002080 <MX_TIM2_Init+0x98>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <MX_TIM2_Init+0x98>)
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b17      	ldr	r3, [pc, #92]	@ (8002080 <MX_TIM2_Init+0x98>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <MX_TIM2_Init+0x98>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800202e:	4814      	ldr	r0, [pc, #80]	@ (8002080 <MX_TIM2_Init+0x98>)
 8002030:	f004 f8ec 	bl	800620c <HAL_TIM_Base_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800203a:	f000 fa65 	bl	8002508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002044:	f107 0308 	add.w	r3, r7, #8
 8002048:	4619      	mov	r1, r3
 800204a:	480d      	ldr	r0, [pc, #52]	@ (8002080 <MX_TIM2_Init+0x98>)
 800204c:	f004 fc88 	bl	8006960 <HAL_TIM_ConfigClockSource>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002056:	f000 fa57 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002062:	463b      	mov	r3, r7
 8002064:	4619      	mov	r1, r3
 8002066:	4806      	ldr	r0, [pc, #24]	@ (8002080 <MX_TIM2_Init+0x98>)
 8002068:	f005 f81a 	bl	80070a0 <HAL_TIMEx_MasterConfigSynchronization>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002072:	f000 fa49 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000500 	.word	0x20000500

08002084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	2224      	movs	r2, #36	@ 0x24
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f009 fb66 	bl	800b764 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020a0:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <MX_TIM3_Init+0xa0>)
 80020a2:	4a21      	ldr	r2, [pc, #132]	@ (8002128 <MX_TIM3_Init+0xa4>)
 80020a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002124 <MX_TIM3_Init+0xa0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <MX_TIM3_Init+0xa0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <MX_TIM3_Init+0xa0>)
 80020b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002124 <MX_TIM3_Init+0xa0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b18      	ldr	r3, [pc, #96]	@ (8002124 <MX_TIM3_Init+0xa0>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020c6:	2303      	movs	r3, #3
 80020c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020ca:	2302      	movs	r3, #2
 80020cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020ce:	2301      	movs	r3, #1
 80020d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80020d6:	230f      	movs	r3, #15
 80020d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80020da:	2302      	movs	r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020de:	2301      	movs	r3, #1
 80020e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80020e6:	230f      	movs	r3, #15
 80020e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020ea:	f107 030c 	add.w	r3, r7, #12
 80020ee:	4619      	mov	r1, r3
 80020f0:	480c      	ldr	r0, [pc, #48]	@ (8002124 <MX_TIM3_Init+0xa0>)
 80020f2:	f004 fa3f 	bl	8006574 <HAL_TIM_Encoder_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020fc:	f000 fa04 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002100:	2300      	movs	r3, #0
 8002102:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4619      	mov	r1, r3
 800210c:	4805      	ldr	r0, [pc, #20]	@ (8002124 <MX_TIM3_Init+0xa0>)
 800210e:	f004 ffc7 	bl	80070a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002118:	f000 f9f6 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	@ 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000548 	.word	0x20000548
 8002128:	40000400 	.word	0x40000400

0800212c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0308 	add.w	r3, r7, #8
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	463b      	mov	r3, r7
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002148:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <MX_TIM4_Init+0x94>)
 800214a:	4a1e      	ldr	r2, [pc, #120]	@ (80021c4 <MX_TIM4_Init+0x98>)
 800214c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000-1;
 800214e:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <MX_TIM4_Init+0x94>)
 8002150:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002154:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <MX_TIM4_Init+0x94>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800215c:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <MX_TIM4_Init+0x94>)
 800215e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002162:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <MX_TIM4_Init+0x94>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216a:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <MX_TIM4_Init+0x94>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002170:	4813      	ldr	r0, [pc, #76]	@ (80021c0 <MX_TIM4_Init+0x94>)
 8002172:	f004 f84b 	bl	800620c <HAL_TIM_Base_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800217c:	f000 f9c4 	bl	8002508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002180:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	4619      	mov	r1, r3
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <MX_TIM4_Init+0x94>)
 800218e:	f004 fbe7 	bl	8006960 <HAL_TIM_ConfigClockSource>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002198:	f000 f9b6 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	4619      	mov	r1, r3
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <MX_TIM4_Init+0x94>)
 80021aa:	f004 ff79 	bl	80070a0 <HAL_TIMEx_MasterConfigSynchronization>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80021b4:	f000 f9a8 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000590 	.word	0x20000590
 80021c4:	40000800 	.word	0x40000800

080021c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08c      	sub	sp, #48	@ 0x30
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	2224      	movs	r2, #36	@ 0x24
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f009 fac4 	bl	800b764 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80021e4:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <MX_TIM5_Init+0xa0>)
 80021e6:	4a21      	ldr	r2, [pc, #132]	@ (800226c <MX_TIM5_Init+0xa4>)
 80021e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80021ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <MX_TIM5_Init+0xa0>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002268 <MX_TIM5_Init+0xa0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <MX_TIM5_Init+0xa0>)
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <MX_TIM5_Init+0xa0>)
 8002200:	2200      	movs	r2, #0
 8002202:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002204:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <MX_TIM5_Init+0xa0>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800220a:	2303      	movs	r3, #3
 800220c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800220e:	2302      	movs	r3, #2
 8002210:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002212:	2301      	movs	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002216:	2300      	movs	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800221a:	230f      	movs	r3, #15
 800221c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800221e:	2302      	movs	r3, #2
 8002220:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002222:	2301      	movs	r3, #1
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800222a:	230f      	movs	r3, #15
 800222c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	4619      	mov	r1, r3
 8002234:	480c      	ldr	r0, [pc, #48]	@ (8002268 <MX_TIM5_Init+0xa0>)
 8002236:	f004 f99d 	bl	8006574 <HAL_TIM_Encoder_Init>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002240:	f000 f962 	bl	8002508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	@ (8002268 <MX_TIM5_Init+0xa0>)
 8002252:	f004 ff25 	bl	80070a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800225c:	f000 f954 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002260:	bf00      	nop
 8002262:	3730      	adds	r7, #48	@ 0x30
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200005d8 	.word	0x200005d8
 800226c:	40000c00 	.word	0x40000c00

08002270 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08c      	sub	sp, #48	@ 0x30
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]
 8002292:	615a      	str	r2, [r3, #20]
 8002294:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002296:	4b2a      	ldr	r3, [pc, #168]	@ (8002340 <MX_TIM9_Init+0xd0>)
 8002298:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <MX_TIM9_Init+0xd4>)
 800229a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 28-1;
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <MX_TIM9_Init+0xd0>)
 800229e:	221b      	movs	r2, #27
 80022a0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b27      	ldr	r3, [pc, #156]	@ (8002340 <MX_TIM9_Init+0xd0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100-1;
 80022a8:	4b25      	ldr	r3, [pc, #148]	@ (8002340 <MX_TIM9_Init+0xd0>)
 80022aa:	2263      	movs	r2, #99	@ 0x63
 80022ac:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ae:	4b24      	ldr	r3, [pc, #144]	@ (8002340 <MX_TIM9_Init+0xd0>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b4:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <MX_TIM9_Init+0xd0>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80022ba:	4821      	ldr	r0, [pc, #132]	@ (8002340 <MX_TIM9_Init+0xd0>)
 80022bc:	f003 ffa6 	bl	800620c <HAL_TIM_Base_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM9_Init+0x5a>
  {
    Error_Handler();
 80022c6:	f000 f91f 	bl	8002508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ce:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80022d0:	f107 0320 	add.w	r3, r7, #32
 80022d4:	4619      	mov	r1, r3
 80022d6:	481a      	ldr	r0, [pc, #104]	@ (8002340 <MX_TIM9_Init+0xd0>)
 80022d8:	f004 fb42 	bl	8006960 <HAL_TIM_ConfigClockSource>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80022e2:	f000 f911 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80022e6:	4816      	ldr	r0, [pc, #88]	@ (8002340 <MX_TIM9_Init+0xd0>)
 80022e8:	f004 f83a 	bl	8006360 <HAL_TIM_PWM_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM9_Init+0x86>
  {
    Error_Handler();
 80022f2:	f000 f909 	bl	8002508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f6:	2360      	movs	r3, #96	@ 0x60
 80022f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002306:	1d3b      	adds	r3, r7, #4
 8002308:	2200      	movs	r2, #0
 800230a:	4619      	mov	r1, r3
 800230c:	480c      	ldr	r0, [pc, #48]	@ (8002340 <MX_TIM9_Init+0xd0>)
 800230e:	f004 fa65 	bl	80067dc <HAL_TIM_PWM_ConfigChannel>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM9_Init+0xac>
  {
    Error_Handler();
 8002318:	f000 f8f6 	bl	8002508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2204      	movs	r2, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4807      	ldr	r0, [pc, #28]	@ (8002340 <MX_TIM9_Init+0xd0>)
 8002324:	f004 fa5a 	bl	80067dc <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 800232e:	f000 f8eb 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002332:	4803      	ldr	r0, [pc, #12]	@ (8002340 <MX_TIM9_Init+0xd0>)
 8002334:	f000 fb70 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 8002338:	bf00      	nop
 800233a:	3730      	adds	r7, #48	@ 0x30
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000620 	.word	0x20000620
 8002344:	40014000 	.word	0x40014000

08002348 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800234c:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 800234e:	4a12      	ldr	r2, [pc, #72]	@ (8002398 <MX_USART1_UART_Init+0x50>)
 8002350:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002352:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 8002354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	4b0e      	ldr	r3, [pc, #56]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002360:	4b0c      	ldr	r3, [pc, #48]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002366:	4b0b      	ldr	r3, [pc, #44]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	4b08      	ldr	r3, [pc, #32]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800237e:	4805      	ldr	r0, [pc, #20]	@ (8002394 <MX_USART1_UART_Init+0x4c>)
 8002380:	f004 fefc 	bl	800717c <HAL_UART_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800238a:	f000 f8bd 	bl	8002508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000668 	.word	0x20000668
 8002398:	40011000 	.word	0x40011000

0800239c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <MX_DMA_Init+0x3c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	4a0b      	ldr	r2, [pc, #44]	@ (80023d8 <MX_DMA_Init+0x3c>)
 80023ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b2:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <MX_DMA_Init+0x3c>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2038      	movs	r0, #56	@ 0x38
 80023c4:	f001 fb1b 	bl	80039fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023c8:	2038      	movs	r0, #56	@ 0x38
 80023ca:	f001 fb34 	bl	8003a36 <HAL_NVIC_EnableIRQ>

}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]
 80023f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	4b38      	ldr	r3, [pc, #224]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	4a37      	ldr	r2, [pc, #220]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 80023fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002400:	6313      	str	r3, [r2, #48]	@ 0x30
 8002402:	4b35      	ldr	r3, [pc, #212]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	4a30      	ldr	r2, [pc, #192]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	@ 0x30
 800241e:	4b2e      	ldr	r3, [pc, #184]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	603b      	str	r3, [r7, #0]
 800242e:	4b2a      	ldr	r3, [pc, #168]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a29      	ldr	r2, [pc, #164]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <MX_GPIO_Init+0xfc>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002446:	2200      	movs	r2, #0
 8002448:	f24f 31c8 	movw	r1, #62408	@ 0xf3c8
 800244c:	4823      	ldr	r0, [pc, #140]	@ (80024dc <MX_GPIO_Init+0x100>)
 800244e:	f002 f819 	bl	8004484 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8002452:	2200      	movs	r2, #0
 8002454:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002458:	4821      	ldr	r0, [pc, #132]	@ (80024e0 <MX_GPIO_Init+0x104>)
 800245a:	f002 f813 	bl	8004484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800245e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	4619      	mov	r1, r3
 8002472:	481a      	ldr	r0, [pc, #104]	@ (80024dc <MX_GPIO_Init+0x100>)
 8002474:	f001 fe6a 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002478:	f24f 33c8 	movw	r3, #62408	@ 0xf3c8
 800247c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247e:	2301      	movs	r3, #1
 8002480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	4619      	mov	r1, r3
 8002490:	4812      	ldr	r0, [pc, #72]	@ (80024dc <MX_GPIO_Init+0x100>)
 8002492:	f001 fe5b 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800249a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800249c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80024a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4619      	mov	r1, r3
 80024ac:	480c      	ldr	r0, [pc, #48]	@ (80024e0 <MX_GPIO_Init+0x104>)
 80024ae:	f001 fe4d 	bl	800414c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b8:	2301      	movs	r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 030c 	add.w	r3, r7, #12
 80024c8:	4619      	mov	r1, r3
 80024ca:	4805      	ldr	r0, [pc, #20]	@ (80024e0 <MX_GPIO_Init+0x104>)
 80024cc:	f001 fe3e 	bl	800414c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024d0:	bf00      	nop
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020400 	.word	0x40020400
 80024e0:	40020000 	.word	0x40020000

080024e4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	//promedio_adc();
	HAL_ADC_Start_DMA(&hadc1, adcValue, 5);
 80024ec:	2205      	movs	r2, #5
 80024ee:	4904      	ldr	r1, [pc, #16]	@ (8002500 <HAL_ADC_ConvCpltCallback+0x1c>)
 80024f0:	4804      	ldr	r0, [pc, #16]	@ (8002504 <HAL_ADC_ConvCpltCallback+0x20>)
 80024f2:	f000 fdf5 	bl	80030e0 <HAL_ADC_Start_DMA>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	200006f8 	.word	0x200006f8
 8002504:	20000410 	.word	0x20000410

08002508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <Error_Handler+0x8>

08002514 <motoresInit>:
#include "motorDriver.h"
TIM_HandleTypeDef *timmotorGlobal;



void motoresInit(TIM_HandleTypeDef *timmotor, uint32_t canal,uint32_t canal1){
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]

	timmotorGlobal = timmotor;
 8002520:	4a19      	ldr	r2, [pc, #100]	@ (8002588 <motoresInit+0x74>)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(timmotorGlobal, canal);
 8002526:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <motoresInit+0x74>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f003 ff71 	bl	8006414 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timmotorGlobal, canal1);
 8002532:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <motoresInit+0x74>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 ff6b 	bl	8006414 <HAL_TIM_PWM_Start>
	timmotorGlobal->Instance->CCR1 = 0;
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <motoresInit+0x74>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2200      	movs	r2, #0
 8002546:	635a      	str	r2, [r3, #52]	@ 0x34
	timmotorGlobal->Instance->CCR2 = 0;
 8002548:	4b0f      	ldr	r3, [pc, #60]	@ (8002588 <motoresInit+0x74>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8002552:	2200      	movs	r2, #0
 8002554:	2140      	movs	r1, #64	@ 0x40
 8002556:	480d      	ldr	r0, [pc, #52]	@ (800258c <motoresInit+0x78>)
 8002558:	f001 ff94 	bl	8004484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);
 800255c:	2200      	movs	r2, #0
 800255e:	2180      	movs	r1, #128	@ 0x80
 8002560:	480a      	ldr	r0, [pc, #40]	@ (800258c <motoresInit+0x78>)
 8002562:	f001 ff8f 	bl	8004484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,0);
 8002566:	2200      	movs	r2, #0
 8002568:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800256c:	4807      	ldr	r0, [pc, #28]	@ (800258c <motoresInit+0x78>)
 800256e:	f001 ff89 	bl	8004484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002578:	4804      	ldr	r0, [pc, #16]	@ (800258c <motoresInit+0x78>)
 800257a:	f001 ff83 	bl	8004484 <HAL_GPIO_WritePin>

}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200007a8 	.word	0x200007a8
 800258c:	40020400 	.word	0x40020400

08002590 <motores>:
void motores(int8_t m1, int8_t m2){
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	460a      	mov	r2, r1
 800259a:	71fb      	strb	r3, [r7, #7]
 800259c:	4613      	mov	r3, r2
 800259e:	71bb      	strb	r3, [r7, #6]

	//Control m1
	if(m1 > 0){
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dd16      	ble.n	80025d6 <motores+0x46>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,1);
 80025a8:	2201      	movs	r2, #1
 80025aa:	2140      	movs	r1, #64	@ 0x40
 80025ac:	484a      	ldr	r0, [pc, #296]	@ (80026d8 <motores+0x148>)
 80025ae:	f001 ff69 	bl	8004484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2180      	movs	r1, #128	@ 0x80
 80025b6:	4848      	ldr	r0, [pc, #288]	@ (80026d8 <motores+0x148>)
 80025b8:	f001 ff64 	bl	8004484 <HAL_GPIO_WritePin>

		if(m1 > 100)m1 = 100;
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b64      	cmp	r3, #100	@ 0x64
 80025c2:	dd01      	ble.n	80025c8 <motores+0x38>
 80025c4:	2364      	movs	r3, #100	@ 0x64
 80025c6:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 80025c8:	4b44      	ldr	r3, [pc, #272]	@ (80026dc <motores+0x14c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80025d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80025d4:	e02d      	b.n	8002632 <motores+0xa2>
	}
	else if(m1 < 0){
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	da1a      	bge.n	8002614 <motores+0x84>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2140      	movs	r1, #64	@ 0x40
 80025e2:	483d      	ldr	r0, [pc, #244]	@ (80026d8 <motores+0x148>)
 80025e4:	f001 ff4e 	bl	8004484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,1);
 80025e8:	2201      	movs	r2, #1
 80025ea:	2180      	movs	r1, #128	@ 0x80
 80025ec:	483a      	ldr	r0, [pc, #232]	@ (80026d8 <motores+0x148>)
 80025ee:	f001 ff49 	bl	8004484 <HAL_GPIO_WritePin>
		m1 *= -1;
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	425b      	negs	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	71fb      	strb	r3, [r7, #7]

		if(m1 > 100)m1 = 100;
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	dd01      	ble.n	8002606 <motores+0x76>
 8002602:	2364      	movs	r3, #100	@ 0x64
 8002604:	71fb      	strb	r3, [r7, #7]
		timmotorGlobal->Instance->CCR1 = m1;
 8002606:	4b35      	ldr	r3, [pc, #212]	@ (80026dc <motores+0x14c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002610:	635a      	str	r2, [r3, #52]	@ 0x34
 8002612:	e00e      	b.n	8002632 <motores+0xa2>
	}
	else{
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,0);
 8002614:	2200      	movs	r2, #0
 8002616:	2140      	movs	r1, #64	@ 0x40
 8002618:	482f      	ldr	r0, [pc, #188]	@ (80026d8 <motores+0x148>)
 800261a:	f001 ff33 	bl	8004484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,0);
 800261e:	2200      	movs	r2, #0
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	482d      	ldr	r0, [pc, #180]	@ (80026d8 <motores+0x148>)
 8002624:	f001 ff2e 	bl	8004484 <HAL_GPIO_WritePin>
		timmotorGlobal->Instance->CCR1 = 0;
 8002628:	4b2c      	ldr	r3, [pc, #176]	@ (80026dc <motores+0x14c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
	}


	//Control m2
		if(m2 > 0){
 8002632:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002636:	2b00      	cmp	r3, #0
 8002638:	dd18      	ble.n	800266c <motores+0xdc>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,1);
 800263a:	2201      	movs	r2, #1
 800263c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002640:	4825      	ldr	r0, [pc, #148]	@ (80026d8 <motores+0x148>)
 8002642:	f001 ff1f 	bl	8004484 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 8002646:	2200      	movs	r2, #0
 8002648:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800264c:	4822      	ldr	r0, [pc, #136]	@ (80026d8 <motores+0x148>)
 800264e:	f001 ff19 	bl	8004484 <HAL_GPIO_WritePin>

			if(m2 > 100)m2 = 100;
 8002652:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	dd01      	ble.n	800265e <motores+0xce>
 800265a:	2364      	movs	r3, #100	@ 0x64
 800265c:	71bb      	strb	r3, [r7, #6]
			timmotorGlobal->Instance->CCR2 = m2;
 800265e:	4b1f      	ldr	r3, [pc, #124]	@ (80026dc <motores+0x14c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002668:	639a      	str	r2, [r3, #56]	@ 0x38
		}




}
 800266a:	e031      	b.n	80026d0 <motores+0x140>
		else if(m2 < 0){
 800266c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002670:	2b00      	cmp	r3, #0
 8002672:	da1c      	bge.n	80026ae <motores+0x11e>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,0);
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800267a:	4817      	ldr	r0, [pc, #92]	@ (80026d8 <motores+0x148>)
 800267c:	f001 ff02 	bl	8004484 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,1);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002686:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <motores+0x148>)
 8002688:	f001 fefc 	bl	8004484 <HAL_GPIO_WritePin>
			m2 *= -1;
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	425b      	negs	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	71bb      	strb	r3, [r7, #6]
			if(m2 > 100)m2 = 100;
 8002694:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002698:	2b64      	cmp	r3, #100	@ 0x64
 800269a:	dd01      	ble.n	80026a0 <motores+0x110>
 800269c:	2364      	movs	r3, #100	@ 0x64
 800269e:	71bb      	strb	r3, [r7, #6]
			timmotorGlobal->Instance->CCR2 = m2;
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <motores+0x14c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80026aa:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80026ac:	e010      	b.n	80026d0 <motores+0x140>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8,0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026b4:	4808      	ldr	r0, [pc, #32]	@ (80026d8 <motores+0x148>)
 80026b6:	f001 fee5 	bl	8004484 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80026c0:	4805      	ldr	r0, [pc, #20]	@ (80026d8 <motores+0x148>)
 80026c2:	f001 fedf 	bl	8004484 <HAL_GPIO_WritePin>
			timmotorGlobal->Instance->CCR2 = 0;
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <motores+0x14c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40020400 	.word	0x40020400
 80026dc:	200007a8 	.word	0x200007a8

080026e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	607b      	str	r3, [r7, #4]
 80026ea:	4b10      	ldr	r3, [pc, #64]	@ (800272c <HAL_MspInit+0x4c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	4a0f      	ldr	r2, [pc, #60]	@ (800272c <HAL_MspInit+0x4c>)
 80026f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f6:	4b0d      	ldr	r3, [pc, #52]	@ (800272c <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fe:	607b      	str	r3, [r7, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_MspInit+0x4c>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	4a08      	ldr	r2, [pc, #32]	@ (800272c <HAL_MspInit+0x4c>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	@ 0x40
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40023800 	.word	0x40023800

08002730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a3c      	ldr	r2, [pc, #240]	@ (8002840 <HAL_ADC_MspInit+0x110>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d171      	bne.n	8002836 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	4b3b      	ldr	r3, [pc, #236]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	4a3a      	ldr	r2, [pc, #232]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 800275c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002760:	6453      	str	r3, [r2, #68]	@ 0x44
 8002762:	4b38      	ldr	r3, [pc, #224]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	613b      	str	r3, [r7, #16]
 800276c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	4a33      	ldr	r2, [pc, #204]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6313      	str	r3, [r2, #48]	@ 0x30
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	4b2d      	ldr	r3, [pc, #180]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	4a2c      	ldr	r2, [pc, #176]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 8002794:	f043 0302 	orr.w	r3, r3, #2
 8002798:	6313      	str	r3, [r2, #48]	@ 0x30
 800279a:	4b2a      	ldr	r3, [pc, #168]	@ (8002844 <HAL_ADC_MspInit+0x114>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027a6:	23f0      	movs	r3, #240	@ 0xf0
 80027a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027aa:	2303      	movs	r3, #3
 80027ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4823      	ldr	r0, [pc, #140]	@ (8002848 <HAL_ADC_MspInit+0x118>)
 80027ba:	f001 fcc7 	bl	800414c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027be:	2301      	movs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c2:	2303      	movs	r3, #3
 80027c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4619      	mov	r1, r3
 80027d0:	481e      	ldr	r0, [pc, #120]	@ (800284c <HAL_ADC_MspInit+0x11c>)
 80027d2:	f001 fcbb 	bl	800414c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 80027d8:	4a1e      	ldr	r2, [pc, #120]	@ (8002854 <HAL_ADC_MspInit+0x124>)
 80027da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 80027de:	2200      	movs	r2, #0
 80027e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027e8:	4b19      	ldr	r3, [pc, #100]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027ee:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 80027f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 80027f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 8002800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002804:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002806:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 8002808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800280c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 8002810:	2200      	movs	r2, #0
 8002812:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002814:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 8002816:	2200      	movs	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800281a:	480d      	ldr	r0, [pc, #52]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 800281c:	f001 f926 	bl	8003a6c <HAL_DMA_Init>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002826:	f7ff fe6f 	bl	8002508 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a08      	ldr	r2, [pc, #32]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 800282e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002830:	4a07      	ldr	r2, [pc, #28]	@ (8002850 <HAL_ADC_MspInit+0x120>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002836:	bf00      	nop
 8002838:	3728      	adds	r7, #40	@ 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40012000 	.word	0x40012000
 8002844:	40023800 	.word	0x40023800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	20000458 	.word	0x20000458
 8002854:	40026410 	.word	0x40026410

08002858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a29      	ldr	r2, [pc, #164]	@ (800290c <HAL_TIM_Base_MspInit+0xb4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	4b28      	ldr	r3, [pc, #160]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	4a27      	ldr	r2, [pc, #156]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6453      	str	r3, [r2, #68]	@ 0x44
 800287a:	4b25      	ldr	r3, [pc, #148]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8002886:	e03a      	b.n	80028fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289a:	4a1d      	ldr	r2, [pc, #116]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	613b      	str	r3, [r7, #16]
 80028ac:	693b      	ldr	r3, [r7, #16]
}
 80028ae:	e026      	b.n	80028fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a17      	ldr	r2, [pc, #92]	@ (8002914 <HAL_TIM_Base_MspInit+0xbc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10e      	bne.n	80028d8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	4a13      	ldr	r2, [pc, #76]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	e012      	b.n	80028fe <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002918 <HAL_TIM_Base_MspInit+0xc0>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d10d      	bne.n	80028fe <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ea:	4a09      	ldr	r2, [pc, #36]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 80028ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028f2:	4b07      	ldr	r3, [pc, #28]	@ (8002910 <HAL_TIM_Base_MspInit+0xb8>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40010000 	.word	0x40010000
 8002910:	40023800 	.word	0x40023800
 8002914:	40000800 	.word	0x40000800
 8002918:	40014000 	.word	0x40014000

0800291c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	@ 0x30
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a32      	ldr	r2, [pc, #200]	@ (8002a04 <HAL_TIM_Encoder_MspInit+0xe8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d12c      	bne.n	8002998 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	4a30      	ldr	r2, [pc, #192]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8002948:	f043 0302 	orr.w	r3, r3, #2
 800294c:	6413      	str	r3, [r2, #64]	@ 0x40
 800294e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	61bb      	str	r3, [r7, #24]
 8002958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	4a29      	ldr	r2, [pc, #164]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6313      	str	r3, [r2, #48]	@ 0x30
 800296a:	4b27      	ldr	r3, [pc, #156]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002976:	2330      	movs	r3, #48	@ 0x30
 8002978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002982:	2300      	movs	r3, #0
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002986:	2302      	movs	r3, #2
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4619      	mov	r1, r3
 8002990:	481e      	ldr	r0, [pc, #120]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002992:	f001 fbdb 	bl	800414c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002996:	e030      	b.n	80029fa <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM5)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a10 <HAL_TIM_Encoder_MspInit+0xf4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12b      	bne.n	80029fa <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	4a17      	ldr	r2, [pc, #92]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80029ac:	f043 0308 	orr.w	r3, r3, #8
 80029b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_TIM_Encoder_MspInit+0xec>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029da:	2303      	movs	r3, #3
 80029dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2300      	movs	r3, #0
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029ea:	2302      	movs	r3, #2
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 031c 	add.w	r3, r7, #28
 80029f2:	4619      	mov	r1, r3
 80029f4:	4807      	ldr	r0, [pc, #28]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0xf8>)
 80029f6:	f001 fba9 	bl	800414c <HAL_GPIO_Init>
}
 80029fa:	bf00      	nop
 80029fc:	3730      	adds	r7, #48	@ 0x30
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020400 	.word	0x40020400
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40020000 	.word	0x40020000

08002a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <HAL_TIM_MspPostInit+0x68>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d11d      	bne.n	8002a76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a10      	ldr	r2, [pc, #64]	@ (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a56:	230c      	movs	r3, #12
 8002a58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002a66:	2303      	movs	r3, #3
 8002a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	@ (8002a88 <HAL_TIM_MspPostInit+0x70>)
 8002a72:	f001 fb6b 	bl	800414c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020000 	.word	0x40020000

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08a      	sub	sp, #40	@ 0x28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a19      	ldr	r2, [pc, #100]	@ (8002b10 <HAL_UART_MspInit+0x84>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12c      	bne.n	8002b08 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b18      	ldr	r3, [pc, #96]	@ (8002b14 <HAL_UART_MspInit+0x88>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a17      	ldr	r2, [pc, #92]	@ (8002b14 <HAL_UART_MspInit+0x88>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b15      	ldr	r3, [pc, #84]	@ (8002b14 <HAL_UART_MspInit+0x88>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <HAL_UART_MspInit+0x88>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a10      	ldr	r2, [pc, #64]	@ (8002b14 <HAL_UART_MspInit+0x88>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b0e      	ldr	r3, [pc, #56]	@ (8002b14 <HAL_UART_MspInit+0x88>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af8:	2307      	movs	r3, #7
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4805      	ldr	r0, [pc, #20]	@ (8002b18 <HAL_UART_MspInit+0x8c>)
 8002b04:	f001 fb22 	bl	800414c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	@ 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020000 	.word	0x40020000

08002b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b20:	bf00      	nop
 8002b22:	e7fd      	b.n	8002b20 <NMI_Handler+0x4>

08002b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <HardFault_Handler+0x4>

08002b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <MemManage_Handler+0x4>

08002b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b48:	bf00      	nop
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b72:	f000 fa2d 	bl	8002fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b80:	4802      	ldr	r0, [pc, #8]	@ (8002b8c <DMA2_Stream0_IRQHandler+0x10>)
 8002b82:	f001 f879 	bl	8003c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000458 	.word	0x20000458

08002b90 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b94:	4802      	ldr	r0, [pc, #8]	@ (8002ba0 <OTG_FS_IRQHandler+0x10>)
 8002b96:	f001 fdd2 	bl	800473e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20001c90 	.word	0x20001c90

08002ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <SystemInit+0x20>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	4a05      	ldr	r2, [pc, #20]	@ (8002bc4 <SystemInit+0x20>)
 8002bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <vel>:
extern int16_t velocidad_mm_s;
extern int16_t velocidad_rad_s;
extern int32_t val_pwm;
extern int16_t pwm_mm;

void vel(int16_t rpm_s) {
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
    velocidad_mm_s = (3.1416 * diametro_rueda * rpm_s) / 60.0;
 8002bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c80 <vel+0xb8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fc62 	bl	80004a0 <__aeabi_f2d>
 8002bdc:	a324      	add	r3, pc, #144	@ (adr r3, 8002c70 <vel+0xa8>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fcb5 	bl	8000550 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4614      	mov	r4, r2
 8002bec:	461d      	mov	r5, r3
 8002bee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fc42 	bl	800047c <__aeabi_i2d>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	4629      	mov	r1, r5
 8002c00:	f7fd fca6 	bl	8000550 <__aeabi_dmul>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4610      	mov	r0, r2
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	4b1c      	ldr	r3, [pc, #112]	@ (8002c84 <vel+0xbc>)
 8002c12:	f7fd fdc7 	bl	80007a4 <__aeabi_ddiv>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7fd fea9 	bl	8000974 <__aeabi_d2iz>
 8002c22:	4603      	mov	r3, r0
 8002c24:	b21a      	sxth	r2, r3
 8002c26:	4b18      	ldr	r3, [pc, #96]	@ (8002c88 <vel+0xc0>)
 8002c28:	801a      	strh	r2, [r3, #0]
    velocidad_rad_s = (2 * 3.1416 * rpm_s) / 60.0;
 8002c2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fc24 	bl	800047c <__aeabi_i2d>
 8002c34:	a310      	add	r3, pc, #64	@ (adr r3, 8002c78 <vel+0xb0>)
 8002c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3a:	f7fd fc89 	bl	8000550 <__aeabi_dmul>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <vel+0xbc>)
 8002c4c:	f7fd fdaa 	bl	80007a4 <__aeabi_ddiv>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4610      	mov	r0, r2
 8002c56:	4619      	mov	r1, r3
 8002c58:	f7fd fe8c 	bl	8000974 <__aeabi_d2iz>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	b21a      	sxth	r2, r3
 8002c60:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <vel+0xc4>)
 8002c62:	801a      	strh	r2, [r3, #0]
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c6c:	f3af 8000 	nop.w
 8002c70:	2e48e8a7 	.word	0x2e48e8a7
 8002c74:	400921ff 	.word	0x400921ff
 8002c78:	2e48e8a7 	.word	0x2e48e8a7
 8002c7c:	401921ff 	.word	0x401921ff
 8002c80:	2000002c 	.word	0x2000002c
 8002c84:	404e0000 	.word	0x404e0000
 8002c88:	200006e6 	.word	0x200006e6
 8002c8c:	200006e8 	.word	0x200006e8

08002c90 <calculo_rpm>:

void calculo_rpm() {
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
    if (set == 1) {
 8002c96:	4b4e      	ldr	r3, [pc, #312]	@ (8002dd0 <calculo_rpm+0x140>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d106      	bne.n	8002cac <calculo_rpm+0x1c>
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 8002c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8002dd4 <calculo_rpm+0x144>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24
        set = 0;
 8002ca6:	4b4a      	ldr	r3, [pc, #296]	@ (8002dd0 <calculo_rpm+0x140>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    }

    if (__HAL_TIM_GET_COUNTER(&htim1) >= 200) {
 8002cac:	4b49      	ldr	r3, [pc, #292]	@ (8002dd4 <calculo_rpm+0x144>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002cb4:	f240 8088 	bls.w	8002dc8 <calculo_rpm+0x138>
        __HAL_TIM_SET_COUNTER(&htim1, 0);
 8002cb8:	4b46      	ldr	r3, [pc, #280]	@ (8002dd4 <calculo_rpm+0x144>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

        contador_actual = (int32_t)__HAL_TIM_GET_COUNTER(&htim5);
 8002cc0:	4b45      	ldr	r3, [pc, #276]	@ (8002dd8 <calculo_rpm+0x148>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	4b44      	ldr	r3, [pc, #272]	@ (8002ddc <calculo_rpm+0x14c>)
 8002cca:	601a      	str	r2, [r3, #0]
        contador_actual_2 = (int32_t)__HAL_TIM_GET_COUNTER(&htim3);
 8002ccc:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <calculo_rpm+0x150>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b43      	ldr	r3, [pc, #268]	@ (8002de4 <calculo_rpm+0x154>)
 8002cd6:	601a      	str	r2, [r3, #0]
        pulsos_act = fabsf((float)contador_actual) / 1431.0f; // Usamos fabsf para float
 8002cd8:	4b40      	ldr	r3, [pc, #256]	@ (8002ddc <calculo_rpm+0x14c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce4:	eeb0 7ae7 	vabs.f32	s14, s15
 8002ce8:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002de8 <calculo_rpm+0x158>
 8002cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf0:	4b3e      	ldr	r3, [pc, #248]	@ (8002dec <calculo_rpm+0x15c>)
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
        pulsos_act_2 = fabsf((float)contador_actual_2) / 1431.0f;
 8002cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <calculo_rpm+0x154>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	ee07 3a90 	vmov	s15, r3
 8002cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d02:	eeb0 7ae7 	vabs.f32	s14, s15
 8002d06:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002de8 <calculo_rpm+0x158>
 8002d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0e:	4b38      	ldr	r3, [pc, #224]	@ (8002df0 <calculo_rpm+0x160>)
 8002d10:	edc3 7a00 	vstr	s15, [r3]
        pulsos = pulsos_act - pulsos_ant;
 8002d14:	4b35      	ldr	r3, [pc, #212]	@ (8002dec <calculo_rpm+0x15c>)
 8002d16:	ed93 7a00 	vldr	s14, [r3]
 8002d1a:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <calculo_rpm+0x164>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d24:	4b34      	ldr	r3, [pc, #208]	@ (8002df8 <calculo_rpm+0x168>)
 8002d26:	edc3 7a00 	vstr	s15, [r3]
        pulsos_2 = pulsos_act_2 - pulsos_ant_2;
 8002d2a:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <calculo_rpm+0x160>)
 8002d2c:	ed93 7a00 	vldr	s14, [r3]
 8002d30:	4b32      	ldr	r3, [pc, #200]	@ (8002dfc <calculo_rpm+0x16c>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d3a:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <calculo_rpm+0x170>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
        pulsos_ant = pulsos_act;
 8002d40:	4b2a      	ldr	r3, [pc, #168]	@ (8002dec <calculo_rpm+0x15c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <calculo_rpm+0x164>)
 8002d46:	6013      	str	r3, [r2, #0]
        pulsos_ant_2 = pulsos_act_2;
 8002d48:	4b29      	ldr	r3, [pc, #164]	@ (8002df0 <calculo_rpm+0x160>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002dfc <calculo_rpm+0x16c>)
 8002d4e:	6013      	str	r3, [r2, #0]

        float temp_rpm = pulsos * 600.0f;
 8002d50:	4b29      	ldr	r3, [pc, #164]	@ (8002df8 <calculo_rpm+0x168>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002e04 <calculo_rpm+0x174>
 8002d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d5e:	edc7 7a01 	vstr	s15, [r7, #4]
		rpm = (int16_t)fabsf(temp_rpm);
 8002d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d66:	eef0 7ae7 	vabs.f32	s15, s15
 8002d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6e:	ee17 3a90 	vmov	r3, s15
 8002d72:	b21a      	sxth	r2, r3
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <calculo_rpm+0x178>)
 8002d76:	801a      	strh	r2, [r3, #0]
		rpm_2 = (int16_t)fabsf(pulsos_2 * 600.0f);
 8002d78:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <calculo_rpm+0x170>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002e04 <calculo_rpm+0x174>
 8002d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d86:	eef0 7ae7 	vabs.f32	s15, s15
 8002d8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d8e:	ee17 3a90 	vmov	r3, s15
 8002d92:	b21a      	sxth	r2, r3
 8002d94:	4b1d      	ldr	r3, [pc, #116]	@ (8002e0c <calculo_rpm+0x17c>)
 8002d96:	801a      	strh	r2, [r3, #0]

        if (rpm < 0) rpm = 0;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <calculo_rpm+0x178>)
 8002d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da02      	bge.n	8002da8 <calculo_rpm+0x118>
 8002da2:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <calculo_rpm+0x178>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	801a      	strh	r2, [r3, #0]
        rpm_f = aplicarFiltroFIR(rpm);
 8002da8:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <calculo_rpm+0x178>)
 8002daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fd ffd0 	bl	8000d54 <aplicarFiltroFIR>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <calculo_rpm+0x180>)
 8002dba:	801a      	strh	r2, [r3, #0]
        vel(rpm_f);
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <calculo_rpm+0x180>)
 8002dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ff00 	bl	8002bc8 <vel>
    }
}
 8002dc8:	bf00      	nop
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000028 	.word	0x20000028
 8002dd4:	200004b8 	.word	0x200004b8
 8002dd8:	200005d8 	.word	0x200005d8
 8002ddc:	200006d4 	.word	0x200006d4
 8002de0:	20000548 	.word	0x20000548
 8002de4:	200006d8 	.word	0x200006d8
 8002de8:	44b2e000 	.word	0x44b2e000
 8002dec:	200006c8 	.word	0x200006c8
 8002df0:	200006d0 	.word	0x200006d0
 8002df4:	200006c4 	.word	0x200006c4
 8002df8:	200006b0 	.word	0x200006b0
 8002dfc:	200006cc 	.word	0x200006cc
 8002e00:	200006b4 	.word	0x200006b4
 8002e04:	44160000 	.word	0x44160000
 8002e08:	200006e0 	.word	0x200006e0
 8002e0c:	200006e2 	.word	0x200006e2
 8002e10:	200006e4 	.word	0x200006e4

08002e14 <conversor>:

void conversor(float volt) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (volt < 0) {
 8002e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	d503      	bpl.n	8002e34 <conversor+0x20>
        volt = 0;
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
    } else if (volt > 7.5) {
        volt = 7.5;
    } else {
        val_pwm = (int32_t)((volt * (-100)) / (7.5));
    }
}
 8002e32:	e023      	b.n	8002e7c <conversor+0x68>
    } else if (volt > 7.5) {
 8002e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e38:	eeb1 7a0e 	vmov.f32	s14, #30	@ 0x40f00000  7.5
 8002e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e44:	dd02      	ble.n	8002e4c <conversor+0x38>
        volt = 7.5;
 8002e46:	4b0f      	ldr	r3, [pc, #60]	@ (8002e84 <conversor+0x70>)
 8002e48:	607b      	str	r3, [r7, #4]
}
 8002e4a:	e017      	b.n	8002e7c <conversor+0x68>
        val_pwm = (int32_t)((volt * (-100)) / (7.5));
 8002e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e50:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002e88 <conversor+0x74>
 8002e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e58:	ee17 0a90 	vmov	r0, s15
 8002e5c:	f7fd fb20 	bl	80004a0 <__aeabi_f2d>
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	4b09      	ldr	r3, [pc, #36]	@ (8002e8c <conversor+0x78>)
 8002e66:	f7fd fc9d 	bl	80007a4 <__aeabi_ddiv>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd fd7f 	bl	8000974 <__aeabi_d2iz>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a05      	ldr	r2, [pc, #20]	@ (8002e90 <conversor+0x7c>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40f00000 	.word	0x40f00000
 8002e88:	c2c80000 	.word	0xc2c80000
 8002e8c:	401e0000 	.word	0x401e0000
 8002e90:	200006c0 	.word	0x200006c0

08002e94 <conversor_mm_s>:

void conversor_mm_s(int32_t velocidad) {
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
    if (velocidad > 744) {
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f5b3 7f3a 	cmp.w	r3, #744	@ 0x2e8
 8002ea2:	dd02      	ble.n	8002eaa <conversor_mm_s+0x16>
        velocidad = 744;
 8002ea4:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 8002ea8:	607b      	str	r3, [r7, #4]
    }
    pwm_mm = ((velocidad * 100) / 744) * (-1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2264      	movs	r2, #100	@ 0x64
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	4a07      	ldr	r2, [pc, #28]	@ (8002ed0 <conversor_mm_s+0x3c>)
 8002eb4:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb8:	11d2      	asrs	r2, r2, #7
 8002eba:	17db      	asrs	r3, r3, #31
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	4b04      	ldr	r3, [pc, #16]	@ (8002ed4 <conversor_mm_s+0x40>)
 8002ec2:	801a      	strh	r2, [r3, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	2c0b02c1 	.word	0x2c0b02c1
 8002ed4:	200006bc 	.word	0x200006bc

08002ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ed8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f10 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002edc:	f7ff fe62 	bl	8002ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee0:	480c      	ldr	r0, [pc, #48]	@ (8002f14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ee2:	490d      	ldr	r1, [pc, #52]	@ (8002f18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ee8:	e002      	b.n	8002ef0 <LoopCopyDataInit>

08002eea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eee:	3304      	adds	r3, #4

08002ef0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef4:	d3f9      	bcc.n	8002eea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8002f24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002efa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002efc:	e001      	b.n	8002f02 <LoopFillZerobss>

08002efe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002efe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f00:	3204      	adds	r2, #4

08002f02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f04:	d3fb      	bcc.n	8002efe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f06:	f008 fc35 	bl	800b774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0a:	f7fe fe55 	bl	8001bb8 <main>
  bx  lr    
 8002f0e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f18:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 8002f1c:	0800b868 	.word	0x0800b868
  ldr r2, =_sbss
 8002f20:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 8002f24:	20002394 	.word	0x20002394

08002f28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f28:	e7fe      	b.n	8002f28 <ADC_IRQHandler>
	...

08002f2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f30:	4b0e      	ldr	r3, [pc, #56]	@ (8002f6c <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <HAL_Init+0x40>)
 8002f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0a      	ldr	r2, [pc, #40]	@ (8002f6c <HAL_Init+0x40>)
 8002f42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f48:	4b08      	ldr	r3, [pc, #32]	@ (8002f6c <HAL_Init+0x40>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	@ (8002f6c <HAL_Init+0x40>)
 8002f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f54:	2003      	movs	r0, #3
 8002f56:	f000 fd47 	bl	80039e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5a:	200f      	movs	r0, #15
 8002f5c:	f000 f808 	bl	8002f70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f60:	f7ff fbbe 	bl	80026e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	40023c00 	.word	0x40023c00

08002f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f78:	4b12      	ldr	r3, [pc, #72]	@ (8002fc4 <HAL_InitTick+0x54>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_InitTick+0x58>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	4619      	mov	r1, r3
 8002f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fd5f 	bl	8003a52 <HAL_SYSTICK_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00e      	b.n	8002fbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	d80a      	bhi.n	8002fba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	f000 fd27 	bl	80039fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb0:	4a06      	ldr	r2, [pc, #24]	@ (8002fcc <HAL_InitTick+0x5c>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e000      	b.n	8002fbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000228 	.word	0x20000228
 8002fc8:	20000230 	.word	0x20000230
 8002fcc:	2000022c 	.word	0x2000022c

08002fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_IncTick+0x20>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_IncTick+0x24>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a04      	ldr	r2, [pc, #16]	@ (8002ff4 <HAL_IncTick+0x24>)
 8002fe2:	6013      	str	r3, [r2, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000230 	.word	0x20000230
 8002ff4:	200007ac 	.word	0x200007ac

08002ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8002ffc:	4b03      	ldr	r3, [pc, #12]	@ (800300c <HAL_GetTick+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	200007ac 	.word	0x200007ac

08003010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff ffee 	bl	8002ff8 <HAL_GetTick>
 800301c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d005      	beq.n	8003036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302a:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <HAL_Delay+0x44>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003036:	bf00      	nop
 8003038:	f7ff ffde 	bl	8002ff8 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	429a      	cmp	r2, r3
 8003046:	d8f7      	bhi.n	8003038 <HAL_Delay+0x28>
  {
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000230 	.word	0x20000230

08003058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e033      	b.n	80030d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fb5a 	bl	8002730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800309e:	f023 0302 	bic.w	r3, r3, #2
 80030a2:	f043 0202 	orr.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa4e 	bl	800354c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80030c6:	e001      	b.n	80030cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_ADC_Start_DMA+0x1e>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0ce      	b.n	800329c <HAL_ADC_Start_DMA+0x1bc>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d018      	beq.n	8003146 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003124:	4b5f      	ldr	r3, [pc, #380]	@ (80032a4 <HAL_ADC_Start_DMA+0x1c4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5f      	ldr	r2, [pc, #380]	@ (80032a8 <HAL_ADC_Start_DMA+0x1c8>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0c9a      	lsrs	r2, r3, #18
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003138:	e002      	b.n	8003140 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	3b01      	subs	r3, #1
 800313e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f9      	bne.n	800313a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003154:	d107      	bne.n	8003166 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003164:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8086 	bne.w	8003282 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d007      	beq.n	80031a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b4:	d106      	bne.n	80031c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ba:	f023 0206 	bic.w	r2, r3, #6
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80031c2:	e002      	b.n	80031ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d2:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_ADC_Start_DMA+0x1cc>)
 80031d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031da:	4a35      	ldr	r2, [pc, #212]	@ (80032b0 <HAL_ADC_Start_DMA+0x1d0>)
 80031dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e2:	4a34      	ldr	r2, [pc, #208]	@ (80032b4 <HAL_ADC_Start_DMA+0x1d4>)
 80031e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ea:	4a33      	ldr	r2, [pc, #204]	@ (80032b8 <HAL_ADC_Start_DMA+0x1d8>)
 80031ec:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003206:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003216:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	334c      	adds	r3, #76	@ 0x4c
 8003222:	4619      	mov	r1, r3
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f000 fcce 	bl	8003bc8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 031f 	and.w	r3, r3, #31
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10f      	bne.n	8003258 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d129      	bne.n	800329a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	e020      	b.n	800329a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a17      	ldr	r2, [pc, #92]	@ (80032bc <HAL_ADC_Start_DMA+0x1dc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d11b      	bne.n	800329a <HAL_ADC_Start_DMA+0x1ba>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d114      	bne.n	800329a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e00b      	b.n	800329a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f043 0210 	orr.w	r2, r3, #16
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000228 	.word	0x20000228
 80032a8:	431bde83 	.word	0x431bde83
 80032ac:	40012300 	.word	0x40012300
 80032b0:	08003745 	.word	0x08003745
 80032b4:	080037ff 	.word	0x080037ff
 80032b8:	0800381b 	.word	0x0800381b
 80032bc:	40012000 	.word	0x40012000

080032c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x1c>
 8003300:	2302      	movs	r3, #2
 8003302:	e113      	b.n	800352c <HAL_ADC_ConfigChannel+0x244>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b09      	cmp	r3, #9
 8003312:	d925      	bls.n	8003360 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68d9      	ldr	r1, [r3, #12]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	3b1e      	subs	r3, #30
 800332a:	2207      	movs	r2, #7
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43da      	mvns	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	400a      	ands	r2, r1
 8003338:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68d9      	ldr	r1, [r3, #12]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	4618      	mov	r0, r3
 800334c:	4603      	mov	r3, r0
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4403      	add	r3, r0
 8003352:	3b1e      	subs	r3, #30
 8003354:	409a      	lsls	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	e022      	b.n	80033a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6919      	ldr	r1, [r3, #16]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	4613      	mov	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	4413      	add	r3, r2
 8003374:	2207      	movs	r2, #7
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6919      	ldr	r1, [r3, #16]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	4603      	mov	r3, r0
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4403      	add	r3, r0
 800339c:	409a      	lsls	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d824      	bhi.n	80033f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	3b05      	subs	r3, #5
 80033c0:	221f      	movs	r2, #31
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43da      	mvns	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	400a      	ands	r2, r1
 80033ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	b29b      	uxth	r3, r3
 80033dc:	4618      	mov	r0, r3
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	3b05      	subs	r3, #5
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80033f6:	e04c      	b.n	8003492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b0c      	cmp	r3, #12
 80033fe:	d824      	bhi.n	800344a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3b23      	subs	r3, #35	@ 0x23
 8003412:	221f      	movs	r2, #31
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43da      	mvns	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	400a      	ands	r2, r1
 8003420:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	b29b      	uxth	r3, r3
 800342e:	4618      	mov	r0, r3
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	3b23      	subs	r3, #35	@ 0x23
 800343c:	fa00 f203 	lsl.w	r2, r0, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
 8003448:	e023      	b.n	8003492 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b41      	subs	r3, #65	@ 0x41
 800345c:	221f      	movs	r2, #31
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	4618      	mov	r0, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	3b41      	subs	r3, #65	@ 0x41
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003492:	4b29      	ldr	r3, [pc, #164]	@ (8003538 <HAL_ADC_ConfigChannel+0x250>)
 8003494:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a28      	ldr	r2, [pc, #160]	@ (800353c <HAL_ADC_ConfigChannel+0x254>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10f      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x1d8>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b12      	cmp	r3, #18
 80034a6:	d10b      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1d      	ldr	r2, [pc, #116]	@ (800353c <HAL_ADC_ConfigChannel+0x254>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12b      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x23a>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003540 <HAL_ADC_ConfigChannel+0x258>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <HAL_ADC_ConfigChannel+0x1f4>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b11      	cmp	r3, #17
 80034da:	d122      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a11      	ldr	r2, [pc, #68]	@ (8003540 <HAL_ADC_ConfigChannel+0x258>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d111      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034fe:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <HAL_ADC_ConfigChannel+0x25c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <HAL_ADC_ConfigChannel+0x260>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	0c9a      	lsrs	r2, r3, #18
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003514:	e002      	b.n	800351c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3b01      	subs	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40012300 	.word	0x40012300
 800353c:	40012000 	.word	0x40012000
 8003540:	10000012 	.word	0x10000012
 8003544:	20000228 	.word	0x20000228
 8003548:	431bde83 	.word	0x431bde83

0800354c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003554:	4b79      	ldr	r3, [pc, #484]	@ (800373c <ADC_Init+0x1f0>)
 8003556:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	431a      	orrs	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6859      	ldr	r1, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	021a      	lsls	r2, r3, #8
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6899      	ldr	r1, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035de:	4a58      	ldr	r2, [pc, #352]	@ (8003740 <ADC_Init+0x1f4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d022      	beq.n	800362a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6899      	ldr	r1, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	e00f      	b.n	800364a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003648:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0202 	bic.w	r2, r2, #2
 8003658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6899      	ldr	r1, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	7e1b      	ldrb	r3, [r3, #24]
 8003664:	005a      	lsls	r2, r3, #1
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01b      	beq.n	80036b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003686:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685a      	ldr	r2, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003696:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	3b01      	subs	r3, #1
 80036a4:	035a      	lsls	r2, r3, #13
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	e007      	b.n	80036c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	3b01      	subs	r3, #1
 80036dc:	051a      	lsls	r2, r3, #20
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	6899      	ldr	r1, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003702:	025a      	lsls	r2, r3, #9
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	029a      	lsls	r2, r3, #10
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	bf00      	nop
 8003732:	3714      	adds	r7, #20
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40012300 	.word	0x40012300
 8003740:	0f000001 	.word	0x0f000001

08003744 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003750:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800375a:	2b00      	cmp	r3, #0
 800375c:	d13c      	bne.n	80037d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d12b      	bne.n	80037d0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800377c:	2b00      	cmp	r3, #0
 800377e:	d127      	bne.n	80037d0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	d006      	beq.n	800379c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003798:	2b00      	cmp	r3, #0
 800379a:	d119      	bne.n	80037d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0220 	bic.w	r2, r2, #32
 80037aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f043 0201 	orr.w	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f7fe fe87 	bl	80024e4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037d6:	e00e      	b.n	80037f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f7ff fd75 	bl	80032d4 <HAL_ADC_ErrorCallback>
}
 80037ea:	e004      	b.n	80037f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff fd57 	bl	80032c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b084      	sub	sp, #16
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003826:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2240      	movs	r2, #64	@ 0x40
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fd4a 	bl	80032d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003840:	bf00      	nop
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003864:	4013      	ands	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003870:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387a:	4a04      	ldr	r2, [pc, #16]	@ (800388c <__NVIC_SetPriorityGrouping+0x44>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	60d3      	str	r3, [r2, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003894:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 0307 	and.w	r3, r3, #7
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db0b      	blt.n	80038d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f003 021f 	and.w	r2, r3, #31
 80038c4:	4907      	ldr	r1, [pc, #28]	@ (80038e4 <__NVIC_EnableIRQ+0x38>)
 80038c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	2001      	movs	r0, #1
 80038ce:	fa00 f202 	lsl.w	r2, r0, r2
 80038d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	e000e100 	.word	0xe000e100

080038e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	db0a      	blt.n	8003912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	490c      	ldr	r1, [pc, #48]	@ (8003934 <__NVIC_SetPriority+0x4c>)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	0112      	lsls	r2, r2, #4
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	440b      	add	r3, r1
 800390c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003910:	e00a      	b.n	8003928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	b2da      	uxtb	r2, r3
 8003916:	4908      	ldr	r1, [pc, #32]	@ (8003938 <__NVIC_SetPriority+0x50>)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	3b04      	subs	r3, #4
 8003920:	0112      	lsls	r2, r2, #4
 8003922:	b2d2      	uxtb	r2, r2
 8003924:	440b      	add	r3, r1
 8003926:	761a      	strb	r2, [r3, #24]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000e100 	.word	0xe000e100
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800393c:	b480      	push	{r7}
 800393e:	b089      	sub	sp, #36	@ 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f1c3 0307 	rsb	r3, r3, #7
 8003956:	2b04      	cmp	r3, #4
 8003958:	bf28      	it	cs
 800395a:	2304      	movcs	r3, #4
 800395c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	3304      	adds	r3, #4
 8003962:	2b06      	cmp	r3, #6
 8003964:	d902      	bls.n	800396c <NVIC_EncodePriority+0x30>
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3b03      	subs	r3, #3
 800396a:	e000      	b.n	800396e <NVIC_EncodePriority+0x32>
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	401a      	ands	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003984:	f04f 31ff 	mov.w	r1, #4294967295
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	fa01 f303 	lsl.w	r3, r1, r3
 800398e:	43d9      	mvns	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003994:	4313      	orrs	r3, r2
         );
}
 8003996:	4618      	mov	r0, r3
 8003998:	3724      	adds	r7, #36	@ 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b4:	d301      	bcc.n	80039ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039b6:	2301      	movs	r3, #1
 80039b8:	e00f      	b.n	80039da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ba:	4a0a      	ldr	r2, [pc, #40]	@ (80039e4 <SysTick_Config+0x40>)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3b01      	subs	r3, #1
 80039c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c2:	210f      	movs	r1, #15
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	f7ff ff8e 	bl	80038e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039cc:	4b05      	ldr	r3, [pc, #20]	@ (80039e4 <SysTick_Config+0x40>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d2:	4b04      	ldr	r3, [pc, #16]	@ (80039e4 <SysTick_Config+0x40>)
 80039d4:	2207      	movs	r2, #7
 80039d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	e000e010 	.word	0xe000e010

080039e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7ff ff29 	bl	8003848 <__NVIC_SetPriorityGrouping>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
 8003a0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a10:	f7ff ff3e 	bl	8003890 <__NVIC_GetPriorityGrouping>
 8003a14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	6978      	ldr	r0, [r7, #20]
 8003a1c:	f7ff ff8e 	bl	800393c <NVIC_EncodePriority>
 8003a20:	4602      	mov	r2, r0
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ff5d 	bl	80038e8 <__NVIC_SetPriority>
}
 8003a2e:	bf00      	nop
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff31 	bl	80038ac <__NVIC_EnableIRQ>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffa2 	bl	80039a4 <SysTick_Config>
 8003a60:	4603      	mov	r3, r0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff fabe 	bl	8002ff8 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e099      	b.n	8003bbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa8:	e00f      	b.n	8003aca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aaa:	f7ff faa5 	bl	8002ff8 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b05      	cmp	r3, #5
 8003ab6:	d908      	bls.n	8003aca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e078      	b.n	8003bbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e8      	bne.n	8003aaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <HAL_DMA_Init+0x158>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003af6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d107      	bne.n	8003b34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0307 	bic.w	r3, r3, #7
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d117      	bne.n	8003b8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fa6f 	bl	8004054 <DMA_CheckFifoParam>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2240      	movs	r2, #64	@ 0x40
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e016      	b.n	8003bbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fa26 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	223f      	movs	r2, #63	@ 0x3f
 8003ba6:	409a      	lsls	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	f010803f 	.word	0xf010803f

08003bc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_DMA_Start_IT+0x26>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e040      	b.n	8003c70 <HAL_DMA_Start_IT+0xa8>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d12f      	bne.n	8003c62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f9b8 	bl	8003f8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c20:	223f      	movs	r2, #63	@ 0x3f
 8003c22:	409a      	lsls	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0216 	orr.w	r2, r2, #22
 8003c36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0208 	orr.w	r2, r2, #8
 8003c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e005      	b.n	8003c6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c84:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec0 <HAL_DMA_IRQHandler+0x248>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a8e      	ldr	r2, [pc, #568]	@ (8003ec4 <HAL_DMA_IRQHandler+0x24c>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01a      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0204 	bic.w	r2, r2, #4
 8003cca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd0:	2208      	movs	r2, #8
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d012      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d06:	2201      	movs	r2, #1
 8003d08:	409a      	lsls	r2, r3
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d12:	f043 0202 	orr.w	r2, r3, #2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	2204      	movs	r2, #4
 8003d20:	409a      	lsls	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00b      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	409a      	lsls	r2, r3
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d48:	f043 0204 	orr.w	r2, r3, #4
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d54:	2210      	movs	r2, #16
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d043      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03c      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	2210      	movs	r2, #16
 8003d74:	409a      	lsls	r2, r3
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d108      	bne.n	8003da8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d024      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
 8003da6:	e01f      	b.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01b      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
 8003db8:	e016      	b.n	8003de8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0208 	bic.w	r2, r2, #8
 8003dd6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	2220      	movs	r2, #32
 8003dee:	409a      	lsls	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4013      	ands	r3, r2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 808f 	beq.w	8003f18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8087 	beq.w	8003f18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0e:	2220      	movs	r2, #32
 8003e10:	409a      	lsls	r2, r3
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d136      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0216 	bic.w	r2, r2, #22
 8003e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <HAL_DMA_IRQHandler+0x1da>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d007      	beq.n	8003e62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0208 	bic.w	r2, r2, #8
 8003e60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	223f      	movs	r2, #63	@ 0x3f
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d07e      	beq.n	8003f84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
        }
        return;
 8003e8e:	e079      	b.n	8003f84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10d      	bne.n	8003ec8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d031      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e02c      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
 8003ebe:	bf00      	nop
 8003ec0:	20000228 	.word	0x20000228
 8003ec4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d023      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	4798      	blx	r3
 8003ed8:	e01e      	b.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 0210 	bic.w	r2, r2, #16
 8003ef6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d032      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d022      	beq.n	8003f72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2205      	movs	r2, #5
 8003f30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3301      	adds	r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d307      	bcc.n	8003f60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f2      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x2cc>
 8003f5e:	e000      	b.n	8003f62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	4798      	blx	r3
 8003f82:	e000      	b.n	8003f86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f84:	bf00      	nop
    }
  }
}
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b40      	cmp	r3, #64	@ 0x40
 8003fb8:	d108      	bne.n	8003fcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fca:	e007      	b.n	8003fdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	60da      	str	r2, [r3, #12]
}
 8003fdc:	bf00      	nop
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	3b10      	subs	r3, #16
 8003ff8:	4a14      	ldr	r2, [pc, #80]	@ (800404c <DMA_CalcBaseAndBitshift+0x64>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <DMA_CalcBaseAndBitshift+0x68>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b03      	cmp	r3, #3
 8004014:	d909      	bls.n	800402a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	1d1a      	adds	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	659a      	str	r2, [r3, #88]	@ 0x58
 8004028:	e007      	b.n	800403a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	aaaaaaab 	.word	0xaaaaaaab
 8004050:	0800b850 	.word	0x0800b850

08004054 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004064:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11f      	bne.n	80040ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b03      	cmp	r3, #3
 8004072:	d856      	bhi.n	8004122 <DMA_CheckFifoParam+0xce>
 8004074:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <DMA_CheckFifoParam+0x28>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	0800408d 	.word	0x0800408d
 8004080:	0800409f 	.word	0x0800409f
 8004084:	0800408d 	.word	0x0800408d
 8004088:	08004123 	.word	0x08004123
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004090:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d046      	beq.n	8004126 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800409c:	e043      	b.n	8004126 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040a6:	d140      	bne.n	800412a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ac:	e03d      	b.n	800412a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b6:	d121      	bne.n	80040fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d837      	bhi.n	800412e <DMA_CheckFifoParam+0xda>
 80040be:	a201      	add	r2, pc, #4	@ (adr r2, 80040c4 <DMA_CheckFifoParam+0x70>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040d5 	.word	0x080040d5
 80040c8:	080040db 	.word	0x080040db
 80040cc:	080040d5 	.word	0x080040d5
 80040d0:	080040ed 	.word	0x080040ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e030      	b.n	800413c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d025      	beq.n	8004132 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040ea:	e022      	b.n	8004132 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f4:	d11f      	bne.n	8004136 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040fa:	e01c      	b.n	8004136 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d903      	bls.n	800410a <DMA_CheckFifoParam+0xb6>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d003      	beq.n	8004110 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004108:	e018      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      break;
 800410e:	e015      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00e      	beq.n	800413a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      break;
 8004120:	e00b      	b.n	800413a <DMA_CheckFifoParam+0xe6>
      break;
 8004122:	bf00      	nop
 8004124:	e00a      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e008      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e006      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e004      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
 8004134:	e002      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;   
 8004136:	bf00      	nop
 8004138:	e000      	b.n	800413c <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
    }
  } 
  
  return status; 
 800413c:	7bfb      	ldrb	r3, [r7, #15]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3714      	adds	r7, #20
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop

0800414c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	@ 0x24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e159      	b.n	800441c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004168:	2201      	movs	r2, #1
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	4013      	ands	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	429a      	cmp	r2, r3
 8004182:	f040 8148 	bne.w	8004416 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d005      	beq.n	800419e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800419a:	2b02      	cmp	r3, #2
 800419c:	d130      	bne.n	8004200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	4013      	ands	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 0201 	and.w	r2, r3, #1
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 0303 	and.w	r3, r3, #3
 8004208:	2b03      	cmp	r3, #3
 800420a:	d017      	beq.n	800423c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	2203      	movs	r2, #3
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	43db      	mvns	r3, r3
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	4013      	ands	r3, r2
 8004222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4313      	orrs	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d123      	bne.n	8004290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	220f      	movs	r2, #15
 8004260:	fa02 f303 	lsl.w	r3, r2, r3
 8004264:	43db      	mvns	r3, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4013      	ands	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	691a      	ldr	r2, [r3, #16]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	08da      	lsrs	r2, r3, #3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	3208      	adds	r2, #8
 800428a:	69b9      	ldr	r1, [r7, #24]
 800428c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	2203      	movs	r2, #3
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	43db      	mvns	r3, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4013      	ands	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 0203 	and.w	r2, r3, #3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a2 	beq.w	8004416 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	4b57      	ldr	r3, [pc, #348]	@ (8004434 <HAL_GPIO_Init+0x2e8>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042da:	4a56      	ldr	r2, [pc, #344]	@ (8004434 <HAL_GPIO_Init+0x2e8>)
 80042dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80042e2:	4b54      	ldr	r3, [pc, #336]	@ (8004434 <HAL_GPIO_Init+0x2e8>)
 80042e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ee:	4a52      	ldr	r2, [pc, #328]	@ (8004438 <HAL_GPIO_Init+0x2ec>)
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	3302      	adds	r3, #2
 80042f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	220f      	movs	r2, #15
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4013      	ands	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a49      	ldr	r2, [pc, #292]	@ (800443c <HAL_GPIO_Init+0x2f0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d019      	beq.n	800434e <HAL_GPIO_Init+0x202>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a48      	ldr	r2, [pc, #288]	@ (8004440 <HAL_GPIO_Init+0x2f4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d013      	beq.n	800434a <HAL_GPIO_Init+0x1fe>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a47      	ldr	r2, [pc, #284]	@ (8004444 <HAL_GPIO_Init+0x2f8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00d      	beq.n	8004346 <HAL_GPIO_Init+0x1fa>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a46      	ldr	r2, [pc, #280]	@ (8004448 <HAL_GPIO_Init+0x2fc>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d007      	beq.n	8004342 <HAL_GPIO_Init+0x1f6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a45      	ldr	r2, [pc, #276]	@ (800444c <HAL_GPIO_Init+0x300>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d101      	bne.n	800433e <HAL_GPIO_Init+0x1f2>
 800433a:	2304      	movs	r3, #4
 800433c:	e008      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800433e:	2307      	movs	r3, #7
 8004340:	e006      	b.n	8004350 <HAL_GPIO_Init+0x204>
 8004342:	2303      	movs	r3, #3
 8004344:	e004      	b.n	8004350 <HAL_GPIO_Init+0x204>
 8004346:	2302      	movs	r3, #2
 8004348:	e002      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <HAL_GPIO_Init+0x204>
 800434e:	2300      	movs	r3, #0
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	f002 0203 	and.w	r2, r2, #3
 8004356:	0092      	lsls	r2, r2, #2
 8004358:	4093      	lsls	r3, r2
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004360:	4935      	ldr	r1, [pc, #212]	@ (8004438 <HAL_GPIO_Init+0x2ec>)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	089b      	lsrs	r3, r3, #2
 8004366:	3302      	adds	r3, #2
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436e:	4b38      	ldr	r3, [pc, #224]	@ (8004450 <HAL_GPIO_Init+0x304>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	43db      	mvns	r3, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4013      	ands	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004392:	4a2f      	ldr	r2, [pc, #188]	@ (8004450 <HAL_GPIO_Init+0x304>)
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004398:	4b2d      	ldr	r3, [pc, #180]	@ (8004450 <HAL_GPIO_Init+0x304>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043bc:	4a24      	ldr	r2, [pc, #144]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043c2:	4b23      	ldr	r3, [pc, #140]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043ec:	4b18      	ldr	r3, [pc, #96]	@ (8004450 <HAL_GPIO_Init+0x304>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4013      	ands	r3, r2
 80043fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004410:	4a0f      	ldr	r2, [pc, #60]	@ (8004450 <HAL_GPIO_Init+0x304>)
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	3301      	adds	r3, #1
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b0f      	cmp	r3, #15
 8004420:	f67f aea2 	bls.w	8004168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	3724      	adds	r7, #36	@ 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	40013800 	.word	0x40013800
 800443c:	40020000 	.word	0x40020000
 8004440:	40020400 	.word	0x40020400
 8004444:	40020800 	.word	0x40020800
 8004448:	40020c00 	.word	0x40020c00
 800444c:	40021000 	.word	0x40021000
 8004450:	40013c00 	.word	0x40013c00

08004454 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	887b      	ldrh	r3, [r7, #2]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800446c:	2301      	movs	r3, #1
 800446e:	73fb      	strb	r3, [r7, #15]
 8004470:	e001      	b.n	8004476 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004476:	7bfb      	ldrb	r3, [r7, #15]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
 8004490:	4613      	mov	r3, r2
 8004492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004494:	787b      	ldrb	r3, [r7, #1]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a0:	e003      	b.n	80044aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	041a      	lsls	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	619a      	str	r2, [r3, #24]
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b086      	sub	sp, #24
 80044ba:	af02      	add	r7, sp, #8
 80044bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e101      	b.n	80046cc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f006 fe34 	bl	800b150 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2203      	movs	r2, #3
 80044ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044f6:	d102      	bne.n	80044fe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f003 fa15 	bl	8007932 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	7c1a      	ldrb	r2, [r3, #16]
 8004510:	f88d 2000 	strb.w	r2, [sp]
 8004514:	3304      	adds	r3, #4
 8004516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004518:	f003 f8f4 	bl	8007704 <USB_CoreInit>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d005      	beq.n	800452e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2202      	movs	r2, #2
 8004526:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0ce      	b.n	80046cc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f003 fa0d 	bl	8007954 <USB_SetCurrentMode>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0bf      	b.n	80046cc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
 8004550:	e04a      	b.n	80045e8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004552:	7bfa      	ldrb	r2, [r7, #15]
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3315      	adds	r3, #21
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4413      	add	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	3314      	adds	r3, #20
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	b298      	uxth	r0, r3
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	332e      	adds	r3, #46	@ 0x2e
 800458e:	4602      	mov	r2, r0
 8004590:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004592:	7bfa      	ldrb	r2, [r7, #15]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	00db      	lsls	r3, r3, #3
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	3318      	adds	r3, #24
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	331c      	adds	r3, #28
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045ba:	7bfa      	ldrb	r2, [r7, #15]
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3320      	adds	r3, #32
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3324      	adds	r3, #36	@ 0x24
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	3301      	adds	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3af      	bcc.n	8004552 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	e044      	b.n	8004682 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045f8:	7bfa      	ldrb	r2, [r7, #15]
 80045fa:	6879      	ldr	r1, [r7, #4]
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	00db      	lsls	r3, r3, #3
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004650:	7bfa      	ldrb	r2, [r7, #15]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4413      	add	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	3301      	adds	r3, #1
 8004680:	73fb      	strb	r3, [r7, #15]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	791b      	ldrb	r3, [r3, #4]
 8004686:	7bfa      	ldrb	r2, [r7, #15]
 8004688:	429a      	cmp	r2, r3
 800468a:	d3b5      	bcc.n	80045f8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	7c1a      	ldrb	r2, [r3, #16]
 8004694:	f88d 2000 	strb.w	r2, [sp]
 8004698:	3304      	adds	r3, #4
 800469a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469c:	f003 f9a6 	bl	80079ec <USB_DevInit>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e00c      	b.n	80046cc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f004 f9f0 	bl	8008aaa <USB_DevDisconnect>

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d101      	bne.n	80046f0 <HAL_PCD_Start+0x1c>
 80046ec:	2302      	movs	r3, #2
 80046ee:	e022      	b.n	8004736 <HAL_PCD_Start+0x62>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004708:	2b01      	cmp	r3, #1
 800470a:	d105      	bne.n	8004718 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f003 f8f7 	bl	8007910 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f004 f99e 	bl	8008a68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800473e:	b590      	push	{r4, r7, lr}
 8004740:	b08d      	sub	sp, #52	@ 0x34
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f004 fa5c 	bl	8008c12 <USB_GetMode>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	f040 848c 	bne.w	800507a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f004 f9c0 	bl	8008aec <USB_ReadInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8482 	beq.w	8005078 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	0a1b      	lsrs	r3, r3, #8
 800477e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4618      	mov	r0, r3
 800478e:	f004 f9ad 	bl	8008aec <USB_ReadInterrupts>
 8004792:	4603      	mov	r3, r0
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b02      	cmp	r3, #2
 800479a:	d107      	bne.n	80047ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f002 0202 	and.w	r2, r2, #2
 80047aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f004 f99b 	bl	8008aec <USB_ReadInterrupts>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b10      	cmp	r3, #16
 80047be:	d161      	bne.n	8004884 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0210 	bic.w	r2, r2, #16
 80047ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f003 020f 	and.w	r2, r3, #15
 80047dc:	4613      	mov	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	4413      	add	r3, r2
 80047ec:	3304      	adds	r3, #4
 80047ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	0c5b      	lsrs	r3, r3, #17
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d124      	bne.n	8004846 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d035      	beq.n	8004874 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	091b      	lsrs	r3, r3, #4
 8004810:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004816:	b29b      	uxth	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	6a38      	ldr	r0, [r7, #32]
 800481c:	f003 ffd2 	bl	80087c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	091b      	lsrs	r3, r3, #4
 8004828:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800482c:	441a      	add	r2, r3
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800483e:	441a      	add	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	615a      	str	r2, [r3, #20]
 8004844:	e016      	b.n	8004874 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	0c5b      	lsrs	r3, r3, #17
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	2b06      	cmp	r3, #6
 8004850:	d110      	bne.n	8004874 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004858:	2208      	movs	r2, #8
 800485a:	4619      	mov	r1, r3
 800485c:	6a38      	ldr	r0, [r7, #32]
 800485e:	f003 ffb1 	bl	80087c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800486e:	441a      	add	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0210 	orr.w	r2, r2, #16
 8004882:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f004 f92f 	bl	8008aec <USB_ReadInterrupts>
 800488e:	4603      	mov	r3, r0
 8004890:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004894:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004898:	f040 80a7 	bne.w	80049ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f004 f934 	bl	8008b12 <USB_ReadDevAllOutEpInterrupt>
 80048aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80048ac:	e099      	b.n	80049e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 808e 	beq.w	80049d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c0:	b2d2      	uxtb	r2, r2
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f004 f958 	bl	8008b7a <USB_ReadDevOutEPInterrupt>
 80048ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00c      	beq.n	80048f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e2:	461a      	mov	r2, r3
 80048e4:	2301      	movs	r3, #1
 80048e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fea4 	bl	8005638 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004906:	461a      	mov	r2, r3
 8004908:	2308      	movs	r3, #8
 800490a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800490c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 ff7a 	bl	8005808 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	2b00      	cmp	r3, #0
 800491c:	d008      	beq.n	8004930 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800492a:	461a      	mov	r2, r3
 800492c:	2310      	movs	r3, #16
 800492e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d030      	beq.n	800499c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004942:	2b80      	cmp	r3, #128	@ 0x80
 8004944:	d109      	bne.n	800495a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004954:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004958:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800495a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495c:	4613      	mov	r3, r2
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4413      	add	r3, r2
 800496c:	3304      	adds	r3, #4
 800496e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	78db      	ldrb	r3, [r3, #3]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d108      	bne.n	800498a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2200      	movs	r2, #0
 800497c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	b2db      	uxtb	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f006 fcdf 	bl	800b348 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004996:	461a      	mov	r2, r3
 8004998:	2302      	movs	r3, #2
 800499a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d008      	beq.n	80049b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b2:	461a      	mov	r2, r3
 80049b4:	2320      	movs	r3, #32
 80049b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d009      	beq.n	80049d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ce:	461a      	mov	r2, r3
 80049d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	3301      	adds	r3, #1
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80049dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80049e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af62 	bne.w	80048ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f004 f87c 	bl	8008aec <USB_ReadInterrupts>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049fe:	f040 80db 	bne.w	8004bb8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f004 f89d 	bl	8008b46 <USB_ReadDevAllInEpInterrupt>
 8004a0c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004a12:	e0cd      	b.n	8004bb0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 80c2 	beq.w	8004ba4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	4611      	mov	r1, r2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f004 f8c3 	bl	8008bb6 <USB_ReadDevInEPInterrupt>
 8004a30:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d057      	beq.n	8004aec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	2201      	movs	r2, #1
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	43db      	mvns	r3, r3
 8004a56:	69f9      	ldr	r1, [r7, #28]
 8004a58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2301      	movs	r3, #1
 8004a70:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	799b      	ldrb	r3, [r3, #6]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d132      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	3320      	adds	r3, #32
 8004a8a:	6819      	ldr	r1, [r3, #0]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4403      	add	r3, r0
 8004a9a:	331c      	adds	r3, #28
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4419      	add	r1, r3
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4403      	add	r3, r0
 8004aae:	3320      	adds	r3, #32
 8004ab0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d113      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x3a2>
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3324      	adds	r3, #36	@ 0x24
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d108      	bne.n	8004ae0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2101      	movs	r1, #1
 8004adc:	f004 f8ca 	bl	8008c74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f006 fbb3 	bl	800b252 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b02:	461a      	mov	r2, r3
 8004b04:	2308      	movs	r3, #8
 8004b06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f003 0310 	and.w	r3, r3, #16
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d008      	beq.n	8004b24 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2310      	movs	r3, #16
 8004b22:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d008      	beq.n	8004b40 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2340      	movs	r3, #64	@ 0x40
 8004b3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d023      	beq.n	8004b92 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b4c:	6a38      	ldr	r0, [r7, #32]
 8004b4e:	f003 f8b1 	bl	8007cb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	78db      	ldrb	r3, [r3, #3]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d108      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2200      	movs	r2, #0
 8004b72:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f006 fbf6 	bl	800b36c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	2302      	movs	r3, #2
 8004b90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fcbd 	bl	800551e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	085b      	lsrs	r3, r3, #1
 8004bae:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f47f af2e 	bne.w	8004a14 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f003 ff95 	bl	8008aec <USB_ReadInterrupts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bcc:	d122      	bne.n	8004c14 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d108      	bne.n	8004bfe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fea4 	bl	8005944 <HAL_PCDEx_LPM_Callback>
 8004bfc:	e002      	b.n	8004c04 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f006 fb94 	bl	800b32c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f003 ff67 	bl	8008aec <USB_ReadInterrupts>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c28:	d112      	bne.n	8004c50 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0301 	and.w	r3, r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d102      	bne.n	8004c40 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f006 fb50 	bl	800b2e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004c4e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f003 ff49 	bl	8008aec <USB_ReadInterrupts>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004c60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c64:	f040 80b7 	bne.w	8004dd6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c76:	f023 0301 	bic.w	r3, r3, #1
 8004c7a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2110      	movs	r1, #16
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 f816 	bl	8007cb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c8c:	e046      	b.n	8004d1c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004ca0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cbc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cc0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cd4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ce6:	0151      	lsls	r1, r2, #5
 8004ce8:	69fa      	ldr	r2, [r7, #28]
 8004cea:	440a      	add	r2, r1
 8004cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cf0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cf4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d10:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d14:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d18:	3301      	adds	r3, #1
 8004d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	791b      	ldrb	r3, [r3, #4]
 8004d20:	461a      	mov	r2, r3
 8004d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d3b2      	bcc.n	8004c8e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d36:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004d3a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7bdb      	ldrb	r3, [r3, #15]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d54:	f043 030b 	orr.w	r3, r3, #11
 8004d58:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d6a:	f043 030b 	orr.w	r3, r3, #11
 8004d6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d70:	e015      	b.n	8004d9e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d80:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d84:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004d88:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d98:	f043 030b 	orr.w	r3, r3, #11
 8004d9c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dac:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004db0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f003 ff57 	bl	8008c74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695a      	ldr	r2, [r3, #20]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004dd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f003 fe86 	bl	8008aec <USB_ReadInterrupts>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004de6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dea:	d123      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f003 ff1c 	bl	8008c2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 ffd3 	bl	8007da6 <USB_GetDevSpeed>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461a      	mov	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681c      	ldr	r4, [r3, #0]
 8004e0c:	f001 f9ca 	bl	80061a4 <HAL_RCC_GetHCLKFreq>
 8004e10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e16:	461a      	mov	r2, r3
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f002 fcd7 	bl	80077cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f006 fa3f 	bl	800b2a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f003 fe57 	bl	8008aec <USB_ReadInterrupts>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d10a      	bne.n	8004e5e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f006 fa1c 	bl	800b286 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f002 0208 	and.w	r2, r2, #8
 8004e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f003 fe42 	bl	8008aec <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6e:	2b80      	cmp	r3, #128	@ 0x80
 8004e70:	d123      	bne.n	8004eba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e7e:	2301      	movs	r3, #1
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e82:	e014      	b.n	8004eae <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d105      	bne.n	8004ea8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fb0a 	bl	80054bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	3301      	adds	r3, #1
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	791b      	ldrb	r3, [r3, #4]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d3e4      	bcc.n	8004e84 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f003 fe14 	bl	8008aec <USB_ReadInterrupts>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ece:	d13c      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed4:	e02b      	b.n	8004f2e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eea:	4613      	mov	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3318      	adds	r3, #24
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d115      	bne.n	8004f28 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004efc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	da12      	bge.n	8004f28 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f06:	4613      	mov	r3, r2
 8004f08:	00db      	lsls	r3, r3, #3
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3317      	adds	r3, #23
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	4619      	mov	r1, r3
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 faca 	bl	80054bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	791b      	ldrb	r3, [r3, #4]
 8004f32:	461a      	mov	r2, r3
 8004f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d3cd      	bcc.n	8004ed6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f003 fdcc 	bl	8008aec <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f5e:	d156      	bne.n	800500e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f60:	2301      	movs	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f64:	e045      	b.n	8004ff2 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d12e      	bne.n	8004fec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da2b      	bge.n	8004fec <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004fa0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d121      	bne.n	8004fec <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fe4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fe8:	6053      	str	r3, [r2, #4]
            break;
 8004fea:	e008      	b.n	8004ffe <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	791b      	ldrb	r3, [r3, #4]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d3b3      	bcc.n	8004f66 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	695a      	ldr	r2, [r3, #20]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800500c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f003 fd6a 	bl	8008aec <USB_ReadInterrupts>
 8005018:	4603      	mov	r3, r0
 800501a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d10a      	bne.n	800503a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f006 f9b3 	bl	800b390 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695a      	ldr	r2, [r3, #20]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005038:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f003 fd54 	bl	8008aec <USB_ReadInterrupts>
 8005044:	4603      	mov	r3, r0
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b04      	cmp	r3, #4
 800504c:	d115      	bne.n	800507a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	f003 0304 	and.w	r3, r3, #4
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f006 f9a3 	bl	800b3ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6859      	ldr	r1, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
 8005076:	e000      	b.n	800507a <HAL_PCD_IRQHandler+0x93c>
      return;
 8005078:	bf00      	nop
    }
  }
}
 800507a:	3734      	adds	r7, #52	@ 0x34
 800507c:	46bd      	mov	sp, r7
 800507e:	bd90      	pop	{r4, r7, pc}

08005080 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_PCD_SetAddress+0x1a>
 8005096:	2302      	movs	r3, #2
 8005098:	e012      	b.n	80050c0 <HAL_PCD_SetAddress+0x40>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f003 fcb3 	bl	8008a1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	70fb      	strb	r3, [r7, #3]
 80050da:	460b      	mov	r3, r1
 80050dc:	803b      	strh	r3, [r7, #0]
 80050de:	4613      	mov	r3, r2
 80050e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da0f      	bge.n	800510e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	3310      	adds	r3, #16
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	3304      	adds	r3, #4
 8005104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	705a      	strb	r2, [r3, #1]
 800510c:	e00f      	b.n	800512e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	f003 020f 	and.w	r2, r3, #15
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	3304      	adds	r3, #4
 8005126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800513a:	883b      	ldrh	r3, [r7, #0]
 800513c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	78ba      	ldrb	r2, [r7, #2]
 8005148:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	785b      	ldrb	r3, [r3, #1]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800515c:	78bb      	ldrb	r3, [r7, #2]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d102      	bne.n	8005168 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_PCD_EP_Open+0xae>
 8005172:	2302      	movs	r3, #2
 8005174:	e00e      	b.n	8005194 <HAL_PCD_EP_Open+0xcc>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68f9      	ldr	r1, [r7, #12]
 8005184:	4618      	mov	r0, r3
 8005186:	f002 fe33 	bl	8007df0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005192:	7afb      	ldrb	r3, [r7, #11]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	da0f      	bge.n	80051d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 020f 	and.w	r2, r3, #15
 80051b6:	4613      	mov	r3, r2
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	3310      	adds	r3, #16
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	4413      	add	r3, r2
 80051c4:	3304      	adds	r3, #4
 80051c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	705a      	strb	r2, [r3, #1]
 80051ce:	e00f      	b.n	80051f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	f003 020f 	and.w	r2, r3, #15
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_PCD_EP_Close+0x6e>
 8005206:	2302      	movs	r3, #2
 8005208:	e00e      	b.n	8005228 <HAL_PCD_EP_Close+0x8c>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68f9      	ldr	r1, [r7, #12]
 8005218:	4618      	mov	r0, r3
 800521a:	f002 fe71 	bl	8007f00 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	607a      	str	r2, [r7, #4]
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	460b      	mov	r3, r1
 800523e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005240:	7afb      	ldrb	r3, [r7, #11]
 8005242:	f003 020f 	and.w	r2, r3, #15
 8005246:	4613      	mov	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	3304      	adds	r3, #4
 8005258:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2200      	movs	r2, #0
 800526a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005272:	7afb      	ldrb	r3, [r7, #11]
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	b2da      	uxtb	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	799b      	ldrb	r3, [r3, #6]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d102      	bne.n	800528c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	799b      	ldrb	r3, [r3, #6]
 8005294:	461a      	mov	r2, r3
 8005296:	6979      	ldr	r1, [r7, #20]
 8005298:	f002 ff0e 	bl	80080b8 <USB_EPStartXfer>

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	460b      	mov	r3, r1
 80052b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	f003 020f 	and.w	r2, r3, #15
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4413      	add	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80052c8:	681b      	ldr	r3, [r3, #0]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
 80052e2:	460b      	mov	r3, r1
 80052e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	7afb      	ldrb	r3, [r7, #11]
 80052e8:	f003 020f 	and.w	r2, r3, #15
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	3310      	adds	r3, #16
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	3304      	adds	r3, #4
 80052fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2201      	movs	r2, #1
 8005314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005316:	7afb      	ldrb	r3, [r7, #11]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	b2da      	uxtb	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	799b      	ldrb	r3, [r3, #6]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d102      	bne.n	8005330 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	799b      	ldrb	r3, [r3, #6]
 8005338:	461a      	mov	r2, r3
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	f002 febc 	bl	80080b8 <USB_EPStartXfer>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800534a:	b580      	push	{r7, lr}
 800534c:	b084      	sub	sp, #16
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	7912      	ldrb	r2, [r2, #4]
 8005360:	4293      	cmp	r3, r2
 8005362:	d901      	bls.n	8005368 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e04f      	b.n	8005408 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005368:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800536c:	2b00      	cmp	r3, #0
 800536e:	da0f      	bge.n	8005390 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	f003 020f 	and.w	r2, r3, #15
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	3310      	adds	r3, #16
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4413      	add	r3, r2
 8005384:	3304      	adds	r3, #4
 8005386:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2201      	movs	r2, #1
 800538c:	705a      	strb	r2, [r3, #1]
 800538e:	e00d      	b.n	80053ac <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005390:	78fa      	ldrb	r2, [r7, #3]
 8005392:	4613      	mov	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	3304      	adds	r3, #4
 80053a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_PCD_EP_SetStall+0x82>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e01d      	b.n	8005408 <HAL_PCD_EP_SetStall+0xbe>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	4618      	mov	r0, r3
 80053dc:	f003 fa4a 	bl	8008874 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053e0:	78fb      	ldrb	r3, [r7, #3]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d109      	bne.n	80053fe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7999      	ldrb	r1, [r3, #6]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80053f8:	461a      	mov	r2, r3
 80053fa:	f003 fc3b 	bl	8008c74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	7912      	ldrb	r2, [r2, #4]
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e042      	b.n	80054b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800542e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005432:	2b00      	cmp	r3, #0
 8005434:	da0f      	bge.n	8005456 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	f003 020f 	and.w	r2, r3, #15
 800543c:	4613      	mov	r3, r2
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	4413      	add	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	3310      	adds	r3, #16
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	3304      	adds	r3, #4
 800544c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	705a      	strb	r2, [r3, #1]
 8005454:	e00f      	b.n	8005476 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	3304      	adds	r3, #4
 800546e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	b2da      	uxtb	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_PCD_EP_ClrStall+0x86>
 8005492:	2302      	movs	r3, #2
 8005494:	e00e      	b.n	80054b4 <HAL_PCD_EP_ClrStall+0xa4>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 fa53 	bl	8008950 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80054c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da0c      	bge.n	80054ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054d0:	78fb      	ldrb	r3, [r7, #3]
 80054d2:	f003 020f 	and.w	r2, r3, #15
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	3310      	adds	r3, #16
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	4413      	add	r3, r2
 80054e4:	3304      	adds	r3, #4
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	e00c      	b.n	8005504 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	f003 020f 	and.w	r2, r3, #15
 80054f0:	4613      	mov	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4413      	add	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	4413      	add	r3, r2
 8005500:	3304      	adds	r3, #4
 8005502:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68f9      	ldr	r1, [r7, #12]
 800550a:	4618      	mov	r0, r3
 800550c:	f003 f872 	bl	80085f4 <USB_EPStopXfer>
 8005510:	4603      	mov	r3, r0
 8005512:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005514:	7afb      	ldrb	r3, [r7, #11]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b08a      	sub	sp, #40	@ 0x28
 8005522:	af02      	add	r7, sp, #8
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	3310      	adds	r3, #16
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	3304      	adds	r3, #4
 8005544:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d901      	bls.n	8005556 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e06b      	b.n	800562e <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	429a      	cmp	r2, r3
 800556a:	d902      	bls.n	8005572 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	3303      	adds	r3, #3
 8005576:	089b      	lsrs	r3, r3, #2
 8005578:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800557a:	e02a      	b.n	80055d2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	69fa      	ldr	r2, [r7, #28]
 800558e:	429a      	cmp	r2, r3
 8005590:	d902      	bls.n	8005598 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	3303      	adds	r3, #3
 800559c:	089b      	lsrs	r3, r3, #2
 800559e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68d9      	ldr	r1, [r3, #12]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	4603      	mov	r3, r0
 80055b4:	6978      	ldr	r0, [r7, #20]
 80055b6:	f003 f8c7 	bl	8008748 <USB_WritePacket>

    ep->xfer_buff  += len;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	441a      	add	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	695a      	ldr	r2, [r3, #20]
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	441a      	add	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d809      	bhi.n	80055fc <PCD_WriteEmptyTxFifo+0xde>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d203      	bcs.n	80055fc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1bf      	bne.n	800557c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	429a      	cmp	r2, r3
 8005606:	d811      	bhi.n	800562c <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	2201      	movs	r2, #1
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	43db      	mvns	r3, r3
 8005622:	6939      	ldr	r1, [r7, #16]
 8005624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005628:	4013      	ands	r3, r2
 800562a:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
	...

08005638 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	333c      	adds	r3, #60	@ 0x3c
 8005650:	3304      	adds	r3, #4
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	4413      	add	r3, r2
 800565e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	799b      	ldrb	r3, [r3, #6]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d17b      	bne.n	8005766 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	d015      	beq.n	80056a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4a61      	ldr	r2, [pc, #388]	@ (8005800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800567c:	4293      	cmp	r3, r2
 800567e:	f240 80b9 	bls.w	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80b3 	beq.w	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800569a:	461a      	mov	r2, r3
 800569c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056a0:	6093      	str	r3, [r2, #8]
 80056a2:	e0a7      	b.n	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	2320      	movs	r3, #32
 80056be:	6093      	str	r3, [r2, #8]
 80056c0:	e098      	b.n	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f040 8093 	bne.w	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	4a4b      	ldr	r2, [pc, #300]	@ (8005800 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d90f      	bls.n	80056f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ec:	461a      	mov	r2, r3
 80056ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f2:	6093      	str	r3, [r2, #8]
 80056f4:	e07e      	b.n	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4413      	add	r3, r2
 8005708:	3304      	adds	r3, #4
 800570a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	0159      	lsls	r1, r3, #5
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	440b      	add	r3, r1
 8005718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005722:	1ad2      	subs	r2, r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d114      	bne.n	8005758 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005740:	461a      	mov	r2, r3
 8005742:	2101      	movs	r1, #1
 8005744:	f003 fa96 	bl	8008c74 <USB_EP0_OutStart>
 8005748:	e006      	b.n	8005758 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	441a      	add	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f005 fd5c 	bl	800b21c <HAL_PCD_DataOutStageCallback>
 8005764:	e046      	b.n	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	4a26      	ldr	r2, [pc, #152]	@ (8005804 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d124      	bne.n	80057b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005784:	461a      	mov	r2, r3
 8005786:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800578a:	6093      	str	r3, [r2, #8]
 800578c:	e032      	b.n	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a4:	461a      	mov	r2, r3
 80057a6:	2320      	movs	r3, #32
 80057a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f005 fd33 	bl	800b21c <HAL_PCD_DataOutStageCallback>
 80057b6:	e01d      	b.n	80057f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d114      	bne.n	80057e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d108      	bne.n	80057e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6818      	ldr	r0, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057e0:	461a      	mov	r2, r3
 80057e2:	2100      	movs	r1, #0
 80057e4:	f003 fa46 	bl	8008c74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f005 fd14 	bl	800b21c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	4f54300a 	.word	0x4f54300a
 8005804:	4f54310a 	.word	0x4f54310a

08005808 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	333c      	adds	r3, #60	@ 0x3c
 8005820:	3304      	adds	r3, #4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	015a      	lsls	r2, r3, #5
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	4413      	add	r3, r2
 800582e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4a15      	ldr	r2, [pc, #84]	@ (8005890 <PCD_EP_OutSetupPacket_int+0x88>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d90e      	bls.n	800585c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	461a      	mov	r2, r3
 8005856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f005 fccb 	bl	800b1f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4a0a      	ldr	r2, [pc, #40]	@ (8005890 <PCD_EP_OutSetupPacket_int+0x88>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d90c      	bls.n	8005884 <PCD_EP_OutSetupPacket_int+0x7c>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	799b      	ldrb	r3, [r3, #6]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d108      	bne.n	8005884 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800587c:	461a      	mov	r2, r3
 800587e:	2101      	movs	r1, #1
 8005880:	f003 f9f8 	bl	8008c74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	4f54300a 	.word	0x4f54300a

08005894 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
 80058a0:	4613      	mov	r3, r2
 80058a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d107      	bne.n	80058c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058b2:	883b      	ldrh	r3, [r7, #0]
 80058b4:	0419      	lsls	r1, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	430a      	orrs	r2, r1
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28
 80058c0:	e028      	b.n	8005914 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058c8:	0c1b      	lsrs	r3, r3, #16
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	4413      	add	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058d0:	2300      	movs	r3, #0
 80058d2:	73fb      	strb	r3, [r7, #15]
 80058d4:	e00d      	b.n	80058f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	3340      	adds	r3, #64	@ 0x40
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4413      	add	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	3301      	adds	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	7bfa      	ldrb	r2, [r7, #15]
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d3ec      	bcc.n	80058d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80058fc:	883b      	ldrh	r3, [r7, #0]
 80058fe:	0418      	lsls	r0, r3, #16
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6819      	ldr	r1, [r3, #0]
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	3b01      	subs	r3, #1
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	4302      	orrs	r2, r0
 800590c:	3340      	adds	r3, #64	@ 0x40
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	460b      	mov	r3, r1
 800592c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	887a      	ldrh	r2, [r7, #2]
 8005934:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e267      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d075      	beq.n	8005a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800597a:	4b88      	ldr	r3, [pc, #544]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b04      	cmp	r3, #4
 8005984:	d00c      	beq.n	80059a0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005986:	4b85      	ldr	r3, [pc, #532]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800598e:	2b08      	cmp	r3, #8
 8005990:	d112      	bne.n	80059b8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005992:	4b82      	ldr	r3, [pc, #520]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800599a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800599e:	d10b      	bne.n	80059b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a0:	4b7e      	ldr	r3, [pc, #504]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d05b      	beq.n	8005a64 <HAL_RCC_OscConfig+0x108>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d157      	bne.n	8005a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e242      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059c0:	d106      	bne.n	80059d0 <HAL_RCC_OscConfig+0x74>
 80059c2:	4b76      	ldr	r3, [pc, #472]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a75      	ldr	r2, [pc, #468]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e01d      	b.n	8005a0c <HAL_RCC_OscConfig+0xb0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCC_OscConfig+0x98>
 80059da:	4b70      	ldr	r3, [pc, #448]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a6f      	ldr	r2, [pc, #444]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	4b6d      	ldr	r3, [pc, #436]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6c      	ldr	r2, [pc, #432]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e00b      	b.n	8005a0c <HAL_RCC_OscConfig+0xb0>
 80059f4:	4b69      	ldr	r3, [pc, #420]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a68      	ldr	r2, [pc, #416]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	4b66      	ldr	r3, [pc, #408]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a65      	ldr	r2, [pc, #404]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d013      	beq.n	8005a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a14:	f7fd faf0 	bl	8002ff8 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a1c:	f7fd faec 	bl	8002ff8 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b64      	cmp	r3, #100	@ 0x64
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e207      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0xc0>
 8005a3a:	e014      	b.n	8005a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fd fadc 	bl	8002ff8 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a44:	f7fd fad8 	bl	8002ff8 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	@ 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e1f3      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a56:	4b51      	ldr	r3, [pc, #324]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0xe8>
 8005a62:	e000      	b.n	8005a66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d063      	beq.n	8005b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a72:	4b4a      	ldr	r3, [pc, #296]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a7e:	4b47      	ldr	r3, [pc, #284]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d11c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8a:	4b44      	ldr	r3, [pc, #272]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d116      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a96:	4b41      	ldr	r3, [pc, #260]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_RCC_OscConfig+0x152>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d001      	beq.n	8005aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e1c7      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aae:	4b3b      	ldr	r3, [pc, #236]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4937      	ldr	r1, [pc, #220]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac2:	e03a      	b.n	8005b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d020      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005acc:	4b34      	ldr	r3, [pc, #208]	@ (8005ba0 <HAL_RCC_OscConfig+0x244>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad2:	f7fd fa91 	bl	8002ff8 <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ada:	f7fd fa8d 	bl	8002ff8 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e1a8      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aec:	4b2b      	ldr	r3, [pc, #172]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af8:	4b28      	ldr	r3, [pc, #160]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4925      	ldr	r1, [pc, #148]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]
 8005b0c:	e015      	b.n	8005b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b0e:	4b24      	ldr	r3, [pc, #144]	@ (8005ba0 <HAL_RCC_OscConfig+0x244>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fd fa70 	bl	8002ff8 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1c:	f7fd fa6c 	bl	8002ff8 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e187      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d036      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d016      	beq.n	8005b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ba4 <HAL_RCC_OscConfig+0x248>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b54:	f7fd fa50 	bl	8002ff8 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5c:	f7fd fa4c 	bl	8002ff8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e167      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x200>
 8005b7a:	e01b      	b.n	8005bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ba4 <HAL_RCC_OscConfig+0x248>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b82:	f7fd fa39 	bl	8002ff8 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b88:	e00e      	b.n	8005ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b8a:	f7fd fa35 	bl	8002ff8 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d907      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e150      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	42470000 	.word	0x42470000
 8005ba4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba8:	4b88      	ldr	r3, [pc, #544]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005baa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ea      	bne.n	8005b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8097 	beq.w	8005cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc6:	4b81      	ldr	r3, [pc, #516]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bda:	4a7c      	ldr	r2, [pc, #496]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005be2:	4b7a      	ldr	r3, [pc, #488]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf2:	4b77      	ldr	r3, [pc, #476]	@ (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d118      	bne.n	8005c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfe:	4b74      	ldr	r3, [pc, #464]	@ (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a73      	ldr	r2, [pc, #460]	@ (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0a:	f7fd f9f5 	bl	8002ff8 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c12:	f7fd f9f1 	bl	8002ff8 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e10c      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c24:	4b6a      	ldr	r3, [pc, #424]	@ (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f0      	beq.n	8005c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d106      	bne.n	8005c46 <HAL_RCC_OscConfig+0x2ea>
 8005c38:	4b64      	ldr	r3, [pc, #400]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3c:	4a63      	ldr	r2, [pc, #396]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c44:	e01c      	b.n	8005c80 <HAL_RCC_OscConfig+0x324>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d10c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x30c>
 8005c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c52:	4a5e      	ldr	r2, [pc, #376]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c54:	f043 0304 	orr.w	r3, r3, #4
 8005c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c5a:	4b5c      	ldr	r3, [pc, #368]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c66:	e00b      	b.n	8005c80 <HAL_RCC_OscConfig+0x324>
 8005c68:	4b58      	ldr	r3, [pc, #352]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6c:	4a57      	ldr	r2, [pc, #348]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c74:	4b55      	ldr	r3, [pc, #340]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c78:	4a54      	ldr	r2, [pc, #336]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c7a:	f023 0304 	bic.w	r3, r3, #4
 8005c7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d015      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fd f9b6 	bl	8002ff8 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c90:	f7fd f9b2 	bl	8002ff8 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e0cb      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca6:	4b49      	ldr	r3, [pc, #292]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0ee      	beq.n	8005c90 <HAL_RCC_OscConfig+0x334>
 8005cb2:	e014      	b.n	8005cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb4:	f7fd f9a0 	bl	8002ff8 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbc:	f7fd f99c 	bl	8002ff8 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e0b5      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ee      	bne.n	8005cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d105      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce4:	4b39      	ldr	r3, [pc, #228]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce8:	4a38      	ldr	r2, [pc, #224]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005cea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80a1 	beq.w	8005e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cfa:	4b34      	ldr	r3, [pc, #208]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d05c      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d141      	bne.n	8005d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0e:	4b31      	ldr	r3, [pc, #196]	@ (8005dd4 <HAL_RCC_OscConfig+0x478>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fd f970 	bl	8002ff8 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fd f96c 	bl	8002ff8 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e087      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2e:	4b27      	ldr	r3, [pc, #156]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d48:	019b      	lsls	r3, r3, #6
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	3b01      	subs	r3, #1
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5c:	061b      	lsls	r3, r3, #24
 8005d5e:	491b      	ldr	r1, [pc, #108]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d64:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd4 <HAL_RCC_OscConfig+0x478>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6a:	f7fd f945 	bl	8002ff8 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d72:	f7fd f941 	bl	8002ff8 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e05c      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d84:	4b11      	ldr	r3, [pc, #68]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x416>
 8005d90:	e054      	b.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d92:	4b10      	ldr	r3, [pc, #64]	@ (8005dd4 <HAL_RCC_OscConfig+0x478>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fd f92e 	bl	8002ff8 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fd f92a 	bl	8002ff8 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e045      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db2:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x444>
 8005dbe:	e03d      	b.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e038      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	40007000 	.word	0x40007000
 8005dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e48 <HAL_RCC_OscConfig+0x4ec>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d028      	beq.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d121      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d11a      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e08:	4013      	ands	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d111      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	3b01      	subs	r3, #1
 8005e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d107      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800

08005e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0cc      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e60:	4b68      	ldr	r3, [pc, #416]	@ (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d90c      	bls.n	8005e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6e:	4b65      	ldr	r3, [pc, #404]	@ (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e76:	4b63      	ldr	r3, [pc, #396]	@ (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0b8      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d020      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ea0:	4b59      	ldr	r3, [pc, #356]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	4a58      	ldr	r2, [pc, #352]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005eaa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb8:	4b53      	ldr	r3, [pc, #332]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	4a52      	ldr	r2, [pc, #328]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec4:	4b50      	ldr	r3, [pc, #320]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	494d      	ldr	r1, [pc, #308]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d044      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d107      	bne.n	8005efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eea:	4b47      	ldr	r3, [pc, #284]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d119      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e07f      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d003      	beq.n	8005f0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d107      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0a:	4b3f      	ldr	r3, [pc, #252]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e06f      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e067      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f2a:	4b37      	ldr	r3, [pc, #220]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 0203 	bic.w	r2, r3, #3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4934      	ldr	r1, [pc, #208]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f3c:	f7fd f85c 	bl	8002ff8 <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f44:	f7fd f858 	bl	8002ff8 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e04f      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5a:	4b2b      	ldr	r3, [pc, #172]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 020c 	and.w	r2, r3, #12
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d1eb      	bne.n	8005f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b25      	ldr	r3, [pc, #148]	@ (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d20c      	bcs.n	8005f94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b22      	ldr	r3, [pc, #136]	@ (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f82:	4b20      	ldr	r3, [pc, #128]	@ (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e032      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fa0:	4b19      	ldr	r3, [pc, #100]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4916      	ldr	r1, [pc, #88]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fbe:	4b12      	ldr	r3, [pc, #72]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	490e      	ldr	r1, [pc, #56]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fd2:	f000 f821 	bl	8006018 <HAL_RCC_GetSysClockFreq>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	490a      	ldr	r1, [pc, #40]	@ (800600c <HAL_RCC_ClockConfig+0x1c0>)
 8005fe4:	5ccb      	ldrb	r3, [r1, r3]
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	4a09      	ldr	r2, [pc, #36]	@ (8006010 <HAL_RCC_ClockConfig+0x1c4>)
 8005fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005fee:	4b09      	ldr	r3, [pc, #36]	@ (8006014 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fc ffbc 	bl	8002f70 <HAL_InitTick>

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40023c00 	.word	0x40023c00
 8006008:	40023800 	.word	0x40023800
 800600c:	0800b838 	.word	0x0800b838
 8006010:	20000228 	.word	0x20000228
 8006014:	2000022c 	.word	0x2000022c

08006018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800601c:	b090      	sub	sp, #64	@ 0x40
 800601e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006028:	2300      	movs	r3, #0
 800602a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006030:	4b59      	ldr	r3, [pc, #356]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 030c 	and.w	r3, r3, #12
 8006038:	2b08      	cmp	r3, #8
 800603a:	d00d      	beq.n	8006058 <HAL_RCC_GetSysClockFreq+0x40>
 800603c:	2b08      	cmp	r3, #8
 800603e:	f200 80a1 	bhi.w	8006184 <HAL_RCC_GetSysClockFreq+0x16c>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_RCC_GetSysClockFreq+0x34>
 8006046:	2b04      	cmp	r3, #4
 8006048:	d003      	beq.n	8006052 <HAL_RCC_GetSysClockFreq+0x3a>
 800604a:	e09b      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800604c:	4b53      	ldr	r3, [pc, #332]	@ (800619c <HAL_RCC_GetSysClockFreq+0x184>)
 800604e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006050:	e09b      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006052:	4b53      	ldr	r3, [pc, #332]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006054:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006056:	e098      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006058:	4b4f      	ldr	r3, [pc, #316]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006062:	4b4d      	ldr	r3, [pc, #308]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d028      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606e:	4b4a      	ldr	r3, [pc, #296]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	099b      	lsrs	r3, r3, #6
 8006074:	2200      	movs	r2, #0
 8006076:	623b      	str	r3, [r7, #32]
 8006078:	627a      	str	r2, [r7, #36]	@ 0x24
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006080:	2100      	movs	r1, #0
 8006082:	4b47      	ldr	r3, [pc, #284]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006084:	fb03 f201 	mul.w	r2, r3, r1
 8006088:	2300      	movs	r3, #0
 800608a:	fb00 f303 	mul.w	r3, r0, r3
 800608e:	4413      	add	r3, r2
 8006090:	4a43      	ldr	r2, [pc, #268]	@ (80061a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006092:	fba0 1202 	umull	r1, r2, r0, r2
 8006096:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006098:	460a      	mov	r2, r1
 800609a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800609c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800609e:	4413      	add	r3, r2
 80060a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a4:	2200      	movs	r2, #0
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	61fa      	str	r2, [r7, #28]
 80060aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80060b2:	f7fa fcd7 	bl	8000a64 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4613      	mov	r3, r2
 80060bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060be:	e053      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c0:	4b35      	ldr	r3, [pc, #212]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	099b      	lsrs	r3, r3, #6
 80060c6:	2200      	movs	r2, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	617a      	str	r2, [r7, #20]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060d2:	f04f 0b00 	mov.w	fp, #0
 80060d6:	4652      	mov	r2, sl
 80060d8:	465b      	mov	r3, fp
 80060da:	f04f 0000 	mov.w	r0, #0
 80060de:	f04f 0100 	mov.w	r1, #0
 80060e2:	0159      	lsls	r1, r3, #5
 80060e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e8:	0150      	lsls	r0, r2, #5
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	ebb2 080a 	subs.w	r8, r2, sl
 80060f2:	eb63 090b 	sbc.w	r9, r3, fp
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006102:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006106:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800610a:	ebb2 0408 	subs.w	r4, r2, r8
 800610e:	eb63 0509 	sbc.w	r5, r3, r9
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	00eb      	lsls	r3, r5, #3
 800611c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006120:	00e2      	lsls	r2, r4, #3
 8006122:	4614      	mov	r4, r2
 8006124:	461d      	mov	r5, r3
 8006126:	eb14 030a 	adds.w	r3, r4, sl
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	eb45 030b 	adc.w	r3, r5, fp
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800613e:	4629      	mov	r1, r5
 8006140:	028b      	lsls	r3, r1, #10
 8006142:	4621      	mov	r1, r4
 8006144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006148:	4621      	mov	r1, r4
 800614a:	028a      	lsls	r2, r1, #10
 800614c:	4610      	mov	r0, r2
 800614e:	4619      	mov	r1, r3
 8006150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006152:	2200      	movs	r2, #0
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	60fa      	str	r2, [r7, #12]
 8006158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800615c:	f7fa fc82 	bl	8000a64 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4613      	mov	r3, r2
 8006166:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006168:	4b0b      	ldr	r3, [pc, #44]	@ (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	3301      	adds	r3, #1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006178:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006182:	e002      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006184:	4b05      	ldr	r3, [pc, #20]	@ (800619c <HAL_RCC_GetSysClockFreq+0x184>)
 8006186:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800618a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800618c:	4618      	mov	r0, r3
 800618e:	3740      	adds	r7, #64	@ 0x40
 8006190:	46bd      	mov	sp, r7
 8006192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800
 800619c:	00f42400 	.word	0x00f42400
 80061a0:	017d7840 	.word	0x017d7840

080061a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a8:	4b03      	ldr	r3, [pc, #12]	@ (80061b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061aa:	681b      	ldr	r3, [r3, #0]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20000228 	.word	0x20000228

080061bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061c0:	f7ff fff0 	bl	80061a4 <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	0a9b      	lsrs	r3, r3, #10
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4903      	ldr	r1, [pc, #12]	@ (80061e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40023800 	.word	0x40023800
 80061e0:	0800b848 	.word	0x0800b848

080061e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061e8:	f7ff ffdc 	bl	80061a4 <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	0b5b      	lsrs	r3, r3, #13
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4903      	ldr	r1, [pc, #12]	@ (8006208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40023800 	.word	0x40023800
 8006208:	0800b848 	.word	0x0800b848

0800620c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e041      	b.n	80062a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7fc fb10 	bl	8002858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3304      	adds	r3, #4
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f000 fc50 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d001      	beq.n	80062c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e03c      	b.n	800633e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1e      	ldr	r2, [pc, #120]	@ (800634c <HAL_TIM_Base_Start+0xa0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d018      	beq.n	8006308 <HAL_TIM_Base_Start+0x5c>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062de:	d013      	beq.n	8006308 <HAL_TIM_Base_Start+0x5c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006350 <HAL_TIM_Base_Start+0xa4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00e      	beq.n	8006308 <HAL_TIM_Base_Start+0x5c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a19      	ldr	r2, [pc, #100]	@ (8006354 <HAL_TIM_Base_Start+0xa8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d009      	beq.n	8006308 <HAL_TIM_Base_Start+0x5c>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a17      	ldr	r2, [pc, #92]	@ (8006358 <HAL_TIM_Base_Start+0xac>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIM_Base_Start+0x5c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a16      	ldr	r2, [pc, #88]	@ (800635c <HAL_TIM_Base_Start+0xb0>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d111      	bne.n	800632c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b06      	cmp	r3, #6
 8006318:	d010      	beq.n	800633c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0201 	orr.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632a:	e007      	b.n	800633c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40010000 	.word	0x40010000
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40014000 	.word	0x40014000

08006360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e041      	b.n	80063f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f839 	bl	80063fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f000 fba6 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d109      	bne.n	8006438 <HAL_TIM_PWM_Start+0x24>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800642a:	b2db      	uxtb	r3, r3
 800642c:	2b01      	cmp	r3, #1
 800642e:	bf14      	ite	ne
 8006430:	2301      	movne	r3, #1
 8006432:	2300      	moveq	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	e022      	b.n	800647e <HAL_TIM_PWM_Start+0x6a>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b04      	cmp	r3, #4
 800643c:	d109      	bne.n	8006452 <HAL_TIM_PWM_Start+0x3e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b01      	cmp	r3, #1
 8006448:	bf14      	ite	ne
 800644a:	2301      	movne	r3, #1
 800644c:	2300      	moveq	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	e015      	b.n	800647e <HAL_TIM_PWM_Start+0x6a>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b08      	cmp	r3, #8
 8006456:	d109      	bne.n	800646c <HAL_TIM_PWM_Start+0x58>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b01      	cmp	r3, #1
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	e008      	b.n	800647e <HAL_TIM_PWM_Start+0x6a>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b01      	cmp	r3, #1
 8006476:	bf14      	ite	ne
 8006478:	2301      	movne	r3, #1
 800647a:	2300      	moveq	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e068      	b.n	8006558 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <HAL_TIM_PWM_Start+0x82>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006494:	e013      	b.n	80064be <HAL_TIM_PWM_Start+0xaa>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d104      	bne.n	80064a6 <HAL_TIM_PWM_Start+0x92>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064a4:	e00b      	b.n	80064be <HAL_TIM_PWM_Start+0xaa>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d104      	bne.n	80064b6 <HAL_TIM_PWM_Start+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064b4:	e003      	b.n	80064be <HAL_TIM_PWM_Start+0xaa>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2201      	movs	r2, #1
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 fdc4 	bl	8007054 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a23      	ldr	r2, [pc, #140]	@ (8006560 <HAL_TIM_PWM_Start+0x14c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d107      	bne.n	80064e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006560 <HAL_TIM_PWM_Start+0x14c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d018      	beq.n	8006522 <HAL_TIM_PWM_Start+0x10e>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f8:	d013      	beq.n	8006522 <HAL_TIM_PWM_Start+0x10e>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a19      	ldr	r2, [pc, #100]	@ (8006564 <HAL_TIM_PWM_Start+0x150>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d00e      	beq.n	8006522 <HAL_TIM_PWM_Start+0x10e>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a17      	ldr	r2, [pc, #92]	@ (8006568 <HAL_TIM_PWM_Start+0x154>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d009      	beq.n	8006522 <HAL_TIM_PWM_Start+0x10e>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a16      	ldr	r2, [pc, #88]	@ (800656c <HAL_TIM_PWM_Start+0x158>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_TIM_PWM_Start+0x10e>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a14      	ldr	r2, [pc, #80]	@ (8006570 <HAL_TIM_PWM_Start+0x15c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d111      	bne.n	8006546 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0307 	and.w	r3, r3, #7
 800652c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b06      	cmp	r3, #6
 8006532:	d010      	beq.n	8006556 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 0201 	orr.w	r2, r2, #1
 8006542:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006544:	e007      	b.n	8006556 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0201 	orr.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	40010000 	.word	0x40010000
 8006564:	40000400 	.word	0x40000400
 8006568:	40000800 	.word	0x40000800
 800656c:	40000c00 	.word	0x40000c00
 8006570:	40014000 	.word	0x40014000

08006574 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e097      	b.n	80066b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d106      	bne.n	80065a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7fc f9bd 	bl	800291c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	6812      	ldr	r2, [r2, #0]
 80065b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065b8:	f023 0307 	bic.w	r3, r3, #7
 80065bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4619      	mov	r1, r3
 80065c8:	4610      	mov	r0, r2
 80065ca:	f000 fa91 	bl	8006af0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f6:	f023 0303 	bic.w	r3, r3, #3
 80065fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	689a      	ldr	r2, [r3, #8]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	021b      	lsls	r3, r3, #8
 8006606:	4313      	orrs	r3, r2
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006614:	f023 030c 	bic.w	r3, r3, #12
 8006618:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006620:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	021b      	lsls	r3, r3, #8
 8006630:	4313      	orrs	r3, r2
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	031b      	lsls	r3, r3, #12
 8006644:	4313      	orrs	r3, r2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006652:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800665a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4313      	orrs	r3, r2
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	4313      	orrs	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80066e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80066e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d110      	bne.n	8006712 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d102      	bne.n	80066fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f6:	7b7b      	ldrb	r3, [r7, #13]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e069      	b.n	80067d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006710:	e031      	b.n	8006776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b04      	cmp	r3, #4
 8006716:	d110      	bne.n	800673a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d102      	bne.n	8006724 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800671e:	7b3b      	ldrb	r3, [r7, #12]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d001      	beq.n	8006728 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e055      	b.n	80067d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006738:	e01d      	b.n	8006776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d108      	bne.n	8006752 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d105      	bne.n	8006752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	7b7b      	ldrb	r3, [r7, #13]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800674c:	7b3b      	ldrb	r3, [r7, #12]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d001      	beq.n	8006756 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e03e      	b.n	80067d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_TIM_Encoder_Start+0xc4>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b04      	cmp	r3, #4
 8006780:	d008      	beq.n	8006794 <HAL_TIM_Encoder_Start+0xd4>
 8006782:	e00f      	b.n	80067a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fc61 	bl	8007054 <TIM_CCxChannelCmd>
      break;
 8006792:	e016      	b.n	80067c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2201      	movs	r2, #1
 800679a:	2104      	movs	r1, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fc59 	bl	8007054 <TIM_CCxChannelCmd>
      break;
 80067a2:	e00e      	b.n	80067c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2201      	movs	r2, #1
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fc51 	bl	8007054 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	2104      	movs	r1, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 fc4a 	bl	8007054 <TIM_CCxChannelCmd>
      break;
 80067c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0201 	orr.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067f6:	2302      	movs	r3, #2
 80067f8:	e0ae      	b.n	8006958 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b0c      	cmp	r3, #12
 8006806:	f200 809f 	bhi.w	8006948 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800680a:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006845 	.word	0x08006845
 8006814:	08006949 	.word	0x08006949
 8006818:	08006949 	.word	0x08006949
 800681c:	08006949 	.word	0x08006949
 8006820:	08006885 	.word	0x08006885
 8006824:	08006949 	.word	0x08006949
 8006828:	08006949 	.word	0x08006949
 800682c:	08006949 	.word	0x08006949
 8006830:	080068c7 	.word	0x080068c7
 8006834:	08006949 	.word	0x08006949
 8006838:	08006949 	.word	0x08006949
 800683c:	08006949 	.word	0x08006949
 8006840:	08006907 	.word	0x08006907
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	4618      	mov	r0, r3
 800684c:	f000 f9dc 	bl	8006c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699a      	ldr	r2, [r3, #24]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f042 0208 	orr.w	r2, r2, #8
 800685e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0204 	bic.w	r2, r2, #4
 800686e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6999      	ldr	r1, [r3, #24]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	691a      	ldr	r2, [r3, #16]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	619a      	str	r2, [r3, #24]
      break;
 8006882:	e064      	b.n	800694e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68b9      	ldr	r1, [r7, #8]
 800688a:	4618      	mov	r0, r3
 800688c:	f000 fa22 	bl	8006cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800689e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6999      	ldr	r1, [r3, #24]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	021a      	lsls	r2, r3, #8
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	619a      	str	r2, [r3, #24]
      break;
 80068c4:	e043      	b.n	800694e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fa6d 	bl	8006dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69da      	ldr	r2, [r3, #28]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f042 0208 	orr.w	r2, r2, #8
 80068e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0204 	bic.w	r2, r2, #4
 80068f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69d9      	ldr	r1, [r3, #28]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	691a      	ldr	r2, [r3, #16]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	430a      	orrs	r2, r1
 8006902:	61da      	str	r2, [r3, #28]
      break;
 8006904:	e023      	b.n	800694e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68b9      	ldr	r1, [r7, #8]
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fab7 	bl	8006e80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006920:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006930:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69d9      	ldr	r1, [r3, #28]
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	021a      	lsls	r2, r3, #8
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	61da      	str	r2, [r3, #28]
      break;
 8006946:	e002      	b.n	800694e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	75fb      	strb	r3, [r7, #23]
      break;
 800694c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006956:	7dfb      	ldrb	r3, [r7, #23]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3718      	adds	r7, #24
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_TIM_ConfigClockSource+0x1c>
 8006978:	2302      	movs	r3, #2
 800697a:	e0b4      	b.n	8006ae6 <HAL_TIM_ConfigClockSource+0x186>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2202      	movs	r2, #2
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800699a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b4:	d03e      	beq.n	8006a34 <HAL_TIM_ConfigClockSource+0xd4>
 80069b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069ba:	f200 8087 	bhi.w	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c2:	f000 8086 	beq.w	8006ad2 <HAL_TIM_ConfigClockSource+0x172>
 80069c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069ca:	d87f      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069cc:	2b70      	cmp	r3, #112	@ 0x70
 80069ce:	d01a      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0xa6>
 80069d0:	2b70      	cmp	r3, #112	@ 0x70
 80069d2:	d87b      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069d4:	2b60      	cmp	r3, #96	@ 0x60
 80069d6:	d050      	beq.n	8006a7a <HAL_TIM_ConfigClockSource+0x11a>
 80069d8:	2b60      	cmp	r3, #96	@ 0x60
 80069da:	d877      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069dc:	2b50      	cmp	r3, #80	@ 0x50
 80069de:	d03c      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0xfa>
 80069e0:	2b50      	cmp	r3, #80	@ 0x50
 80069e2:	d873      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069e4:	2b40      	cmp	r3, #64	@ 0x40
 80069e6:	d058      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0x13a>
 80069e8:	2b40      	cmp	r3, #64	@ 0x40
 80069ea:	d86f      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069ec:	2b30      	cmp	r3, #48	@ 0x30
 80069ee:	d064      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 80069f0:	2b30      	cmp	r3, #48	@ 0x30
 80069f2:	d86b      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d060      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 80069f8:	2b20      	cmp	r3, #32
 80069fa:	d867      	bhi.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d05c      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d05a      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x15a>
 8006a04:	e062      	b.n	8006acc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a16:	f000 fafd 	bl	8007014 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	609a      	str	r2, [r3, #8]
      break;
 8006a32:	e04f      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a44:	f000 fae6 	bl	8007014 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689a      	ldr	r2, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a56:	609a      	str	r2, [r3, #8]
      break;
 8006a58:	e03c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a66:	461a      	mov	r2, r3
 8006a68:	f000 fa5a 	bl	8006f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2150      	movs	r1, #80	@ 0x50
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 fab3 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 8006a78:	e02c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a86:	461a      	mov	r2, r3
 8006a88:	f000 fa79 	bl	8006f7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2160      	movs	r1, #96	@ 0x60
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 faa3 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 8006a98:	e01c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 fa3a 	bl	8006f20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2140      	movs	r1, #64	@ 0x40
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fa93 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e00c      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	f000 fa8a 	bl	8006fde <TIM_ITRx_SetConfig>
      break;
 8006aca:	e003      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]
      break;
 8006ad0:	e000      	b.n	8006ad4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a3a      	ldr	r2, [pc, #232]	@ (8006bec <TIM_Base_SetConfig+0xfc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d00f      	beq.n	8006b28 <TIM_Base_SetConfig+0x38>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b0e:	d00b      	beq.n	8006b28 <TIM_Base_SetConfig+0x38>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a37      	ldr	r2, [pc, #220]	@ (8006bf0 <TIM_Base_SetConfig+0x100>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d007      	beq.n	8006b28 <TIM_Base_SetConfig+0x38>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a36      	ldr	r2, [pc, #216]	@ (8006bf4 <TIM_Base_SetConfig+0x104>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d003      	beq.n	8006b28 <TIM_Base_SetConfig+0x38>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a35      	ldr	r2, [pc, #212]	@ (8006bf8 <TIM_Base_SetConfig+0x108>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d108      	bne.n	8006b3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8006bec <TIM_Base_SetConfig+0xfc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d01b      	beq.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b48:	d017      	beq.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a28      	ldr	r2, [pc, #160]	@ (8006bf0 <TIM_Base_SetConfig+0x100>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d013      	beq.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a27      	ldr	r2, [pc, #156]	@ (8006bf4 <TIM_Base_SetConfig+0x104>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d00f      	beq.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a26      	ldr	r2, [pc, #152]	@ (8006bf8 <TIM_Base_SetConfig+0x108>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d00b      	beq.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a25      	ldr	r2, [pc, #148]	@ (8006bfc <TIM_Base_SetConfig+0x10c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d007      	beq.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a24      	ldr	r2, [pc, #144]	@ (8006c00 <TIM_Base_SetConfig+0x110>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d003      	beq.n	8006b7a <TIM_Base_SetConfig+0x8a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a23      	ldr	r2, [pc, #140]	@ (8006c04 <TIM_Base_SetConfig+0x114>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d108      	bne.n	8006b8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8006bec <TIM_Base_SetConfig+0xfc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d103      	bne.n	8006bc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f023 0201 	bic.w	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	611a      	str	r2, [r3, #16]
  }
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40000400 	.word	0x40000400
 8006bf4:	40000800 	.word	0x40000800
 8006bf8:	40000c00 	.word	0x40000c00
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800

08006c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a1b      	ldr	r3, [r3, #32]
 8006c1c:	f023 0201 	bic.w	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0303 	bic.w	r3, r3, #3
 8006c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 0302 	bic.w	r3, r3, #2
 8006c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cd0 <TIM_OC1_SetConfig+0xc8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d10c      	bne.n	8006c7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f023 0308 	bic.w	r3, r3, #8
 8006c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f023 0304 	bic.w	r3, r3, #4
 8006c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a13      	ldr	r2, [pc, #76]	@ (8006cd0 <TIM_OC1_SetConfig+0xc8>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d111      	bne.n	8006caa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	697a      	ldr	r2, [r7, #20]
 8006cc2:	621a      	str	r2, [r3, #32]
}
 8006cc4:	bf00      	nop
 8006cc6:	371c      	adds	r7, #28
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	40010000 	.word	0x40010000

08006cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f023 0210 	bic.w	r2, r3, #16
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0320 	bic.w	r3, r3, #32
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	011b      	lsls	r3, r3, #4
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006da8 <TIM_OC2_SetConfig+0xd4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d10d      	bne.n	8006d50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a15      	ldr	r2, [pc, #84]	@ (8006da8 <TIM_OC2_SetConfig+0xd4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d113      	bne.n	8006d80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000

08006dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0303 	bic.w	r3, r3, #3
 8006de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1d      	ldr	r2, [pc, #116]	@ (8006e7c <TIM_OC3_SetConfig+0xd0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d10d      	bne.n	8006e26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	021b      	lsls	r3, r3, #8
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a14      	ldr	r2, [pc, #80]	@ (8006e7c <TIM_OC3_SetConfig+0xd0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d113      	bne.n	8006e56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	011b      	lsls	r3, r3, #4
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	621a      	str	r2, [r3, #32]
}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	40010000 	.word	0x40010000

08006e80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b087      	sub	sp, #28
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	021b      	lsls	r3, r3, #8
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006eca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	031b      	lsls	r3, r3, #12
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a10      	ldr	r2, [pc, #64]	@ (8006f1c <TIM_OC4_SetConfig+0x9c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d109      	bne.n	8006ef4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	695b      	ldr	r3, [r3, #20]
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	693a      	ldr	r2, [r7, #16]
 8006f0c:	621a      	str	r2, [r3, #32]
}
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	40010000 	.word	0x40010000

08006f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f023 0201 	bic.w	r2, r3, #1
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	011b      	lsls	r3, r3, #4
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f023 030a 	bic.w	r3, r3, #10
 8006f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b087      	sub	sp, #28
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6a1b      	ldr	r3, [r3, #32]
 8006f94:	f023 0210 	bic.w	r2, r3, #16
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006fa8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	031b      	lsls	r3, r3, #12
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006fba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b085      	sub	sp, #20
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f043 0307 	orr.w	r3, r3, #7
 8007000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	609a      	str	r2, [r3, #8]
}
 8007008:	bf00      	nop
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800702e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	021a      	lsls	r2, r3, #8
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	431a      	orrs	r2, r3
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4313      	orrs	r3, r2
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	609a      	str	r2, [r3, #8]
}
 8007048:	bf00      	nop
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f003 031f 	and.w	r3, r3, #31
 8007066:	2201      	movs	r2, #1
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1a      	ldr	r2, [r3, #32]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	43db      	mvns	r3, r3
 8007076:	401a      	ands	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6a1a      	ldr	r2, [r3, #32]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	fa01 f303 	lsl.w	r3, r1, r3
 800708c:	431a      	orrs	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	621a      	str	r2, [r3, #32]
}
 8007092:	bf00      	nop
 8007094:	371c      	adds	r7, #28
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr
	...

080070a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e050      	b.n	800715a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1c      	ldr	r2, [pc, #112]	@ (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d018      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007104:	d013      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a18      	ldr	r2, [pc, #96]	@ (800716c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00e      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a16      	ldr	r2, [pc, #88]	@ (8007170 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d009      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a15      	ldr	r2, [pc, #84]	@ (8007174 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d004      	beq.n	800712e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a13      	ldr	r2, [pc, #76]	@ (8007178 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d10c      	bne.n	8007148 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007134:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	4313      	orrs	r3, r2
 800713e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007158:	2300      	movs	r3, #0
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40010000 	.word	0x40010000
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40000c00 	.word	0x40000c00
 8007178:	40014000 	.word	0x40014000

0800717c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e042      	b.n	8007214 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7fb fc72 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2224      	movs	r2, #36	@ 0x24
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f82b 	bl	800721c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	695a      	ldr	r2, [r3, #20]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2220      	movs	r2, #32
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800721c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007220:	b0c0      	sub	sp, #256	@ 0x100
 8007222:	af00      	add	r7, sp, #0
 8007224:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007238:	68d9      	ldr	r1, [r3, #12]
 800723a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	ea40 0301 	orr.w	r3, r0, r1
 8007244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	431a      	orrs	r2, r3
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	431a      	orrs	r2, r3
 800725c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007274:	f021 010c 	bic.w	r1, r1, #12
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007282:	430b      	orrs	r3, r1
 8007284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007296:	6999      	ldr	r1, [r3, #24]
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	ea40 0301 	orr.w	r3, r0, r1
 80072a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b8f      	ldr	r3, [pc, #572]	@ (80074e8 <UART_SetConfig+0x2cc>)
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d005      	beq.n	80072bc <UART_SetConfig+0xa0>
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b8d      	ldr	r3, [pc, #564]	@ (80074ec <UART_SetConfig+0x2d0>)
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d104      	bne.n	80072c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072bc:	f7fe ff92 	bl	80061e4 <HAL_RCC_GetPCLK2Freq>
 80072c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80072c4:	e003      	b.n	80072ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072c6:	f7fe ff79 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 80072ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072d8:	f040 810c 	bne.w	80074f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80072ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80072ee:	4622      	mov	r2, r4
 80072f0:	462b      	mov	r3, r5
 80072f2:	1891      	adds	r1, r2, r2
 80072f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80072f6:	415b      	adcs	r3, r3
 80072f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80072fe:	4621      	mov	r1, r4
 8007300:	eb12 0801 	adds.w	r8, r2, r1
 8007304:	4629      	mov	r1, r5
 8007306:	eb43 0901 	adc.w	r9, r3, r1
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800731a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800731e:	4690      	mov	r8, r2
 8007320:	4699      	mov	r9, r3
 8007322:	4623      	mov	r3, r4
 8007324:	eb18 0303 	adds.w	r3, r8, r3
 8007328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800732c:	462b      	mov	r3, r5
 800732e:	eb49 0303 	adc.w	r3, r9, r3
 8007332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007342:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800734a:	460b      	mov	r3, r1
 800734c:	18db      	adds	r3, r3, r3
 800734e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007350:	4613      	mov	r3, r2
 8007352:	eb42 0303 	adc.w	r3, r2, r3
 8007356:	657b      	str	r3, [r7, #84]	@ 0x54
 8007358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800735c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007360:	f7f9 fb80 	bl	8000a64 <__aeabi_uldivmod>
 8007364:	4602      	mov	r2, r0
 8007366:	460b      	mov	r3, r1
 8007368:	4b61      	ldr	r3, [pc, #388]	@ (80074f0 <UART_SetConfig+0x2d4>)
 800736a:	fba3 2302 	umull	r2, r3, r3, r2
 800736e:	095b      	lsrs	r3, r3, #5
 8007370:	011c      	lsls	r4, r3, #4
 8007372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007376:	2200      	movs	r2, #0
 8007378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800737c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007384:	4642      	mov	r2, r8
 8007386:	464b      	mov	r3, r9
 8007388:	1891      	adds	r1, r2, r2
 800738a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800738c:	415b      	adcs	r3, r3
 800738e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007394:	4641      	mov	r1, r8
 8007396:	eb12 0a01 	adds.w	sl, r2, r1
 800739a:	4649      	mov	r1, r9
 800739c:	eb43 0b01 	adc.w	fp, r3, r1
 80073a0:	f04f 0200 	mov.w	r2, #0
 80073a4:	f04f 0300 	mov.w	r3, #0
 80073a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073b4:	4692      	mov	sl, r2
 80073b6:	469b      	mov	fp, r3
 80073b8:	4643      	mov	r3, r8
 80073ba:	eb1a 0303 	adds.w	r3, sl, r3
 80073be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073c2:	464b      	mov	r3, r9
 80073c4:	eb4b 0303 	adc.w	r3, fp, r3
 80073c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80073d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80073dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80073e0:	460b      	mov	r3, r1
 80073e2:	18db      	adds	r3, r3, r3
 80073e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80073e6:	4613      	mov	r3, r2
 80073e8:	eb42 0303 	adc.w	r3, r2, r3
 80073ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80073f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80073f6:	f7f9 fb35 	bl	8000a64 <__aeabi_uldivmod>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	4b3b      	ldr	r3, [pc, #236]	@ (80074f0 <UART_SetConfig+0x2d4>)
 8007402:	fba3 2301 	umull	r2, r3, r3, r1
 8007406:	095b      	lsrs	r3, r3, #5
 8007408:	2264      	movs	r2, #100	@ 0x64
 800740a:	fb02 f303 	mul.w	r3, r2, r3
 800740e:	1acb      	subs	r3, r1, r3
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007416:	4b36      	ldr	r3, [pc, #216]	@ (80074f0 <UART_SetConfig+0x2d4>)
 8007418:	fba3 2302 	umull	r2, r3, r3, r2
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007424:	441c      	add	r4, r3
 8007426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800742a:	2200      	movs	r2, #0
 800742c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007430:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007438:	4642      	mov	r2, r8
 800743a:	464b      	mov	r3, r9
 800743c:	1891      	adds	r1, r2, r2
 800743e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007440:	415b      	adcs	r3, r3
 8007442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007448:	4641      	mov	r1, r8
 800744a:	1851      	adds	r1, r2, r1
 800744c:	6339      	str	r1, [r7, #48]	@ 0x30
 800744e:	4649      	mov	r1, r9
 8007450:	414b      	adcs	r3, r1
 8007452:	637b      	str	r3, [r7, #52]	@ 0x34
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	f04f 0300 	mov.w	r3, #0
 800745c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007460:	4659      	mov	r1, fp
 8007462:	00cb      	lsls	r3, r1, #3
 8007464:	4651      	mov	r1, sl
 8007466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800746a:	4651      	mov	r1, sl
 800746c:	00ca      	lsls	r2, r1, #3
 800746e:	4610      	mov	r0, r2
 8007470:	4619      	mov	r1, r3
 8007472:	4603      	mov	r3, r0
 8007474:	4642      	mov	r2, r8
 8007476:	189b      	adds	r3, r3, r2
 8007478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800747c:	464b      	mov	r3, r9
 800747e:	460a      	mov	r2, r1
 8007480:	eb42 0303 	adc.w	r3, r2, r3
 8007484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007494:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800749c:	460b      	mov	r3, r1
 800749e:	18db      	adds	r3, r3, r3
 80074a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074a2:	4613      	mov	r3, r2
 80074a4:	eb42 0303 	adc.w	r3, r2, r3
 80074a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80074b2:	f7f9 fad7 	bl	8000a64 <__aeabi_uldivmod>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4b0d      	ldr	r3, [pc, #52]	@ (80074f0 <UART_SetConfig+0x2d4>)
 80074bc:	fba3 1302 	umull	r1, r3, r3, r2
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	2164      	movs	r1, #100	@ 0x64
 80074c4:	fb01 f303 	mul.w	r3, r1, r3
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	3332      	adds	r3, #50	@ 0x32
 80074ce:	4a08      	ldr	r2, [pc, #32]	@ (80074f0 <UART_SetConfig+0x2d4>)
 80074d0:	fba2 2303 	umull	r2, r3, r2, r3
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	f003 0207 	and.w	r2, r3, #7
 80074da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4422      	add	r2, r4
 80074e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074e4:	e106      	b.n	80076f4 <UART_SetConfig+0x4d8>
 80074e6:	bf00      	nop
 80074e8:	40011000 	.word	0x40011000
 80074ec:	40011400 	.word	0x40011400
 80074f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80074fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007506:	4642      	mov	r2, r8
 8007508:	464b      	mov	r3, r9
 800750a:	1891      	adds	r1, r2, r2
 800750c:	6239      	str	r1, [r7, #32]
 800750e:	415b      	adcs	r3, r3
 8007510:	627b      	str	r3, [r7, #36]	@ 0x24
 8007512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007516:	4641      	mov	r1, r8
 8007518:	1854      	adds	r4, r2, r1
 800751a:	4649      	mov	r1, r9
 800751c:	eb43 0501 	adc.w	r5, r3, r1
 8007520:	f04f 0200 	mov.w	r2, #0
 8007524:	f04f 0300 	mov.w	r3, #0
 8007528:	00eb      	lsls	r3, r5, #3
 800752a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800752e:	00e2      	lsls	r2, r4, #3
 8007530:	4614      	mov	r4, r2
 8007532:	461d      	mov	r5, r3
 8007534:	4643      	mov	r3, r8
 8007536:	18e3      	adds	r3, r4, r3
 8007538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800753c:	464b      	mov	r3, r9
 800753e:	eb45 0303 	adc.w	r3, r5, r3
 8007542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007552:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007556:	f04f 0200 	mov.w	r2, #0
 800755a:	f04f 0300 	mov.w	r3, #0
 800755e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007562:	4629      	mov	r1, r5
 8007564:	008b      	lsls	r3, r1, #2
 8007566:	4621      	mov	r1, r4
 8007568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800756c:	4621      	mov	r1, r4
 800756e:	008a      	lsls	r2, r1, #2
 8007570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007574:	f7f9 fa76 	bl	8000a64 <__aeabi_uldivmod>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4b60      	ldr	r3, [pc, #384]	@ (8007700 <UART_SetConfig+0x4e4>)
 800757e:	fba3 2302 	umull	r2, r3, r3, r2
 8007582:	095b      	lsrs	r3, r3, #5
 8007584:	011c      	lsls	r4, r3, #4
 8007586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800758a:	2200      	movs	r2, #0
 800758c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007590:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007598:	4642      	mov	r2, r8
 800759a:	464b      	mov	r3, r9
 800759c:	1891      	adds	r1, r2, r2
 800759e:	61b9      	str	r1, [r7, #24]
 80075a0:	415b      	adcs	r3, r3
 80075a2:	61fb      	str	r3, [r7, #28]
 80075a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075a8:	4641      	mov	r1, r8
 80075aa:	1851      	adds	r1, r2, r1
 80075ac:	6139      	str	r1, [r7, #16]
 80075ae:	4649      	mov	r1, r9
 80075b0:	414b      	adcs	r3, r1
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075c0:	4659      	mov	r1, fp
 80075c2:	00cb      	lsls	r3, r1, #3
 80075c4:	4651      	mov	r1, sl
 80075c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ca:	4651      	mov	r1, sl
 80075cc:	00ca      	lsls	r2, r1, #3
 80075ce:	4610      	mov	r0, r2
 80075d0:	4619      	mov	r1, r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	4642      	mov	r2, r8
 80075d6:	189b      	adds	r3, r3, r2
 80075d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075dc:	464b      	mov	r3, r9
 80075de:	460a      	mov	r2, r1
 80075e0:	eb42 0303 	adc.w	r3, r2, r3
 80075e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007600:	4649      	mov	r1, r9
 8007602:	008b      	lsls	r3, r1, #2
 8007604:	4641      	mov	r1, r8
 8007606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800760a:	4641      	mov	r1, r8
 800760c:	008a      	lsls	r2, r1, #2
 800760e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007612:	f7f9 fa27 	bl	8000a64 <__aeabi_uldivmod>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4611      	mov	r1, r2
 800761c:	4b38      	ldr	r3, [pc, #224]	@ (8007700 <UART_SetConfig+0x4e4>)
 800761e:	fba3 2301 	umull	r2, r3, r3, r1
 8007622:	095b      	lsrs	r3, r3, #5
 8007624:	2264      	movs	r2, #100	@ 0x64
 8007626:	fb02 f303 	mul.w	r3, r2, r3
 800762a:	1acb      	subs	r3, r1, r3
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	3332      	adds	r3, #50	@ 0x32
 8007630:	4a33      	ldr	r2, [pc, #204]	@ (8007700 <UART_SetConfig+0x4e4>)
 8007632:	fba2 2303 	umull	r2, r3, r2, r3
 8007636:	095b      	lsrs	r3, r3, #5
 8007638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800763c:	441c      	add	r4, r3
 800763e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007642:	2200      	movs	r2, #0
 8007644:	673b      	str	r3, [r7, #112]	@ 0x70
 8007646:	677a      	str	r2, [r7, #116]	@ 0x74
 8007648:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800764c:	4642      	mov	r2, r8
 800764e:	464b      	mov	r3, r9
 8007650:	1891      	adds	r1, r2, r2
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	415b      	adcs	r3, r3
 8007656:	60fb      	str	r3, [r7, #12]
 8007658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800765c:	4641      	mov	r1, r8
 800765e:	1851      	adds	r1, r2, r1
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	4649      	mov	r1, r9
 8007664:	414b      	adcs	r3, r1
 8007666:	607b      	str	r3, [r7, #4]
 8007668:	f04f 0200 	mov.w	r2, #0
 800766c:	f04f 0300 	mov.w	r3, #0
 8007670:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007674:	4659      	mov	r1, fp
 8007676:	00cb      	lsls	r3, r1, #3
 8007678:	4651      	mov	r1, sl
 800767a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800767e:	4651      	mov	r1, sl
 8007680:	00ca      	lsls	r2, r1, #3
 8007682:	4610      	mov	r0, r2
 8007684:	4619      	mov	r1, r3
 8007686:	4603      	mov	r3, r0
 8007688:	4642      	mov	r2, r8
 800768a:	189b      	adds	r3, r3, r2
 800768c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800768e:	464b      	mov	r3, r9
 8007690:	460a      	mov	r2, r1
 8007692:	eb42 0303 	adc.w	r3, r2, r3
 8007696:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80076a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80076b0:	4649      	mov	r1, r9
 80076b2:	008b      	lsls	r3, r1, #2
 80076b4:	4641      	mov	r1, r8
 80076b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ba:	4641      	mov	r1, r8
 80076bc:	008a      	lsls	r2, r1, #2
 80076be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80076c2:	f7f9 f9cf 	bl	8000a64 <__aeabi_uldivmod>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <UART_SetConfig+0x4e4>)
 80076cc:	fba3 1302 	umull	r1, r3, r3, r2
 80076d0:	095b      	lsrs	r3, r3, #5
 80076d2:	2164      	movs	r1, #100	@ 0x64
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	3332      	adds	r3, #50	@ 0x32
 80076de:	4a08      	ldr	r2, [pc, #32]	@ (8007700 <UART_SetConfig+0x4e4>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	095b      	lsrs	r3, r3, #5
 80076e6:	f003 020f 	and.w	r2, r3, #15
 80076ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4422      	add	r2, r4
 80076f2:	609a      	str	r2, [r3, #8]
}
 80076f4:	bf00      	nop
 80076f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80076fa:	46bd      	mov	sp, r7
 80076fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007700:	51eb851f 	.word	0x51eb851f

08007704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007704:	b084      	sub	sp, #16
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	f107 001c 	add.w	r0, r7, #28
 8007712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007716:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800771a:	2b01      	cmp	r3, #1
 800771c:	d123      	bne.n	8007766 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007722:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800774a:	2b01      	cmp	r3, #1
 800774c:	d105      	bne.n	800775a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 fae8 	bl	8008d30 <USB_CoreReset>
 8007760:	4603      	mov	r3, r0
 8007762:	73fb      	strb	r3, [r7, #15]
 8007764:	e01b      	b.n	800779e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 fadc 	bl	8008d30 <USB_CoreReset>
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800777c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007790:	e005      	b.n	800779e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800779e:	7fbb      	ldrb	r3, [r7, #30]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d10b      	bne.n	80077bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f043 0206 	orr.w	r2, r3, #6
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077c8:	b004      	add	sp, #16
 80077ca:	4770      	bx	lr

080077cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	4613      	mov	r3, r2
 80077d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d165      	bne.n	80078ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4a41      	ldr	r2, [pc, #260]	@ (80078e8 <USB_SetTurnaroundTime+0x11c>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d906      	bls.n	80077f6 <USB_SetTurnaroundTime+0x2a>
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4a40      	ldr	r2, [pc, #256]	@ (80078ec <USB_SetTurnaroundTime+0x120>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d202      	bcs.n	80077f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80077f0:	230f      	movs	r3, #15
 80077f2:	617b      	str	r3, [r7, #20]
 80077f4:	e062      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	4a3c      	ldr	r2, [pc, #240]	@ (80078ec <USB_SetTurnaroundTime+0x120>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d306      	bcc.n	800780c <USB_SetTurnaroundTime+0x40>
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	4a3b      	ldr	r2, [pc, #236]	@ (80078f0 <USB_SetTurnaroundTime+0x124>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d202      	bcs.n	800780c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007806:	230e      	movs	r3, #14
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	e057      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	4a38      	ldr	r2, [pc, #224]	@ (80078f0 <USB_SetTurnaroundTime+0x124>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d306      	bcc.n	8007822 <USB_SetTurnaroundTime+0x56>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4a37      	ldr	r2, [pc, #220]	@ (80078f4 <USB_SetTurnaroundTime+0x128>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d202      	bcs.n	8007822 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800781c:	230d      	movs	r3, #13
 800781e:	617b      	str	r3, [r7, #20]
 8007820:	e04c      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	4a33      	ldr	r2, [pc, #204]	@ (80078f4 <USB_SetTurnaroundTime+0x128>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d306      	bcc.n	8007838 <USB_SetTurnaroundTime+0x6c>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	4a32      	ldr	r2, [pc, #200]	@ (80078f8 <USB_SetTurnaroundTime+0x12c>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d802      	bhi.n	8007838 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007832:	230c      	movs	r3, #12
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e041      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4a2f      	ldr	r2, [pc, #188]	@ (80078f8 <USB_SetTurnaroundTime+0x12c>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d906      	bls.n	800784e <USB_SetTurnaroundTime+0x82>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4a2e      	ldr	r2, [pc, #184]	@ (80078fc <USB_SetTurnaroundTime+0x130>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d802      	bhi.n	800784e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007848:	230b      	movs	r3, #11
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e036      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	4a2a      	ldr	r2, [pc, #168]	@ (80078fc <USB_SetTurnaroundTime+0x130>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d906      	bls.n	8007864 <USB_SetTurnaroundTime+0x98>
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	4a29      	ldr	r2, [pc, #164]	@ (8007900 <USB_SetTurnaroundTime+0x134>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d802      	bhi.n	8007864 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800785e:	230a      	movs	r3, #10
 8007860:	617b      	str	r3, [r7, #20]
 8007862:	e02b      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4a26      	ldr	r2, [pc, #152]	@ (8007900 <USB_SetTurnaroundTime+0x134>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d906      	bls.n	800787a <USB_SetTurnaroundTime+0xae>
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	4a25      	ldr	r2, [pc, #148]	@ (8007904 <USB_SetTurnaroundTime+0x138>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d202      	bcs.n	800787a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007874:	2309      	movs	r3, #9
 8007876:	617b      	str	r3, [r7, #20]
 8007878:	e020      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	4a21      	ldr	r2, [pc, #132]	@ (8007904 <USB_SetTurnaroundTime+0x138>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d306      	bcc.n	8007890 <USB_SetTurnaroundTime+0xc4>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	4a20      	ldr	r2, [pc, #128]	@ (8007908 <USB_SetTurnaroundTime+0x13c>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d802      	bhi.n	8007890 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800788a:	2308      	movs	r3, #8
 800788c:	617b      	str	r3, [r7, #20]
 800788e:	e015      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4a1d      	ldr	r2, [pc, #116]	@ (8007908 <USB_SetTurnaroundTime+0x13c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d906      	bls.n	80078a6 <USB_SetTurnaroundTime+0xda>
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	4a1c      	ldr	r2, [pc, #112]	@ (800790c <USB_SetTurnaroundTime+0x140>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d202      	bcs.n	80078a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80078a0:	2307      	movs	r3, #7
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e00a      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80078a6:	2306      	movs	r3, #6
 80078a8:	617b      	str	r3, [r7, #20]
 80078aa:	e007      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d102      	bne.n	80078b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80078b2:	2309      	movs	r3, #9
 80078b4:	617b      	str	r3, [r7, #20]
 80078b6:	e001      	b.n	80078bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80078b8:	2309      	movs	r3, #9
 80078ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	029b      	lsls	r3, r3, #10
 80078d0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80078d4:	431a      	orrs	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	371c      	adds	r7, #28
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	00d8acbf 	.word	0x00d8acbf
 80078ec:	00e4e1c0 	.word	0x00e4e1c0
 80078f0:	00f42400 	.word	0x00f42400
 80078f4:	01067380 	.word	0x01067380
 80078f8:	011a499f 	.word	0x011a499f
 80078fc:	01312cff 	.word	0x01312cff
 8007900:	014ca43f 	.word	0x014ca43f
 8007904:	016e3600 	.word	0x016e3600
 8007908:	01a6ab1f 	.word	0x01a6ab1f
 800790c:	01e84800 	.word	0x01e84800

08007910 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f043 0201 	orr.w	r2, r3, #1
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f023 0201 	bic.w	r2, r3, #1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007970:	78fb      	ldrb	r3, [r7, #3]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d115      	bne.n	80079a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007982:	200a      	movs	r0, #10
 8007984:	f7fb fb44 	bl	8003010 <HAL_Delay>
      ms += 10U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	330a      	adds	r3, #10
 800798c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 f93f 	bl	8008c12 <USB_GetMode>
 8007994:	4603      	mov	r3, r0
 8007996:	2b01      	cmp	r3, #1
 8007998:	d01e      	beq.n	80079d8 <USB_SetCurrentMode+0x84>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2bc7      	cmp	r3, #199	@ 0xc7
 800799e:	d9f0      	bls.n	8007982 <USB_SetCurrentMode+0x2e>
 80079a0:	e01a      	b.n	80079d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d115      	bne.n	80079d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079b4:	200a      	movs	r0, #10
 80079b6:	f7fb fb2b 	bl	8003010 <HAL_Delay>
      ms += 10U;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	330a      	adds	r3, #10
 80079be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f926 	bl	8008c12 <USB_GetMode>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <USB_SetCurrentMode+0x84>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2bc7      	cmp	r3, #199	@ 0xc7
 80079d0:	d9f0      	bls.n	80079b4 <USB_SetCurrentMode+0x60>
 80079d2:	e001      	b.n	80079d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e005      	b.n	80079e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2bc8      	cmp	r3, #200	@ 0xc8
 80079dc:	d101      	bne.n	80079e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3710      	adds	r7, #16
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079ec:	b084      	sub	sp, #16
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b086      	sub	sp, #24
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80079fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007a06:	2300      	movs	r3, #0
 8007a08:	613b      	str	r3, [r7, #16]
 8007a0a:	e009      	b.n	8007a20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	3340      	adds	r3, #64	@ 0x40
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	2200      	movs	r2, #0
 8007a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	613b      	str	r3, [r7, #16]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b0e      	cmp	r3, #14
 8007a24:	d9f2      	bls.n	8007a0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007a26:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d11c      	bne.n	8007a68 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a3c:	f043 0302 	orr.w	r3, r3, #2
 8007a40:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a46:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a52:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a66:	e00b      	b.n	8007a80 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a6c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a78:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a86:	461a      	mov	r2, r3
 8007a88:	2300      	movs	r3, #0
 8007a8a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a8c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d10d      	bne.n	8007ab0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d104      	bne.n	8007aa6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f968 	bl	8007d74 <USB_SetDevSpeed>
 8007aa4:	e008      	b.n	8007ab8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f963 	bl	8007d74 <USB_SetDevSpeed>
 8007aae:	e003      	b.n	8007ab8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007ab0:	2103      	movs	r1, #3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f95e 	bl	8007d74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ab8:	2110      	movs	r1, #16
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f8fa 	bl	8007cb4 <USB_FlushTxFifo>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f000 f924 	bl	8007d18 <USB_FlushRxFifo>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aec:	461a      	mov	r2, r3
 8007aee:	2300      	movs	r3, #0
 8007af0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007af8:	461a      	mov	r2, r3
 8007afa:	2300      	movs	r3, #0
 8007afc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007afe:	2300      	movs	r3, #0
 8007b00:	613b      	str	r3, [r7, #16]
 8007b02:	e043      	b.n	8007b8c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	015a      	lsls	r2, r3, #5
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b1a:	d118      	bne.n	8007b4e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10a      	bne.n	8007b38 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	e013      	b.n	8007b60 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b44:	461a      	mov	r2, r3
 8007b46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	e008      	b.n	8007b60 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	015a      	lsls	r2, r3, #5
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	4413      	add	r3, r2
 8007b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b90:	461a      	mov	r2, r3
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d3b5      	bcc.n	8007b04 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b98:	2300      	movs	r3, #0
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	e043      	b.n	8007c26 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007bb4:	d118      	bne.n	8007be8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	015a      	lsls	r2, r3, #5
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	e013      	b.n	8007bfa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bde:	461a      	mov	r2, r3
 8007be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007be4:	6013      	str	r3, [r2, #0]
 8007be6:	e008      	b.n	8007bfa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c06:	461a      	mov	r2, r3
 8007c08:	2300      	movs	r3, #0
 8007c0a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007c1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3301      	adds	r3, #1
 8007c24:	613b      	str	r3, [r7, #16]
 8007c26:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d3b5      	bcc.n	8007b9e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c44:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007c52:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007c54:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d105      	bne.n	8007c68 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f043 0210 	orr.w	r2, r3, #16
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699a      	ldr	r2, [r3, #24]
 8007c6c:	4b10      	ldr	r3, [pc, #64]	@ (8007cb0 <USB_DevInit+0x2c4>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007c74:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	f043 0208 	orr.w	r2, r3, #8
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007c88:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d107      	bne.n	8007ca0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c98:	f043 0304 	orr.w	r3, r3, #4
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007cac:	b004      	add	sp, #16
 8007cae:	4770      	bx	lr
 8007cb0:	803c3800 	.word	0x803c3800

08007cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cce:	d901      	bls.n	8007cd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cd0:	2303      	movs	r3, #3
 8007cd2:	e01b      	b.n	8007d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	daf2      	bge.n	8007cc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	019b      	lsls	r3, r3, #6
 8007ce4:	f043 0220 	orr.w	r2, r3, #32
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cf8:	d901      	bls.n	8007cfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e006      	b.n	8007d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d0f0      	beq.n	8007cec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d30:	d901      	bls.n	8007d36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e018      	b.n	8007d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	daf2      	bge.n	8007d24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2210      	movs	r2, #16
 8007d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d54:	d901      	bls.n	8007d5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e006      	b.n	8007d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0310 	and.w	r3, r3, #16
 8007d62:	2b10      	cmp	r3, #16
 8007d64:	d0f0      	beq.n	8007d48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	78fb      	ldrb	r3, [r7, #3]
 8007d8e:	68f9      	ldr	r1, [r7, #12]
 8007d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d94:	4313      	orrs	r3, r2
 8007d96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 0306 	and.w	r3, r3, #6
 8007dbe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d102      	bne.n	8007dcc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	75fb      	strb	r3, [r7, #23]
 8007dca:	e00a      	b.n	8007de2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d002      	beq.n	8007dd8 <USB_GetDevSpeed+0x32>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b06      	cmp	r3, #6
 8007dd6:	d102      	bne.n	8007dde <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	75fb      	strb	r3, [r7, #23]
 8007ddc:	e001      	b.n	8007de2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007dde:	230f      	movs	r3, #15
 8007de0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	371c      	adds	r7, #28
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d13a      	bne.n	8007e82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e12:	69da      	ldr	r2, [r3, #28]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	68f9      	ldr	r1, [r7, #12]
 8007e26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d155      	bne.n	8007ef0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	791b      	ldrb	r3, [r3, #4]
 8007e5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	059b      	lsls	r3, r3, #22
 8007e66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e036      	b.n	8007ef0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e88:	69da      	ldr	r2, [r3, #28]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	2101      	movs	r1, #1
 8007e94:	fa01 f303 	lsl.w	r3, r1, r3
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	68f9      	ldr	r1, [r7, #12]
 8007e9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d11a      	bne.n	8007ef0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	791b      	ldrb	r3, [r3, #4]
 8007ed4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ee6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
	...

08007f00 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	785b      	ldrb	r3, [r3, #1]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d161      	bne.n	8007fe0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f32:	d11f      	bne.n	8007f74 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007f52:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	0151      	lsls	r1, r2, #5
 8007f66:	68fa      	ldr	r2, [r7, #12]
 8007f68:	440a      	add	r2, r1
 8007f6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	2101      	movs	r1, #1
 8007f86:	fa01 f303 	lsl.w	r3, r1, r3
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	43db      	mvns	r3, r3
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f94:	4013      	ands	r3, r2
 8007f96:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f9e:	69da      	ldr	r2, [r3, #28]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	f003 030f 	and.w	r3, r3, #15
 8007fa8:	2101      	movs	r1, #1
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	68f9      	ldr	r1, [r7, #12]
 8007fb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fb8:	4013      	ands	r3, r2
 8007fba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	0159      	lsls	r1, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	440b      	add	r3, r1
 8007fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4b35      	ldr	r3, [pc, #212]	@ (80080b0 <USB_DeactivateEndpoint+0x1b0>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	600b      	str	r3, [r1, #0]
 8007fde:	e060      	b.n	80080a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ff6:	d11f      	bne.n	8008038 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008012:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008016:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008032:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008036:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800803e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f303 	lsl.w	r3, r1, r3
 800804e:	041b      	lsls	r3, r3, #16
 8008050:	43db      	mvns	r3, r3
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008058:	4013      	ands	r3, r2
 800805a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	041b      	lsls	r3, r3, #16
 8008074:	43db      	mvns	r3, r3
 8008076:	68f9      	ldr	r1, [r7, #12]
 8008078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800807c:	4013      	ands	r3, r2
 800807e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	0159      	lsls	r1, r3, #5
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	440b      	add	r3, r1
 8008096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809a:	4619      	mov	r1, r3
 800809c:	4b05      	ldr	r3, [pc, #20]	@ (80080b4 <USB_DeactivateEndpoint+0x1b4>)
 800809e:	4013      	ands	r3, r2
 80080a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	ec337800 	.word	0xec337800
 80080b4:	eff37800 	.word	0xeff37800

080080b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b08a      	sub	sp, #40	@ 0x28
 80080bc:	af02      	add	r7, sp, #8
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	4613      	mov	r3, r2
 80080c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	785b      	ldrb	r3, [r3, #1]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	f040 817f 	bne.w	80083d8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d132      	bne.n	8008148 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	69ba      	ldr	r2, [r7, #24]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080fc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008100:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008104:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	4413      	add	r3, r2
 800810e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	0151      	lsls	r1, r2, #5
 8008118:	69fa      	ldr	r2, [r7, #28]
 800811a:	440a      	add	r2, r1
 800811c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008120:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008124:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	015a      	lsls	r2, r3, #5
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	4413      	add	r3, r2
 800812e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	440a      	add	r2, r1
 800813c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008140:	0cdb      	lsrs	r3, r3, #19
 8008142:	04db      	lsls	r3, r3, #19
 8008144:	6113      	str	r3, [r2, #16]
 8008146:	e097      	b.n	8008278 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	015a      	lsls	r2, r3, #5
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	4413      	add	r3, r2
 8008150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	0151      	lsls	r1, r2, #5
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	440a      	add	r2, r1
 800815e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008162:	0cdb      	lsrs	r3, r3, #19
 8008164:	04db      	lsls	r3, r3, #19
 8008166:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	69fa      	ldr	r2, [r7, #28]
 800817c:	440a      	add	r2, r1
 800817e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008182:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008186:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800818a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d11a      	bne.n	80081c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	429a      	cmp	r2, r3
 800819c:	d903      	bls.n	80081a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	69fa      	ldr	r2, [r7, #28]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081c4:	6113      	str	r3, [r2, #16]
 80081c6:	e044      	b.n	8008252 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	4413      	add	r3, r2
 80081d2:	1e5a      	subs	r2, r3, #1
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081dc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	8afb      	ldrh	r3, [r7, #22]
 80081ee:	04d9      	lsls	r1, r3, #19
 80081f0:	4ba4      	ldr	r3, [pc, #656]	@ (8008484 <USB_EPStartXfer+0x3cc>)
 80081f2:	400b      	ands	r3, r1
 80081f4:	69b9      	ldr	r1, [r7, #24]
 80081f6:	0148      	lsls	r0, r1, #5
 80081f8:	69f9      	ldr	r1, [r7, #28]
 80081fa:	4401      	add	r1, r0
 80081fc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008200:	4313      	orrs	r3, r2
 8008202:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	791b      	ldrb	r3, [r3, #4]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d122      	bne.n	8008252 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	0151      	lsls	r1, r2, #5
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	440a      	add	r2, r1
 8008222:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008226:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800822a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	8afb      	ldrh	r3, [r7, #22]
 800823c:	075b      	lsls	r3, r3, #29
 800823e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008242:	69b9      	ldr	r1, [r7, #24]
 8008244:	0148      	lsls	r0, r1, #5
 8008246:	69f9      	ldr	r1, [r7, #28]
 8008248:	4401      	add	r1, r0
 800824a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800824e:	4313      	orrs	r3, r2
 8008250:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	691a      	ldr	r2, [r3, #16]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008268:	69b9      	ldr	r1, [r7, #24]
 800826a:	0148      	lsls	r0, r1, #5
 800826c:	69f9      	ldr	r1, [r7, #28]
 800826e:	4401      	add	r1, r0
 8008270:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008274:	4313      	orrs	r3, r2
 8008276:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d14b      	bne.n	8008316 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008292:	461a      	mov	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	69db      	ldr	r3, [r3, #28]
 8008298:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	791b      	ldrb	r3, [r3, #4]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d128      	bne.n	80082f4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d110      	bne.n	80082d4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	015a      	lsls	r2, r3, #5
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	4413      	add	r3, r2
 80082ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	0151      	lsls	r1, r2, #5
 80082c4:	69fa      	ldr	r2, [r7, #28]
 80082c6:	440a      	add	r2, r1
 80082c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	e00f      	b.n	80082f4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	0151      	lsls	r1, r2, #5
 80082e6:	69fa      	ldr	r2, [r7, #28]
 80082e8:	440a      	add	r2, r1
 80082ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082f2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	69ba      	ldr	r2, [r7, #24]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	69fa      	ldr	r2, [r7, #28]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800830e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	e166      	b.n	80085e4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	0151      	lsls	r1, r2, #5
 8008328:	69fa      	ldr	r2, [r7, #28]
 800832a:	440a      	add	r2, r1
 800832c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008330:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008334:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	791b      	ldrb	r3, [r3, #4]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d015      	beq.n	800836a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	f000 814e 	beq.w	80085e4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800834e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	2101      	movs	r1, #1
 800835a:	fa01 f303 	lsl.w	r3, r1, r3
 800835e:	69f9      	ldr	r1, [r7, #28]
 8008360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008364:	4313      	orrs	r3, r2
 8008366:	634b      	str	r3, [r1, #52]	@ 0x34
 8008368:	e13c      	b.n	80085e4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008376:	2b00      	cmp	r3, #0
 8008378:	d110      	bne.n	800839c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	0151      	lsls	r1, r2, #5
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	440a      	add	r2, r1
 8008390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008394:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	e00f      	b.n	80083bc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	0151      	lsls	r1, r2, #5
 80083ae:	69fa      	ldr	r2, [r7, #28]
 80083b0:	440a      	add	r2, r1
 80083b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083ba:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	68d9      	ldr	r1, [r3, #12]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	781a      	ldrb	r2, [r3, #0]
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	b298      	uxth	r0, r3
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	4603      	mov	r3, r0
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 f9b9 	bl	8008748 <USB_WritePacket>
 80083d6:	e105      	b.n	80085e4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80083d8:	69bb      	ldr	r3, [r7, #24]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	0151      	lsls	r1, r2, #5
 80083ea:	69fa      	ldr	r2, [r7, #28]
 80083ec:	440a      	add	r2, r1
 80083ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083f2:	0cdb      	lsrs	r3, r3, #19
 80083f4:	04db      	lsls	r3, r3, #19
 80083f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	440a      	add	r2, r1
 800840e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008412:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008416:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800841a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d132      	bne.n	8008488 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	689a      	ldr	r2, [r3, #8]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008450:	69b9      	ldr	r1, [r7, #24]
 8008452:	0148      	lsls	r0, r1, #5
 8008454:	69f9      	ldr	r1, [r7, #28]
 8008456:	4401      	add	r1, r0
 8008458:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800845c:	4313      	orrs	r3, r2
 800845e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	4413      	add	r3, r2
 8008468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	0151      	lsls	r1, r2, #5
 8008472:	69fa      	ldr	r2, [r7, #28]
 8008474:	440a      	add	r2, r1
 8008476:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800847a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800847e:	6113      	str	r3, [r2, #16]
 8008480:	e062      	b.n	8008548 <USB_EPStartXfer+0x490>
 8008482:	bf00      	nop
 8008484:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d123      	bne.n	80084d8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800849c:	691a      	ldr	r2, [r3, #16]
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084a6:	69b9      	ldr	r1, [r7, #24]
 80084a8:	0148      	lsls	r0, r1, #5
 80084aa:	69f9      	ldr	r1, [r7, #28]
 80084ac:	4401      	add	r1, r0
 80084ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80084b2:	4313      	orrs	r3, r2
 80084b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	69fa      	ldr	r2, [r7, #28]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80084d4:	6113      	str	r3, [r2, #16]
 80084d6:	e037      	b.n	8008548 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	691a      	ldr	r2, [r3, #16]
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	4413      	add	r3, r2
 80084e2:	1e5a      	subs	r2, r3, #1
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ec:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	8afa      	ldrh	r2, [r7, #22]
 80084f4:	fb03 f202 	mul.w	r2, r3, r2
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008508:	691a      	ldr	r2, [r3, #16]
 800850a:	8afb      	ldrh	r3, [r7, #22]
 800850c:	04d9      	lsls	r1, r3, #19
 800850e:	4b38      	ldr	r3, [pc, #224]	@ (80085f0 <USB_EPStartXfer+0x538>)
 8008510:	400b      	ands	r3, r1
 8008512:	69b9      	ldr	r1, [r7, #24]
 8008514:	0148      	lsls	r0, r1, #5
 8008516:	69f9      	ldr	r1, [r7, #28]
 8008518:	4401      	add	r1, r0
 800851a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800851e:	4313      	orrs	r3, r2
 8008520:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	4413      	add	r3, r2
 800852a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008538:	69b9      	ldr	r1, [r7, #24]
 800853a:	0148      	lsls	r0, r1, #5
 800853c:	69f9      	ldr	r1, [r7, #28]
 800853e:	4401      	add	r1, r0
 8008540:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008544:	4313      	orrs	r3, r2
 8008546:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d10d      	bne.n	800856a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d009      	beq.n	800856a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	68d9      	ldr	r1, [r3, #12]
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008566:	460a      	mov	r2, r1
 8008568:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	791b      	ldrb	r3, [r3, #4]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d128      	bne.n	80085c4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d110      	bne.n	80085a4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	440a      	add	r2, r1
 8008598:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800859c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	e00f      	b.n	80085c4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80085c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	015a      	lsls	r2, r3, #5
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	4413      	add	r3, r2
 80085cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	69ba      	ldr	r2, [r7, #24]
 80085d4:	0151      	lsls	r1, r2, #5
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	440a      	add	r2, r1
 80085da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80085e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	1ff80000 	.word	0x1ff80000

080085f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d14a      	bne.n	80086a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800862a:	f040 8086 	bne.w	800873a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	7812      	ldrb	r2, [r2, #0]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800864c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008650:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	440a      	add	r2, r1
 800866c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008670:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008682:	4293      	cmp	r3, r2
 8008684:	d902      	bls.n	800868c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	75fb      	strb	r3, [r7, #23]
          break;
 800868a:	e056      	b.n	800873a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086a4:	d0e7      	beq.n	8008676 <USB_EPStopXfer+0x82>
 80086a6:	e048      	b.n	800873a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086c0:	d13b      	bne.n	800873a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	7812      	ldrb	r2, [r2, #0]
 80086d6:	0151      	lsls	r1, r2, #5
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	440a      	add	r2, r1
 80086dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80086e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	0151      	lsls	r1, r2, #5
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	440a      	add	r2, r1
 8008700:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008708:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3301      	adds	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008716:	4293      	cmp	r3, r2
 8008718:	d902      	bls.n	8008720 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	75fb      	strb	r3, [r7, #23]
          break;
 800871e:	e00c      	b.n	800873a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008738:	d0e7      	beq.n	800870a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800873a:	7dfb      	ldrb	r3, [r7, #23]
}
 800873c:	4618      	mov	r0, r3
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008748:	b480      	push	{r7}
 800874a:	b089      	sub	sp, #36	@ 0x24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4611      	mov	r1, r2
 8008754:	461a      	mov	r2, r3
 8008756:	460b      	mov	r3, r1
 8008758:	71fb      	strb	r3, [r7, #7]
 800875a:	4613      	mov	r3, r2
 800875c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008766:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800876a:	2b00      	cmp	r3, #0
 800876c:	d123      	bne.n	80087b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800876e:	88bb      	ldrh	r3, [r7, #4]
 8008770:	3303      	adds	r3, #3
 8008772:	089b      	lsrs	r3, r3, #2
 8008774:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008776:	2300      	movs	r3, #0
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	e018      	b.n	80087ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	031a      	lsls	r2, r3, #12
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008788:	461a      	mov	r2, r3
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	3301      	adds	r3, #1
 8008794:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3301      	adds	r3, #1
 800879a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	3301      	adds	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	3301      	adds	r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d3e2      	bcc.n	800877c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3724      	adds	r7, #36	@ 0x24
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b08b      	sub	sp, #44	@ 0x2c
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	089b      	lsrs	r3, r3, #2
 80087de:	b29b      	uxth	r3, r3
 80087e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	623b      	str	r3, [r7, #32]
 80087ee:	e014      	b.n	800881a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fe:	3301      	adds	r3, #1
 8008800:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	3301      	adds	r3, #1
 8008806:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880a:	3301      	adds	r3, #1
 800880c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	3301      	adds	r3, #1
 8008812:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	3301      	adds	r3, #1
 8008818:	623b      	str	r3, [r7, #32]
 800881a:	6a3a      	ldr	r2, [r7, #32]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	429a      	cmp	r2, r3
 8008820:	d3e6      	bcc.n	80087f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008822:	8bfb      	ldrh	r3, [r7, #30]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01e      	beq.n	8008866 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008832:	461a      	mov	r2, r3
 8008834:	f107 0310 	add.w	r3, r7, #16
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
 8008848:	b2da      	uxtb	r2, r3
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	701a      	strb	r2, [r3, #0]
      i++;
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	3301      	adds	r3, #1
 8008852:	623b      	str	r3, [r7, #32]
      pDest++;
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	3301      	adds	r3, #1
 8008858:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800885a:	8bfb      	ldrh	r3, [r7, #30]
 800885c:	3b01      	subs	r3, #1
 800885e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008860:	8bfb      	ldrh	r3, [r7, #30]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1ea      	bne.n	800883c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008868:	4618      	mov	r0, r3
 800886a:	372c      	adds	r7, #44	@ 0x2c
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d12c      	bne.n	80088ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	db12      	blt.n	80088c8 <USB_EPSetStall+0x54>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00f      	beq.n	80088c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80088c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	e02b      	b.n	8008942 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	db12      	blt.n	8008922 <USB_EPSetStall+0xae>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	440a      	add	r2, r1
 8008918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800891c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008920:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	440a      	add	r2, r1
 8008938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800893c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008940:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d128      	bne.n	80089be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008986:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800898a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	791b      	ldrb	r3, [r3, #4]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d003      	beq.n	800899c <USB_EPClearStall+0x4c>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	791b      	ldrb	r3, [r3, #4]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d138      	bne.n	8008a0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	e027      	b.n	8008a0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	0151      	lsls	r1, r2, #5
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	440a      	add	r2, r1
 80089d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089d8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80089dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	791b      	ldrb	r3, [r3, #4]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d003      	beq.n	80089ee <USB_EPClearStall+0x9e>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	791b      	ldrb	r3, [r3, #4]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d10f      	bne.n	8008a0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	0151      	lsls	r1, r2, #5
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	440a      	add	r2, r1
 8008a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a3a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008a3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008a50:	68f9      	ldr	r1, [r7, #12]
 8008a52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a56:	4313      	orrs	r3, r2
 8008a58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008a96:	f023 0302 	bic.w	r3, r3, #2
 8008a9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b085      	sub	sp, #20
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008ac4:	f023 0303 	bic.w	r3, r3, #3
 8008ac8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ad8:	f043 0302 	orr.w	r3, r3, #2
 8008adc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	4013      	ands	r3, r2
 8008b02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b04:	68fb      	ldr	r3, [r7, #12]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3714      	adds	r7, #20
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b24:	699b      	ldr	r3, [r3, #24]
 8008b26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	4013      	ands	r3, r2
 8008b34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	0c1b      	lsrs	r3, r3, #16
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b085      	sub	sp, #20
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	4013      	ands	r3, r2
 8008b68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	b29b      	uxth	r3, r3
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b085      	sub	sp, #20
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	460b      	mov	r3, r1
 8008b84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b8a:	78fb      	ldrb	r3, [r7, #3]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b087      	sub	sp, #28
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	fa22 f303 	lsr.w	r3, r2, r3
 8008be6:	01db      	lsls	r3, r3, #7
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4013      	ands	r3, r2
 8008c02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c04:	68bb      	ldr	r3, [r7, #8]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	371c      	adds	r7, #28
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	f003 0301 	and.w	r3, r3, #1
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b085      	sub	sp, #20
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c48:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008c4c:	f023 0307 	bic.w	r3, r3, #7
 8008c50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3714      	adds	r7, #20
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b087      	sub	sp, #28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	607a      	str	r2, [r7, #4]
 8008c80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	333c      	adds	r3, #60	@ 0x3c
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4a26      	ldr	r2, [pc, #152]	@ (8008d2c <USB_EP0_OutStart+0xb8>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d90a      	bls.n	8008cae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ca8:	d101      	bne.n	8008cae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	e037      	b.n	8008d1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ccc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cdc:	f043 0318 	orr.w	r3, r3, #24
 8008ce0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	697a      	ldr	r2, [r7, #20]
 8008cec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008cf0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008cf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008cf6:	7afb      	ldrb	r3, [r7, #11]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d10f      	bne.n	8008d1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d02:	461a      	mov	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d16:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008d1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	4f54300a 	.word	0x4f54300a

08008d30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d48:	d901      	bls.n	8008d4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e01b      	b.n	8008d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	daf2      	bge.n	8008d3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	f043 0201 	orr.w	r2, r3, #1
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008d72:	d901      	bls.n	8008d78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e006      	b.n	8008d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d0f0      	beq.n	8008d66 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
	...

08008d94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008da0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008da4:	f002 fc9a 	bl	800b6dc <USBD_static_malloc>
 8008da8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	32b0      	adds	r2, #176	@ 0xb0
 8008dba:	2100      	movs	r1, #0
 8008dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e0d4      	b.n	8008f6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008dc4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008dc8:	2100      	movs	r1, #0
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f002 fcca 	bl	800b764 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	32b0      	adds	r2, #176	@ 0xb0
 8008dda:	68f9      	ldr	r1, [r7, #12]
 8008ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	32b0      	adds	r2, #176	@ 0xb0
 8008dea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	7c1b      	ldrb	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d138      	bne.n	8008e6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8008f78 <USBD_CDC_Init+0x1e4>)
 8008dfe:	7819      	ldrb	r1, [r3, #0]
 8008e00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e04:	2202      	movs	r2, #2
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f002 fb45 	bl	800b496 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8008f78 <USBD_CDC_Init+0x1e4>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	f003 020f 	and.w	r2, r3, #15
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	440b      	add	r3, r1
 8008e20:	3324      	adds	r3, #36	@ 0x24
 8008e22:	2201      	movs	r2, #1
 8008e24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e26:	4b55      	ldr	r3, [pc, #340]	@ (8008f7c <USBD_CDC_Init+0x1e8>)
 8008e28:	7819      	ldrb	r1, [r3, #0]
 8008e2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e2e:	2202      	movs	r2, #2
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f002 fb30 	bl	800b496 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008e36:	4b51      	ldr	r3, [pc, #324]	@ (8008f7c <USBD_CDC_Init+0x1e8>)
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	f003 020f 	and.w	r2, r3, #15
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008e4e:	2201      	movs	r2, #1
 8008e50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008e52:	4b4b      	ldr	r3, [pc, #300]	@ (8008f80 <USBD_CDC_Init+0x1ec>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	f003 020f 	and.w	r2, r3, #15
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	3326      	adds	r3, #38	@ 0x26
 8008e68:	2210      	movs	r2, #16
 8008e6a:	801a      	strh	r2, [r3, #0]
 8008e6c:	e035      	b.n	8008eda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008e6e:	4b42      	ldr	r3, [pc, #264]	@ (8008f78 <USBD_CDC_Init+0x1e4>)
 8008e70:	7819      	ldrb	r1, [r3, #0]
 8008e72:	2340      	movs	r3, #64	@ 0x40
 8008e74:	2202      	movs	r2, #2
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f002 fb0d 	bl	800b496 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8008f78 <USBD_CDC_Init+0x1e4>)
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	f003 020f 	and.w	r2, r3, #15
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	3324      	adds	r3, #36	@ 0x24
 8008e92:	2201      	movs	r2, #1
 8008e94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008e96:	4b39      	ldr	r3, [pc, #228]	@ (8008f7c <USBD_CDC_Init+0x1e8>)
 8008e98:	7819      	ldrb	r1, [r3, #0]
 8008e9a:	2340      	movs	r3, #64	@ 0x40
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f002 faf9 	bl	800b496 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008ea4:	4b35      	ldr	r3, [pc, #212]	@ (8008f7c <USBD_CDC_Init+0x1e8>)
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	f003 020f 	and.w	r2, r3, #15
 8008eac:	6879      	ldr	r1, [r7, #4]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008ec0:	4b2f      	ldr	r3, [pc, #188]	@ (8008f80 <USBD_CDC_Init+0x1ec>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	f003 020f 	and.w	r2, r3, #15
 8008ec8:	6879      	ldr	r1, [r7, #4]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3326      	adds	r3, #38	@ 0x26
 8008ed6:	2210      	movs	r2, #16
 8008ed8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008eda:	4b29      	ldr	r3, [pc, #164]	@ (8008f80 <USBD_CDC_Init+0x1ec>)
 8008edc:	7819      	ldrb	r1, [r3, #0]
 8008ede:	2308      	movs	r3, #8
 8008ee0:	2203      	movs	r2, #3
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f002 fad7 	bl	800b496 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008ee8:	4b25      	ldr	r3, [pc, #148]	@ (8008f80 <USBD_CDC_Init+0x1ec>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	f003 020f 	and.w	r2, r3, #15
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	440b      	add	r3, r1
 8008efc:	3324      	adds	r3, #36	@ 0x24
 8008efe:	2201      	movs	r2, #1
 8008f00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	33b0      	adds	r3, #176	@ 0xb0
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e018      	b.n	8008f6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7c1b      	ldrb	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10a      	bne.n	8008f5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f44:	4b0d      	ldr	r3, [pc, #52]	@ (8008f7c <USBD_CDC_Init+0x1e8>)
 8008f46:	7819      	ldrb	r1, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f002 fb8e 	bl	800b674 <USBD_LL_PrepareReceive>
 8008f58:	e008      	b.n	8008f6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008f5a:	4b08      	ldr	r3, [pc, #32]	@ (8008f7c <USBD_CDC_Init+0x1e8>)
 8008f5c:	7819      	ldrb	r1, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008f64:	2340      	movs	r3, #64	@ 0x40
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f002 fb84 	bl	800b674 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200002bb 	.word	0x200002bb
 8008f7c:	200002bc 	.word	0x200002bc
 8008f80:	200002bd 	.word	0x200002bd

08008f84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008f90:	4b3a      	ldr	r3, [pc, #232]	@ (800907c <USBD_CDC_DeInit+0xf8>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f002 faa3 	bl	800b4e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008f9c:	4b37      	ldr	r3, [pc, #220]	@ (800907c <USBD_CDC_DeInit+0xf8>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	f003 020f 	and.w	r2, r3, #15
 8008fa4:	6879      	ldr	r1, [r7, #4]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	440b      	add	r3, r1
 8008fb0:	3324      	adds	r3, #36	@ 0x24
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008fb6:	4b32      	ldr	r3, [pc, #200]	@ (8009080 <USBD_CDC_DeInit+0xfc>)
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f002 fa90 	bl	800b4e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8009080 <USBD_CDC_DeInit+0xfc>)
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	f003 020f 	and.w	r2, r3, #15
 8008fca:	6879      	ldr	r1, [r7, #4]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	440b      	add	r3, r1
 8008fd6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fda:	2200      	movs	r2, #0
 8008fdc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008fde:	4b29      	ldr	r3, [pc, #164]	@ (8009084 <USBD_CDC_DeInit+0x100>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f002 fa7c 	bl	800b4e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008fea:	4b26      	ldr	r3, [pc, #152]	@ (8009084 <USBD_CDC_DeInit+0x100>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	f003 020f 	and.w	r2, r3, #15
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	4413      	add	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	3324      	adds	r3, #36	@ 0x24
 8009000:	2200      	movs	r2, #0
 8009002:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009004:	4b1f      	ldr	r3, [pc, #124]	@ (8009084 <USBD_CDC_DeInit+0x100>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	f003 020f 	and.w	r2, r3, #15
 800900c:	6879      	ldr	r1, [r7, #4]
 800900e:	4613      	mov	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	440b      	add	r3, r1
 8009018:	3326      	adds	r3, #38	@ 0x26
 800901a:	2200      	movs	r2, #0
 800901c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	32b0      	adds	r2, #176	@ 0xb0
 8009028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01f      	beq.n	8009070 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	33b0      	adds	r3, #176	@ 0xb0
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	32b0      	adds	r2, #176	@ 0xb0
 800904e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009052:	4618      	mov	r0, r3
 8009054:	f002 fb50 	bl	800b6f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	32b0      	adds	r2, #176	@ 0xb0
 8009062:	2100      	movs	r1, #0
 8009064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	200002bb 	.word	0x200002bb
 8009080:	200002bc 	.word	0x200002bc
 8009084:	200002bd 	.word	0x200002bd

08009088 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	32b0      	adds	r2, #176	@ 0xb0
 800909c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80090a2:	2300      	movs	r3, #0
 80090a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e0bf      	b.n	8009238 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d050      	beq.n	8009166 <USBD_CDC_Setup+0xde>
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	f040 80af 	bne.w	8009228 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	88db      	ldrh	r3, [r3, #6]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d03a      	beq.n	8009148 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	2b00      	cmp	r3, #0
 80090da:	da1b      	bge.n	8009114 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	33b0      	adds	r3, #176	@ 0xb0
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	4413      	add	r3, r2
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80090f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	88d2      	ldrh	r2, [r2, #6]
 80090f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88db      	ldrh	r3, [r3, #6]
 80090fe:	2b07      	cmp	r3, #7
 8009100:	bf28      	it	cs
 8009102:	2307      	movcs	r3, #7
 8009104:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	89fa      	ldrh	r2, [r7, #14]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fd93 	bl	800ac38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009112:	e090      	b.n	8009236 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	785a      	ldrb	r2, [r3, #1]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	88db      	ldrh	r3, [r3, #6]
 8009122:	2b3f      	cmp	r3, #63	@ 0x3f
 8009124:	d803      	bhi.n	800912e <USBD_CDC_Setup+0xa6>
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	88db      	ldrh	r3, [r3, #6]
 800912a:	b2da      	uxtb	r2, r3
 800912c:	e000      	b.n	8009130 <USBD_CDC_Setup+0xa8>
 800912e:	2240      	movs	r2, #64	@ 0x40
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009136:	6939      	ldr	r1, [r7, #16]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800913e:	461a      	mov	r2, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 fda5 	bl	800ac90 <USBD_CtlPrepareRx>
      break;
 8009146:	e076      	b.n	8009236 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	33b0      	adds	r3, #176	@ 0xb0
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	7850      	ldrb	r0, [r2, #1]
 800915e:	2200      	movs	r2, #0
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	4798      	blx	r3
      break;
 8009164:	e067      	b.n	8009236 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	2b0b      	cmp	r3, #11
 800916c:	d851      	bhi.n	8009212 <USBD_CDC_Setup+0x18a>
 800916e:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <USBD_CDC_Setup+0xec>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	080091a5 	.word	0x080091a5
 8009178:	08009221 	.word	0x08009221
 800917c:	08009213 	.word	0x08009213
 8009180:	08009213 	.word	0x08009213
 8009184:	08009213 	.word	0x08009213
 8009188:	08009213 	.word	0x08009213
 800918c:	08009213 	.word	0x08009213
 8009190:	08009213 	.word	0x08009213
 8009194:	08009213 	.word	0x08009213
 8009198:	08009213 	.word	0x08009213
 800919c:	080091cf 	.word	0x080091cf
 80091a0:	080091f9 	.word	0x080091f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b03      	cmp	r3, #3
 80091ae:	d107      	bne.n	80091c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80091b0:	f107 030a 	add.w	r3, r7, #10
 80091b4:	2202      	movs	r2, #2
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 fd3d 	bl	800ac38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091be:	e032      	b.n	8009226 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f001 fcbb 	bl	800ab3e <USBD_CtlError>
            ret = USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	75fb      	strb	r3, [r7, #23]
          break;
 80091cc:	e02b      	b.n	8009226 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d107      	bne.n	80091ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80091da:	f107 030d 	add.w	r3, r7, #13
 80091de:	2201      	movs	r2, #1
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 fd28 	bl	800ac38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091e8:	e01d      	b.n	8009226 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f001 fca6 	bl	800ab3e <USBD_CtlError>
            ret = USBD_FAIL;
 80091f2:	2303      	movs	r3, #3
 80091f4:	75fb      	strb	r3, [r7, #23]
          break;
 80091f6:	e016      	b.n	8009226 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b03      	cmp	r3, #3
 8009202:	d00f      	beq.n	8009224 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fc99 	bl	800ab3e <USBD_CtlError>
            ret = USBD_FAIL;
 800920c:	2303      	movs	r3, #3
 800920e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009210:	e008      	b.n	8009224 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f001 fc92 	bl	800ab3e <USBD_CtlError>
          ret = USBD_FAIL;
 800921a:	2303      	movs	r3, #3
 800921c:	75fb      	strb	r3, [r7, #23]
          break;
 800921e:	e002      	b.n	8009226 <USBD_CDC_Setup+0x19e>
          break;
 8009220:	bf00      	nop
 8009222:	e008      	b.n	8009236 <USBD_CDC_Setup+0x1ae>
          break;
 8009224:	bf00      	nop
      }
      break;
 8009226:	e006      	b.n	8009236 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f001 fc87 	bl	800ab3e <USBD_CtlError>
      ret = USBD_FAIL;
 8009230:	2303      	movs	r3, #3
 8009232:	75fb      	strb	r3, [r7, #23]
      break;
 8009234:	bf00      	nop
  }

  return (uint8_t)ret;
 8009236:	7dfb      	ldrb	r3, [r7, #23]
}
 8009238:	4618      	mov	r0, r3
 800923a:	3718      	adds	r7, #24
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	460b      	mov	r3, r1
 800924a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009252:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	32b0      	adds	r2, #176	@ 0xb0
 800925e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	e065      	b.n	8009336 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	32b0      	adds	r2, #176	@ 0xb0
 8009274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009278:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800927a:	78fb      	ldrb	r3, [r7, #3]
 800927c:	f003 020f 	and.w	r2, r3, #15
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	3318      	adds	r3, #24
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d02f      	beq.n	80092f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	f003 020f 	and.w	r2, r3, #15
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	3318      	adds	r3, #24
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	f003 010f 	and.w	r1, r3, #15
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	460b      	mov	r3, r1
 80092b4:	00db      	lsls	r3, r3, #3
 80092b6:	440b      	add	r3, r1
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4403      	add	r3, r0
 80092bc:	331c      	adds	r3, #28
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d112      	bne.n	80092f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4613      	mov	r3, r2
 80092d8:	009b      	lsls	r3, r3, #2
 80092da:	4413      	add	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	440b      	add	r3, r1
 80092e0:	3318      	adds	r3, #24
 80092e2:	2200      	movs	r2, #0
 80092e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80092e6:	78f9      	ldrb	r1, [r7, #3]
 80092e8:	2300      	movs	r3, #0
 80092ea:	2200      	movs	r2, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f002 f9a0 	bl	800b632 <USBD_LL_Transmit>
 80092f2:	e01f      	b.n	8009334 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	33b0      	adds	r3, #176	@ 0xb0
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d010      	beq.n	8009334 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	33b0      	adds	r3, #176	@ 0xb0
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009330:	78fa      	ldrb	r2, [r7, #3]
 8009332:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	460b      	mov	r3, r1
 8009348:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	32b0      	adds	r2, #176	@ 0xb0
 8009354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009358:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	32b0      	adds	r2, #176	@ 0xb0
 8009364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d101      	bne.n	8009370 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800936c:	2303      	movs	r3, #3
 800936e:	e01a      	b.n	80093a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f002 f99e 	bl	800b6b6 <USBD_LL_GetRxDataSize>
 800937a:	4602      	mov	r2, r0
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	33b0      	adds	r3, #176	@ 0xb0
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68fa      	ldr	r2, [r7, #12]
 8009396:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80093a0:	4611      	mov	r1, r2
 80093a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b084      	sub	sp, #16
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	32b0      	adds	r2, #176	@ 0xb0
 80093c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d101      	bne.n	80093d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e024      	b.n	800941a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	33b0      	adds	r3, #176	@ 0xb0
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d019      	beq.n	8009418 <USBD_CDC_EP0_RxReady+0x6a>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80093ea:	2bff      	cmp	r3, #255	@ 0xff
 80093ec:	d014      	beq.n	8009418 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	33b0      	adds	r3, #176	@ 0xb0
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009406:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800940e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	22ff      	movs	r2, #255	@ 0xff
 8009414:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800942c:	2182      	movs	r1, #130	@ 0x82
 800942e:	4818      	ldr	r0, [pc, #96]	@ (8009490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009430:	f000 fd4f 	bl	8009ed2 <USBD_GetEpDesc>
 8009434:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009436:	2101      	movs	r1, #1
 8009438:	4815      	ldr	r0, [pc, #84]	@ (8009490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800943a:	f000 fd4a 	bl	8009ed2 <USBD_GetEpDesc>
 800943e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009440:	2181      	movs	r1, #129	@ 0x81
 8009442:	4813      	ldr	r0, [pc, #76]	@ (8009490 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009444:	f000 fd45 	bl	8009ed2 <USBD_GetEpDesc>
 8009448:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2210      	movs	r2, #16
 8009454:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d006      	beq.n	800946a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2200      	movs	r2, #0
 8009460:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009464:	711a      	strb	r2, [r3, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2200      	movs	r2, #0
 8009474:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009478:	711a      	strb	r2, [r3, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2243      	movs	r2, #67	@ 0x43
 8009482:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009484:	4b02      	ldr	r3, [pc, #8]	@ (8009490 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009486:	4618      	mov	r0, r3
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20000278 	.word	0x20000278

08009494 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800949c:	2182      	movs	r1, #130	@ 0x82
 800949e:	4818      	ldr	r0, [pc, #96]	@ (8009500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094a0:	f000 fd17 	bl	8009ed2 <USBD_GetEpDesc>
 80094a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80094a6:	2101      	movs	r1, #1
 80094a8:	4815      	ldr	r0, [pc, #84]	@ (8009500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094aa:	f000 fd12 	bl	8009ed2 <USBD_GetEpDesc>
 80094ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80094b0:	2181      	movs	r1, #129	@ 0x81
 80094b2:	4813      	ldr	r0, [pc, #76]	@ (8009500 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80094b4:	f000 fd0d 	bl	8009ed2 <USBD_GetEpDesc>
 80094b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	2210      	movs	r2, #16
 80094c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d006      	beq.n	80094da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2200      	movs	r2, #0
 80094d0:	711a      	strb	r2, [r3, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f042 0202 	orr.w	r2, r2, #2
 80094d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d006      	beq.n	80094ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	711a      	strb	r2, [r3, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f042 0202 	orr.w	r2, r2, #2
 80094ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2243      	movs	r2, #67	@ 0x43
 80094f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80094f4:	4b02      	ldr	r3, [pc, #8]	@ (8009500 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000278 	.word	0x20000278

08009504 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800950c:	2182      	movs	r1, #130	@ 0x82
 800950e:	4818      	ldr	r0, [pc, #96]	@ (8009570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009510:	f000 fcdf 	bl	8009ed2 <USBD_GetEpDesc>
 8009514:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009516:	2101      	movs	r1, #1
 8009518:	4815      	ldr	r0, [pc, #84]	@ (8009570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800951a:	f000 fcda 	bl	8009ed2 <USBD_GetEpDesc>
 800951e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009520:	2181      	movs	r1, #129	@ 0x81
 8009522:	4813      	ldr	r0, [pc, #76]	@ (8009570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009524:	f000 fcd5 	bl	8009ed2 <USBD_GetEpDesc>
 8009528:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	2210      	movs	r2, #16
 8009534:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d006      	beq.n	800954a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	2200      	movs	r2, #0
 8009540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009544:	711a      	strb	r2, [r3, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d006      	beq.n	800955e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009558:	711a      	strb	r2, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2243      	movs	r2, #67	@ 0x43
 8009562:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009564:	4b02      	ldr	r3, [pc, #8]	@ (8009570 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009566:	4618      	mov	r0, r3
 8009568:	3718      	adds	r7, #24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000278 	.word	0x20000278

08009574 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	220a      	movs	r2, #10
 8009580:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009582:	4b03      	ldr	r3, [pc, #12]	@ (8009590 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009584:	4618      	mov	r0, r3
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	20000234 	.word	0x20000234

08009594 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d101      	bne.n	80095a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e009      	b.n	80095bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	33b0      	adds	r3, #176	@ 0xb0
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	4413      	add	r3, r2
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80095ba:	2300      	movs	r3, #0
}
 80095bc:	4618      	mov	r0, r3
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	32b0      	adds	r2, #176	@ 0xb0
 80095de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d101      	bne.n	80095ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e008      	b.n	8009600 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	371c      	adds	r7, #28
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	32b0      	adds	r2, #176	@ 0xb0
 8009620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009624:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800962c:	2303      	movs	r3, #3
 800962e:	e004      	b.n	800963a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
	...

08009648 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	32b0      	adds	r2, #176	@ 0xb0
 800965a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800965e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009660:	2301      	movs	r3, #1
 8009662:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800966a:	2303      	movs	r3, #3
 800966c:	e025      	b.n	80096ba <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009674:	2b00      	cmp	r3, #0
 8009676:	d11f      	bne.n	80096b8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	2201      	movs	r2, #1
 800967c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009680:	4b10      	ldr	r3, [pc, #64]	@ (80096c4 <USBD_CDC_TransmitPacket+0x7c>)
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	f003 020f 	and.w	r2, r3, #15
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	4613      	mov	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4403      	add	r3, r0
 800969a:	3318      	adds	r3, #24
 800969c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800969e:	4b09      	ldr	r3, [pc, #36]	@ (80096c4 <USBD_CDC_TransmitPacket+0x7c>)
 80096a0:	7819      	ldrb	r1, [r3, #0]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 ffbf 	bl	800b632 <USBD_LL_Transmit>

    ret = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3710      	adds	r7, #16
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	200002bb 	.word	0x200002bb

080096c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	32b0      	adds	r2, #176	@ 0xb0
 80096da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	32b0      	adds	r2, #176	@ 0xb0
 80096ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e018      	b.n	8009728 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	7c1b      	ldrb	r3, [r3, #16]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d10a      	bne.n	8009714 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80096fe:	4b0c      	ldr	r3, [pc, #48]	@ (8009730 <USBD_CDC_ReceivePacket+0x68>)
 8009700:	7819      	ldrb	r1, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009708:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f001 ffb1 	bl	800b674 <USBD_LL_PrepareReceive>
 8009712:	e008      	b.n	8009726 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009714:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <USBD_CDC_ReceivePacket+0x68>)
 8009716:	7819      	ldrb	r1, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800971e:	2340      	movs	r3, #64	@ 0x40
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 ffa7 	bl	800b674 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	200002bc 	.word	0x200002bc

08009734 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b086      	sub	sp, #24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009748:	2303      	movs	r3, #3
 800974a:	e01f      	b.n	800978c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	68ba      	ldr	r2, [r7, #8]
 800976e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	79fa      	ldrb	r2, [r7, #7]
 800977e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f001 fe21 	bl	800b3c8 <USBD_LL_Init>
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]

  return ret;
 800978a:	7dfb      	ldrb	r3, [r7, #23]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3718      	adds	r7, #24
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d101      	bne.n	80097ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80097a8:	2303      	movs	r3, #3
 80097aa:	e025      	b.n	80097f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	32ae      	adds	r2, #174	@ 0xae
 80097be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00f      	beq.n	80097e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	32ae      	adds	r2, #174	@ 0xae
 80097d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d8:	f107 020e 	add.w	r2, r7, #14
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	4602      	mov	r2, r0
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80097ee:	1c5a      	adds	r2, r3, #1
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f001 fe29 	bl	800b460 <USBD_LL_Start>
 800980e:	4603      	mov	r3, r0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009820:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d009      	beq.n	800985c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	4611      	mov	r1, r2
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
 8009858:	4603      	mov	r3, r0
 800985a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009866:	b580      	push	{r7, lr}
 8009868:	b084      	sub	sp, #16
 800986a:	af00      	add	r7, sp, #0
 800986c:	6078      	str	r0, [r7, #4]
 800986e:	460b      	mov	r3, r1
 8009870:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	78fa      	ldrb	r2, [r7, #3]
 8009880:	4611      	mov	r1, r2
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	4798      	blx	r3
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	d001      	beq.n	8009890 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009890:	7bfb      	ldrb	r3, [r7, #15]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098aa:	6839      	ldr	r1, [r7, #0]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f001 f90c 	bl	800aaca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80098c0:	461a      	mov	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80098ce:	f003 031f 	and.w	r3, r3, #31
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d01a      	beq.n	800990c <USBD_LL_SetupStage+0x72>
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	d822      	bhi.n	8009920 <USBD_LL_SetupStage+0x86>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d002      	beq.n	80098e4 <USBD_LL_SetupStage+0x4a>
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d00a      	beq.n	80098f8 <USBD_LL_SetupStage+0x5e>
 80098e2:	e01d      	b.n	8009920 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098ea:	4619      	mov	r1, r3
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fb63 	bl	8009fb8 <USBD_StdDevReq>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73fb      	strb	r3, [r7, #15]
      break;
 80098f6:	e020      	b.n	800993a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80098fe:	4619      	mov	r1, r3
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 fbcb 	bl	800a09c <USBD_StdItfReq>
 8009906:	4603      	mov	r3, r0
 8009908:	73fb      	strb	r3, [r7, #15]
      break;
 800990a:	e016      	b.n	800993a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fc2d 	bl	800a174 <USBD_StdEPReq>
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]
      break;
 800991e:	e00c      	b.n	800993a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009926:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800992a:	b2db      	uxtb	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 fdf6 	bl	800b520 <USBD_LL_StallEP>
 8009934:	4603      	mov	r3, r0
 8009936:	73fb      	strb	r3, [r7, #15]
      break;
 8009938:	bf00      	nop
  }

  return ret;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	460b      	mov	r3, r1
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009956:	7afb      	ldrb	r3, [r7, #11]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d16e      	bne.n	8009a3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009962:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800996a:	2b03      	cmp	r3, #3
 800996c:	f040 8098 	bne.w	8009aa0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	689a      	ldr	r2, [r3, #8]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	429a      	cmp	r2, r3
 800997a:	d913      	bls.n	80099a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	689a      	ldr	r2, [r3, #8]
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	1ad2      	subs	r2, r2, r3
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	4293      	cmp	r3, r2
 8009994:	bf28      	it	cs
 8009996:	4613      	movcs	r3, r2
 8009998:	461a      	mov	r2, r3
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f001 f994 	bl	800acca <USBD_CtlContinueRx>
 80099a2:	e07d      	b.n	8009aa0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80099aa:	f003 031f 	and.w	r3, r3, #31
 80099ae:	2b02      	cmp	r3, #2
 80099b0:	d014      	beq.n	80099dc <USBD_LL_DataOutStage+0x98>
 80099b2:	2b02      	cmp	r3, #2
 80099b4:	d81d      	bhi.n	80099f2 <USBD_LL_DataOutStage+0xae>
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d002      	beq.n	80099c0 <USBD_LL_DataOutStage+0x7c>
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d003      	beq.n	80099c6 <USBD_LL_DataOutStage+0x82>
 80099be:	e018      	b.n	80099f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	75bb      	strb	r3, [r7, #22]
            break;
 80099c4:	e018      	b.n	80099f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	4619      	mov	r1, r3
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 fa64 	bl	8009e9e <USBD_CoreFindIF>
 80099d6:	4603      	mov	r3, r0
 80099d8:	75bb      	strb	r3, [r7, #22]
            break;
 80099da:	e00d      	b.n	80099f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	4619      	mov	r1, r3
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f000 fa66 	bl	8009eb8 <USBD_CoreFindEP>
 80099ec:	4603      	mov	r3, r0
 80099ee:	75bb      	strb	r3, [r7, #22]
            break;
 80099f0:	e002      	b.n	80099f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	75bb      	strb	r3, [r7, #22]
            break;
 80099f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80099f8:	7dbb      	ldrb	r3, [r7, #22]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d119      	bne.n	8009a32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d113      	bne.n	8009a32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009a0a:	7dba      	ldrb	r2, [r7, #22]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	32ae      	adds	r2, #174	@ 0xae
 8009a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00b      	beq.n	8009a32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009a1a:	7dba      	ldrb	r2, [r7, #22]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009a22:	7dba      	ldrb	r2, [r7, #22]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	32ae      	adds	r2, #174	@ 0xae
 8009a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009a32:	68f8      	ldr	r0, [r7, #12]
 8009a34:	f001 f95a 	bl	800acec <USBD_CtlSendStatus>
 8009a38:	e032      	b.n	8009aa0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	4619      	mov	r1, r3
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f000 fa37 	bl	8009eb8 <USBD_CoreFindEP>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a4e:	7dbb      	ldrb	r3, [r7, #22]
 8009a50:	2bff      	cmp	r3, #255	@ 0xff
 8009a52:	d025      	beq.n	8009aa0 <USBD_LL_DataOutStage+0x15c>
 8009a54:	7dbb      	ldrb	r3, [r7, #22]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d122      	bne.n	8009aa0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b03      	cmp	r3, #3
 8009a64:	d117      	bne.n	8009a96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009a66:	7dba      	ldrb	r2, [r7, #22]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	32ae      	adds	r2, #174	@ 0xae
 8009a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d00f      	beq.n	8009a96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009a76:	7dba      	ldrb	r2, [r7, #22]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009a7e:	7dba      	ldrb	r2, [r7, #22]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	32ae      	adds	r2, #174	@ 0xae
 8009a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	7afa      	ldrb	r2, [r7, #11]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	68f8      	ldr	r0, [r7, #12]
 8009a90:	4798      	blx	r3
 8009a92:	4603      	mov	r3, r0
 8009a94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009a9c:	7dfb      	ldrb	r3, [r7, #23]
 8009a9e:	e000      	b.n	8009aa2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3718      	adds	r7, #24
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b086      	sub	sp, #24
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	60f8      	str	r0, [r7, #12]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	607a      	str	r2, [r7, #4]
 8009ab6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d16f      	bne.n	8009b9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d15a      	bne.n	8009b84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	689a      	ldr	r2, [r3, #8]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d914      	bls.n	8009b04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	689a      	ldr	r2, [r3, #8]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	1ad2      	subs	r2, r2, r3
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	461a      	mov	r2, r3
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f001 f8bc 	bl	800ac6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009af6:	2300      	movs	r3, #0
 8009af8:	2200      	movs	r2, #0
 8009afa:	2100      	movs	r1, #0
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f001 fdb9 	bl	800b674 <USBD_LL_PrepareReceive>
 8009b02:	e03f      	b.n	8009b84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	68da      	ldr	r2, [r3, #12]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d11c      	bne.n	8009b4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d316      	bcc.n	8009b4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	685a      	ldr	r2, [r3, #4]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d20f      	bcs.n	8009b4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f001 f89d 	bl	800ac6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2100      	movs	r1, #0
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	f001 fd96 	bl	800b674 <USBD_LL_PrepareReceive>
 8009b48:	e01c      	b.n	8009b84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d10f      	bne.n	8009b76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d009      	beq.n	8009b76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b76:	2180      	movs	r1, #128	@ 0x80
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f001 fcd1 	bl	800b520 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f001 f8c7 	bl	800ad12 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d03a      	beq.n	8009c04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7ff fe42 	bl	8009818 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009b9c:	e032      	b.n	8009c04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009b9e:	7afb      	ldrb	r3, [r7, #11]
 8009ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f985 	bl	8009eb8 <USBD_CoreFindEP>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	2bff      	cmp	r3, #255	@ 0xff
 8009bb6:	d025      	beq.n	8009c04 <USBD_LL_DataInStage+0x15a>
 8009bb8:	7dfb      	ldrb	r3, [r7, #23]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d122      	bne.n	8009c04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d11c      	bne.n	8009c04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009bca:	7dfa      	ldrb	r2, [r7, #23]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	32ae      	adds	r2, #174	@ 0xae
 8009bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d014      	beq.n	8009c04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009bda:	7dfa      	ldrb	r2, [r7, #23]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009be2:	7dfa      	ldrb	r2, [r7, #23]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	32ae      	adds	r2, #174	@ 0xae
 8009be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	7afa      	ldrb	r2, [r7, #11]
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	4798      	blx	r3
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009bfa:	7dbb      	ldrb	r3, [r7, #22]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009c00:	7dbb      	ldrb	r3, [r7, #22]
 8009c02:	e000      	b.n	8009c06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d014      	beq.n	8009c74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00e      	beq.n	8009c74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6852      	ldr	r2, [r2, #4]
 8009c62:	b2d2      	uxtb	r2, r2
 8009c64:	4611      	mov	r1, r2
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	4798      	blx	r3
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009c70:	2303      	movs	r3, #3
 8009c72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c74:	2340      	movs	r3, #64	@ 0x40
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fc0b 	bl	800b496 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2240      	movs	r2, #64	@ 0x40
 8009c8c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009c90:	2340      	movs	r3, #64	@ 0x40
 8009c92:	2200      	movs	r2, #0
 8009c94:	2180      	movs	r1, #128	@ 0x80
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f001 fbfd 	bl	800b496 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2240      	movs	r2, #64	@ 0x40
 8009ca6:	621a      	str	r2, [r3, #32]

  return ret;
 8009ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3710      	adds	r7, #16
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	78fa      	ldrb	r2, [r7, #3]
 8009cc2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009cc4:	2300      	movs	r3, #0
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr

08009cd2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ce0:	b2db      	uxtb	r3, r3
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d006      	beq.n	8009cf4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2204      	movs	r2, #4
 8009cf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009cfc:	2300      	movs	r3, #0
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b04      	cmp	r3, #4
 8009d1c:	d106      	bne.n	8009d2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009d24:	b2da      	uxtb	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	2b03      	cmp	r3, #3
 8009d4c:	d110      	bne.n	8009d70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d5e:	69db      	ldr	r3, [r3, #28]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d005      	beq.n	8009d70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d6a:	69db      	ldr	r3, [r3, #28]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	460b      	mov	r3, r1
 8009d84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	32ae      	adds	r2, #174	@ 0xae
 8009d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d101      	bne.n	8009d9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e01c      	b.n	8009dd6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b03      	cmp	r3, #3
 8009da6:	d115      	bne.n	8009dd4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	32ae      	adds	r2, #174	@ 0xae
 8009db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d00b      	beq.n	8009dd4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	32ae      	adds	r2, #174	@ 0xae
 8009dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dca:	6a1b      	ldr	r3, [r3, #32]
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	32ae      	adds	r2, #174	@ 0xae
 8009df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e01c      	b.n	8009e3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b03      	cmp	r3, #3
 8009e0a:	d115      	bne.n	8009e38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	32ae      	adds	r2, #174	@ 0xae
 8009e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00b      	beq.n	8009e38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	32ae      	adds	r2, #174	@ 0xae
 8009e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e30:	78fa      	ldrb	r2, [r7, #3]
 8009e32:	4611      	mov	r1, r2
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00e      	beq.n	8009e94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6852      	ldr	r2, [r2, #4]
 8009e82:	b2d2      	uxtb	r2, r2
 8009e84:	4611      	mov	r1, r2
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	4798      	blx	r3
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d001      	beq.n	8009e94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009e90:	2303      	movs	r3, #3
 8009e92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009eaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009ec4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b086      	sub	sp, #24
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	460b      	mov	r3, r1
 8009edc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	885b      	ldrh	r3, [r3, #2]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	7812      	ldrb	r2, [r2, #0]
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d91f      	bls.n	8009f38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009efe:	e013      	b.n	8009f28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009f00:	f107 030a 	add.w	r3, r7, #10
 8009f04:	4619      	mov	r1, r3
 8009f06:	6978      	ldr	r0, [r7, #20]
 8009f08:	f000 f81b 	bl	8009f42 <USBD_GetNextDesc>
 8009f0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	785b      	ldrb	r3, [r3, #1]
 8009f12:	2b05      	cmp	r3, #5
 8009f14:	d108      	bne.n	8009f28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	789b      	ldrb	r3, [r3, #2]
 8009f1e:	78fa      	ldrb	r2, [r7, #3]
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d008      	beq.n	8009f36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009f24:	2300      	movs	r3, #0
 8009f26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	885b      	ldrh	r3, [r3, #2]
 8009f2c:	b29a      	uxth	r2, r3
 8009f2e:	897b      	ldrh	r3, [r7, #10]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d8e5      	bhi.n	8009f00 <USBD_GetEpDesc+0x2e>
 8009f34:	e000      	b.n	8009f38 <USBD_GetEpDesc+0x66>
          break;
 8009f36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009f38:	693b      	ldr	r3, [r7, #16]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	7812      	ldrb	r2, [r2, #0]
 8009f58:	4413      	add	r3, r2
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	461a      	mov	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4413      	add	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	b087      	sub	sp, #28
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009f98:	8a3b      	ldrh	r3, [r7, #16]
 8009f9a:	021b      	lsls	r3, r3, #8
 8009f9c:	b21a      	sxth	r2, r3
 8009f9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	b21b      	sxth	r3, r3
 8009fa6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009fa8:	89fb      	ldrh	r3, [r7, #14]
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	371c      	adds	r7, #28
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
	...

08009fb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fce:	2b40      	cmp	r3, #64	@ 0x40
 8009fd0:	d005      	beq.n	8009fde <USBD_StdDevReq+0x26>
 8009fd2:	2b40      	cmp	r3, #64	@ 0x40
 8009fd4:	d857      	bhi.n	800a086 <USBD_StdDevReq+0xce>
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00f      	beq.n	8009ffa <USBD_StdDevReq+0x42>
 8009fda:	2b20      	cmp	r3, #32
 8009fdc:	d153      	bne.n	800a086 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	32ae      	adds	r2, #174	@ 0xae
 8009fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	4798      	blx	r3
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff8:	e04a      	b.n	800a090 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	2b09      	cmp	r3, #9
 800a000:	d83b      	bhi.n	800a07a <USBD_StdDevReq+0xc2>
 800a002:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <USBD_StdDevReq+0x50>)
 800a004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a008:	0800a05d 	.word	0x0800a05d
 800a00c:	0800a071 	.word	0x0800a071
 800a010:	0800a07b 	.word	0x0800a07b
 800a014:	0800a067 	.word	0x0800a067
 800a018:	0800a07b 	.word	0x0800a07b
 800a01c:	0800a03b 	.word	0x0800a03b
 800a020:	0800a031 	.word	0x0800a031
 800a024:	0800a07b 	.word	0x0800a07b
 800a028:	0800a053 	.word	0x0800a053
 800a02c:	0800a045 	.word	0x0800a045
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa3c 	bl	800a4b0 <USBD_GetDescriptor>
          break;
 800a038:	e024      	b.n	800a084 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fba1 	bl	800a784 <USBD_SetAddress>
          break;
 800a042:	e01f      	b.n	800a084 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fbe0 	bl	800a80c <USBD_SetConfig>
 800a04c:	4603      	mov	r3, r0
 800a04e:	73fb      	strb	r3, [r7, #15]
          break;
 800a050:	e018      	b.n	800a084 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a052:	6839      	ldr	r1, [r7, #0]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fc83 	bl	800a960 <USBD_GetConfig>
          break;
 800a05a:	e013      	b.n	800a084 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fcb4 	bl	800a9cc <USBD_GetStatus>
          break;
 800a064:	e00e      	b.n	800a084 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fce3 	bl	800aa34 <USBD_SetFeature>
          break;
 800a06e:	e009      	b.n	800a084 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fd07 	bl	800aa86 <USBD_ClrFeature>
          break;
 800a078:	e004      	b.n	800a084 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fd5e 	bl	800ab3e <USBD_CtlError>
          break;
 800a082:	bf00      	nop
      }
      break;
 800a084:	e004      	b.n	800a090 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a086:	6839      	ldr	r1, [r7, #0]
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 fd58 	bl	800ab3e <USBD_CtlError>
      break;
 800a08e:	bf00      	nop
  }

  return ret;
 800a090:	7bfb      	ldrb	r3, [r7, #15]
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop

0800a09c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0b2:	2b40      	cmp	r3, #64	@ 0x40
 800a0b4:	d005      	beq.n	800a0c2 <USBD_StdItfReq+0x26>
 800a0b6:	2b40      	cmp	r3, #64	@ 0x40
 800a0b8:	d852      	bhi.n	800a160 <USBD_StdItfReq+0xc4>
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <USBD_StdItfReq+0x26>
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d14e      	bne.n	800a160 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d840      	bhi.n	800a152 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	889b      	ldrh	r3, [r3, #4]
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d836      	bhi.n	800a148 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	889b      	ldrh	r3, [r3, #4]
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	4619      	mov	r1, r3
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7ff fedb 	bl	8009e9e <USBD_CoreFindIF>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	2bff      	cmp	r3, #255	@ 0xff
 800a0f0:	d01d      	beq.n	800a12e <USBD_StdItfReq+0x92>
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d11a      	bne.n	800a12e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a0f8:	7bba      	ldrb	r2, [r7, #14]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	32ae      	adds	r2, #174	@ 0xae
 800a0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00f      	beq.n	800a128 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a108:	7bba      	ldrb	r2, [r7, #14]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a110:	7bba      	ldrb	r2, [r7, #14]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	32ae      	adds	r2, #174	@ 0xae
 800a116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a126:	e004      	b.n	800a132 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a128:	2303      	movs	r3, #3
 800a12a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a12c:	e001      	b.n	800a132 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a12e:	2303      	movs	r3, #3
 800a130:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	88db      	ldrh	r3, [r3, #6]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d110      	bne.n	800a15c <USBD_StdItfReq+0xc0>
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10d      	bne.n	800a15c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fdd3 	bl	800acec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a146:	e009      	b.n	800a15c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fcf7 	bl	800ab3e <USBD_CtlError>
          break;
 800a150:	e004      	b.n	800a15c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fcf2 	bl	800ab3e <USBD_CtlError>
          break;
 800a15a:	e000      	b.n	800a15e <USBD_StdItfReq+0xc2>
          break;
 800a15c:	bf00      	nop
      }
      break;
 800a15e:	e004      	b.n	800a16a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fceb 	bl	800ab3e <USBD_CtlError>
      break;
 800a168:	bf00      	nop
  }

  return ret;
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3710      	adds	r7, #16
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	889b      	ldrh	r3, [r3, #4]
 800a186:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a190:	2b40      	cmp	r3, #64	@ 0x40
 800a192:	d007      	beq.n	800a1a4 <USBD_StdEPReq+0x30>
 800a194:	2b40      	cmp	r3, #64	@ 0x40
 800a196:	f200 817f 	bhi.w	800a498 <USBD_StdEPReq+0x324>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d02a      	beq.n	800a1f4 <USBD_StdEPReq+0x80>
 800a19e:	2b20      	cmp	r3, #32
 800a1a0:	f040 817a 	bne.w	800a498 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a1a4:	7bbb      	ldrb	r3, [r7, #14]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff fe85 	bl	8009eb8 <USBD_CoreFindEP>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1b2:	7b7b      	ldrb	r3, [r7, #13]
 800a1b4:	2bff      	cmp	r3, #255	@ 0xff
 800a1b6:	f000 8174 	beq.w	800a4a2 <USBD_StdEPReq+0x32e>
 800a1ba:	7b7b      	ldrb	r3, [r7, #13]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	f040 8170 	bne.w	800a4a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a1c2:	7b7a      	ldrb	r2, [r7, #13]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a1ca:	7b7a      	ldrb	r2, [r7, #13]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	32ae      	adds	r2, #174	@ 0xae
 800a1d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 8163 	beq.w	800a4a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a1dc:	7b7a      	ldrb	r2, [r7, #13]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	32ae      	adds	r2, #174	@ 0xae
 800a1e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	4798      	blx	r3
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a1f2:	e156      	b.n	800a4a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b03      	cmp	r3, #3
 800a1fa:	d008      	beq.n	800a20e <USBD_StdEPReq+0x9a>
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	f300 8145 	bgt.w	800a48c <USBD_StdEPReq+0x318>
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 809b 	beq.w	800a33e <USBD_StdEPReq+0x1ca>
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d03c      	beq.n	800a286 <USBD_StdEPReq+0x112>
 800a20c:	e13e      	b.n	800a48c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b02      	cmp	r3, #2
 800a218:	d002      	beq.n	800a220 <USBD_StdEPReq+0xac>
 800a21a:	2b03      	cmp	r3, #3
 800a21c:	d016      	beq.n	800a24c <USBD_StdEPReq+0xd8>
 800a21e:	e02c      	b.n	800a27a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00d      	beq.n	800a242 <USBD_StdEPReq+0xce>
 800a226:	7bbb      	ldrb	r3, [r7, #14]
 800a228:	2b80      	cmp	r3, #128	@ 0x80
 800a22a:	d00a      	beq.n	800a242 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a22c:	7bbb      	ldrb	r3, [r7, #14]
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 f975 	bl	800b520 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a236:	2180      	movs	r1, #128	@ 0x80
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 f971 	bl	800b520 <USBD_LL_StallEP>
 800a23e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a240:	e020      	b.n	800a284 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a242:	6839      	ldr	r1, [r7, #0]
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 fc7a 	bl	800ab3e <USBD_CtlError>
              break;
 800a24a:	e01b      	b.n	800a284 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	885b      	ldrh	r3, [r3, #2]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10e      	bne.n	800a272 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a254:	7bbb      	ldrb	r3, [r7, #14]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00b      	beq.n	800a272 <USBD_StdEPReq+0xfe>
 800a25a:	7bbb      	ldrb	r3, [r7, #14]
 800a25c:	2b80      	cmp	r3, #128	@ 0x80
 800a25e:	d008      	beq.n	800a272 <USBD_StdEPReq+0xfe>
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	88db      	ldrh	r3, [r3, #6]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d104      	bne.n	800a272 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a268:	7bbb      	ldrb	r3, [r7, #14]
 800a26a:	4619      	mov	r1, r3
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 f957 	bl	800b520 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fd3a 	bl	800acec <USBD_CtlSendStatus>

              break;
 800a278:	e004      	b.n	800a284 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fc5e 	bl	800ab3e <USBD_CtlError>
              break;
 800a282:	bf00      	nop
          }
          break;
 800a284:	e107      	b.n	800a496 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d002      	beq.n	800a298 <USBD_StdEPReq+0x124>
 800a292:	2b03      	cmp	r3, #3
 800a294:	d016      	beq.n	800a2c4 <USBD_StdEPReq+0x150>
 800a296:	e04b      	b.n	800a330 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00d      	beq.n	800a2ba <USBD_StdEPReq+0x146>
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	2b80      	cmp	r3, #128	@ 0x80
 800a2a2:	d00a      	beq.n	800a2ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f001 f939 	bl	800b520 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2ae:	2180      	movs	r1, #128	@ 0x80
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f001 f935 	bl	800b520 <USBD_LL_StallEP>
 800a2b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a2b8:	e040      	b.n	800a33c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fc3e 	bl	800ab3e <USBD_CtlError>
              break;
 800a2c2:	e03b      	b.n	800a33c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	885b      	ldrh	r3, [r3, #2]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d136      	bne.n	800a33a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a2cc:	7bbb      	ldrb	r3, [r7, #14]
 800a2ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d004      	beq.n	800a2e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a2d6:	7bbb      	ldrb	r3, [r7, #14]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f001 f93f 	bl	800b55e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 fd03 	bl	800acec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f7ff fde4 	bl	8009eb8 <USBD_CoreFindEP>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2f4:	7b7b      	ldrb	r3, [r7, #13]
 800a2f6:	2bff      	cmp	r3, #255	@ 0xff
 800a2f8:	d01f      	beq.n	800a33a <USBD_StdEPReq+0x1c6>
 800a2fa:	7b7b      	ldrb	r3, [r7, #13]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d11c      	bne.n	800a33a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a300:	7b7a      	ldrb	r2, [r7, #13]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a308:	7b7a      	ldrb	r2, [r7, #13]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	32ae      	adds	r2, #174	@ 0xae
 800a30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d010      	beq.n	800a33a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a318:	7b7a      	ldrb	r2, [r7, #13]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32ae      	adds	r2, #174	@ 0xae
 800a31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a322:	689b      	ldr	r3, [r3, #8]
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
 800a32a:	4603      	mov	r3, r0
 800a32c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a32e:	e004      	b.n	800a33a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fc03 	bl	800ab3e <USBD_CtlError>
              break;
 800a338:	e000      	b.n	800a33c <USBD_StdEPReq+0x1c8>
              break;
 800a33a:	bf00      	nop
          }
          break;
 800a33c:	e0ab      	b.n	800a496 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b02      	cmp	r3, #2
 800a348:	d002      	beq.n	800a350 <USBD_StdEPReq+0x1dc>
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d032      	beq.n	800a3b4 <USBD_StdEPReq+0x240>
 800a34e:	e097      	b.n	800a480 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a350:	7bbb      	ldrb	r3, [r7, #14]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <USBD_StdEPReq+0x1f2>
 800a356:	7bbb      	ldrb	r3, [r7, #14]
 800a358:	2b80      	cmp	r3, #128	@ 0x80
 800a35a:	d004      	beq.n	800a366 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a35c:	6839      	ldr	r1, [r7, #0]
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 fbed 	bl	800ab3e <USBD_CtlError>
                break;
 800a364:	e091      	b.n	800a48a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	da0b      	bge.n	800a386 <USBD_StdEPReq+0x212>
 800a36e:	7bbb      	ldrb	r3, [r7, #14]
 800a370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a374:	4613      	mov	r3, r2
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	4413      	add	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	3310      	adds	r3, #16
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	4413      	add	r3, r2
 800a382:	3304      	adds	r3, #4
 800a384:	e00b      	b.n	800a39e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a38c:	4613      	mov	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	4413      	add	r3, r2
 800a392:	009b      	lsls	r3, r3, #2
 800a394:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	4413      	add	r3, r2
 800a39c:	3304      	adds	r3, #4
 800a39e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fc43 	bl	800ac38 <USBD_CtlSendData>
              break;
 800a3b2:	e06a      	b.n	800a48a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a3b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	da11      	bge.n	800a3e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	f003 020f 	and.w	r2, r3, #15
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	440b      	add	r3, r1
 800a3ce:	3324      	adds	r3, #36	@ 0x24
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d117      	bne.n	800a406 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a3d6:	6839      	ldr	r1, [r7, #0]
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 fbb0 	bl	800ab3e <USBD_CtlError>
                  break;
 800a3de:	e054      	b.n	800a48a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a3e0:	7bbb      	ldrb	r3, [r7, #14]
 800a3e2:	f003 020f 	and.w	r2, r3, #15
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a3fc:	6839      	ldr	r1, [r7, #0]
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 fb9d 	bl	800ab3e <USBD_CtlError>
                  break;
 800a404:	e041      	b.n	800a48a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da0b      	bge.n	800a426 <USBD_StdEPReq+0x2b2>
 800a40e:	7bbb      	ldrb	r3, [r7, #14]
 800a410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	3310      	adds	r3, #16
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	3304      	adds	r3, #4
 800a424:	e00b      	b.n	800a43e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a42c:	4613      	mov	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	4413      	add	r3, r2
 800a43c:	3304      	adds	r3, #4
 800a43e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <USBD_StdEPReq+0x2d8>
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	2b80      	cmp	r3, #128	@ 0x80
 800a44a:	d103      	bne.n	800a454 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2200      	movs	r2, #0
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	e00e      	b.n	800a472 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 f89f 	bl	800b59c <USBD_LL_IsStallEP>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d003      	beq.n	800a46c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2201      	movs	r2, #1
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	e002      	b.n	800a472 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2202      	movs	r2, #2
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fbdd 	bl	800ac38 <USBD_CtlSendData>
              break;
 800a47e:	e004      	b.n	800a48a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fb5b 	bl	800ab3e <USBD_CtlError>
              break;
 800a488:	bf00      	nop
          }
          break;
 800a48a:	e004      	b.n	800a496 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a48c:	6839      	ldr	r1, [r7, #0]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fb55 	bl	800ab3e <USBD_CtlError>
          break;
 800a494:	bf00      	nop
      }
      break;
 800a496:	e005      	b.n	800a4a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a498:	6839      	ldr	r1, [r7, #0]
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fb4f 	bl	800ab3e <USBD_CtlError>
      break;
 800a4a0:	e000      	b.n	800a4a4 <USBD_StdEPReq+0x330>
      break;
 800a4a2:	bf00      	nop
  }

  return ret;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	885b      	ldrh	r3, [r3, #2]
 800a4ca:	0a1b      	lsrs	r3, r3, #8
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	2b06      	cmp	r3, #6
 800a4d2:	f200 8128 	bhi.w	800a726 <USBD_GetDescriptor+0x276>
 800a4d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a4dc <USBD_GetDescriptor+0x2c>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a4f9 	.word	0x0800a4f9
 800a4e0:	0800a511 	.word	0x0800a511
 800a4e4:	0800a551 	.word	0x0800a551
 800a4e8:	0800a727 	.word	0x0800a727
 800a4ec:	0800a727 	.word	0x0800a727
 800a4f0:	0800a6c7 	.word	0x0800a6c7
 800a4f4:	0800a6f3 	.word	0x0800a6f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	7c12      	ldrb	r2, [r2, #16]
 800a504:	f107 0108 	add.w	r1, r7, #8
 800a508:	4610      	mov	r0, r2
 800a50a:	4798      	blx	r3
 800a50c:	60f8      	str	r0, [r7, #12]
      break;
 800a50e:	e112      	b.n	800a736 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	7c1b      	ldrb	r3, [r3, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d10d      	bne.n	800a534 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a520:	f107 0208 	add.w	r2, r7, #8
 800a524:	4610      	mov	r0, r2
 800a526:	4798      	blx	r3
 800a528:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3301      	adds	r3, #1
 800a52e:	2202      	movs	r2, #2
 800a530:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a532:	e100      	b.n	800a736 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a53c:	f107 0208 	add.w	r2, r7, #8
 800a540:	4610      	mov	r0, r2
 800a542:	4798      	blx	r3
 800a544:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	3301      	adds	r3, #1
 800a54a:	2202      	movs	r2, #2
 800a54c:	701a      	strb	r2, [r3, #0]
      break;
 800a54e:	e0f2      	b.n	800a736 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	885b      	ldrh	r3, [r3, #2]
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b05      	cmp	r3, #5
 800a558:	f200 80ac 	bhi.w	800a6b4 <USBD_GetDescriptor+0x204>
 800a55c:	a201      	add	r2, pc, #4	@ (adr r2, 800a564 <USBD_GetDescriptor+0xb4>)
 800a55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a562:	bf00      	nop
 800a564:	0800a57d 	.word	0x0800a57d
 800a568:	0800a5b1 	.word	0x0800a5b1
 800a56c:	0800a5e5 	.word	0x0800a5e5
 800a570:	0800a619 	.word	0x0800a619
 800a574:	0800a64d 	.word	0x0800a64d
 800a578:	0800a681 	.word	0x0800a681
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00b      	beq.n	800a5a0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	7c12      	ldrb	r2, [r2, #16]
 800a594:	f107 0108 	add.w	r1, r7, #8
 800a598:	4610      	mov	r0, r2
 800a59a:	4798      	blx	r3
 800a59c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a59e:	e091      	b.n	800a6c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 facb 	bl	800ab3e <USBD_CtlError>
            err++;
 800a5a8:	7afb      	ldrb	r3, [r7, #11]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	72fb      	strb	r3, [r7, #11]
          break;
 800a5ae:	e089      	b.n	800a6c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5b6:	689b      	ldr	r3, [r3, #8]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00b      	beq.n	800a5d4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5c2:	689b      	ldr	r3, [r3, #8]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	7c12      	ldrb	r2, [r2, #16]
 800a5c8:	f107 0108 	add.w	r1, r7, #8
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4798      	blx	r3
 800a5d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5d2:	e077      	b.n	800a6c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5d4:	6839      	ldr	r1, [r7, #0]
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fab1 	bl	800ab3e <USBD_CtlError>
            err++;
 800a5dc:	7afb      	ldrb	r3, [r7, #11]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a5e2:	e06f      	b.n	800a6c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00b      	beq.n	800a608 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	7c12      	ldrb	r2, [r2, #16]
 800a5fc:	f107 0108 	add.w	r1, r7, #8
 800a600:	4610      	mov	r0, r2
 800a602:	4798      	blx	r3
 800a604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a606:	e05d      	b.n	800a6c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a608:	6839      	ldr	r1, [r7, #0]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fa97 	bl	800ab3e <USBD_CtlError>
            err++;
 800a610:	7afb      	ldrb	r3, [r7, #11]
 800a612:	3301      	adds	r3, #1
 800a614:	72fb      	strb	r3, [r7, #11]
          break;
 800a616:	e055      	b.n	800a6c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00b      	beq.n	800a63c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	7c12      	ldrb	r2, [r2, #16]
 800a630:	f107 0108 	add.w	r1, r7, #8
 800a634:	4610      	mov	r0, r2
 800a636:	4798      	blx	r3
 800a638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a63a:	e043      	b.n	800a6c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fa7d 	bl	800ab3e <USBD_CtlError>
            err++;
 800a644:	7afb      	ldrb	r3, [r7, #11]
 800a646:	3301      	adds	r3, #1
 800a648:	72fb      	strb	r3, [r7, #11]
          break;
 800a64a:	e03b      	b.n	800a6c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00b      	beq.n	800a670 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	7c12      	ldrb	r2, [r2, #16]
 800a664:	f107 0108 	add.w	r1, r7, #8
 800a668:	4610      	mov	r0, r2
 800a66a:	4798      	blx	r3
 800a66c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a66e:	e029      	b.n	800a6c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fa63 	bl	800ab3e <USBD_CtlError>
            err++;
 800a678:	7afb      	ldrb	r3, [r7, #11]
 800a67a:	3301      	adds	r3, #1
 800a67c:	72fb      	strb	r3, [r7, #11]
          break;
 800a67e:	e021      	b.n	800a6c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a686:	699b      	ldr	r3, [r3, #24]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00b      	beq.n	800a6a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	7c12      	ldrb	r2, [r2, #16]
 800a698:	f107 0108 	add.w	r1, r7, #8
 800a69c:	4610      	mov	r0, r2
 800a69e:	4798      	blx	r3
 800a6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6a2:	e00f      	b.n	800a6c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fa49 	bl	800ab3e <USBD_CtlError>
            err++;
 800a6ac:	7afb      	ldrb	r3, [r7, #11]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800a6b2:	e007      	b.n	800a6c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a6b4:	6839      	ldr	r1, [r7, #0]
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fa41 	bl	800ab3e <USBD_CtlError>
          err++;
 800a6bc:	7afb      	ldrb	r3, [r7, #11]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a6c2:	bf00      	nop
      }
      break;
 800a6c4:	e037      	b.n	800a736 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	7c1b      	ldrb	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d109      	bne.n	800a6e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6d6:	f107 0208 	add.w	r2, r7, #8
 800a6da:	4610      	mov	r0, r2
 800a6dc:	4798      	blx	r3
 800a6de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6e0:	e029      	b.n	800a736 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fa2a 	bl	800ab3e <USBD_CtlError>
        err++;
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	72fb      	strb	r3, [r7, #11]
      break;
 800a6f0:	e021      	b.n	800a736 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	7c1b      	ldrb	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10d      	bne.n	800a716 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a702:	f107 0208 	add.w	r2, r7, #8
 800a706:	4610      	mov	r0, r2
 800a708:	4798      	blx	r3
 800a70a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3301      	adds	r3, #1
 800a710:	2207      	movs	r2, #7
 800a712:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a714:	e00f      	b.n	800a736 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 fa10 	bl	800ab3e <USBD_CtlError>
        err++;
 800a71e:	7afb      	ldrb	r3, [r7, #11]
 800a720:	3301      	adds	r3, #1
 800a722:	72fb      	strb	r3, [r7, #11]
      break;
 800a724:	e007      	b.n	800a736 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a726:	6839      	ldr	r1, [r7, #0]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f000 fa08 	bl	800ab3e <USBD_CtlError>
      err++;
 800a72e:	7afb      	ldrb	r3, [r7, #11]
 800a730:	3301      	adds	r3, #1
 800a732:	72fb      	strb	r3, [r7, #11]
      break;
 800a734:	bf00      	nop
  }

  if (err != 0U)
 800a736:	7afb      	ldrb	r3, [r7, #11]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d11e      	bne.n	800a77a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	88db      	ldrh	r3, [r3, #6]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d016      	beq.n	800a772 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a744:	893b      	ldrh	r3, [r7, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00e      	beq.n	800a768 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	88da      	ldrh	r2, [r3, #6]
 800a74e:	893b      	ldrh	r3, [r7, #8]
 800a750:	4293      	cmp	r3, r2
 800a752:	bf28      	it	cs
 800a754:	4613      	movcs	r3, r2
 800a756:	b29b      	uxth	r3, r3
 800a758:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a75a:	893b      	ldrh	r3, [r7, #8]
 800a75c:	461a      	mov	r2, r3
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fa69 	bl	800ac38 <USBD_CtlSendData>
 800a766:	e009      	b.n	800a77c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a768:	6839      	ldr	r1, [r7, #0]
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 f9e7 	bl	800ab3e <USBD_CtlError>
 800a770:	e004      	b.n	800a77c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 faba 	bl	800acec <USBD_CtlSendStatus>
 800a778:	e000      	b.n	800a77c <USBD_GetDescriptor+0x2cc>
    return;
 800a77a:	bf00      	nop
  }
}
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop

0800a784 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	889b      	ldrh	r3, [r3, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d131      	bne.n	800a7fa <USBD_SetAddress+0x76>
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	88db      	ldrh	r3, [r3, #6]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d12d      	bne.n	800a7fa <USBD_SetAddress+0x76>
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	885b      	ldrh	r3, [r3, #2]
 800a7a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a7a4:	d829      	bhi.n	800a7fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	885b      	ldrh	r3, [r3, #2]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d104      	bne.n	800a7c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f9bc 	bl	800ab3e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c6:	e01d      	b.n	800a804 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	7bfa      	ldrb	r2, [r7, #15]
 800a7cc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 ff0d 	bl	800b5f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fa86 	bl	800acec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d004      	beq.n	800a7f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2202      	movs	r2, #2
 800a7ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ee:	e009      	b.n	800a804 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f8:	e004      	b.n	800a804 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 f99e 	bl	800ab3e <USBD_CtlError>
  }
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	885b      	ldrh	r3, [r3, #2]
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	4b4e      	ldr	r3, [pc, #312]	@ (800a95c <USBD_SetConfig+0x150>)
 800a822:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a824:	4b4d      	ldr	r3, [pc, #308]	@ (800a95c <USBD_SetConfig+0x150>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d905      	bls.n	800a838 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f985 	bl	800ab3e <USBD_CtlError>
    return USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	e08c      	b.n	800a952 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	2b02      	cmp	r3, #2
 800a842:	d002      	beq.n	800a84a <USBD_SetConfig+0x3e>
 800a844:	2b03      	cmp	r3, #3
 800a846:	d029      	beq.n	800a89c <USBD_SetConfig+0x90>
 800a848:	e075      	b.n	800a936 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a84a:	4b44      	ldr	r3, [pc, #272]	@ (800a95c <USBD_SetConfig+0x150>)
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d020      	beq.n	800a894 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a852:	4b42      	ldr	r3, [pc, #264]	@ (800a95c <USBD_SetConfig+0x150>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a85c:	4b3f      	ldr	r3, [pc, #252]	@ (800a95c <USBD_SetConfig+0x150>)
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	4619      	mov	r1, r3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f7fe ffe3 	bl	800982e <USBD_SetClassConfig>
 800a868:	4603      	mov	r3, r0
 800a86a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d008      	beq.n	800a884 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f962 	bl	800ab3e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2202      	movs	r2, #2
 800a87e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a882:	e065      	b.n	800a950 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 fa31 	bl	800acec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2203      	movs	r2, #3
 800a88e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a892:	e05d      	b.n	800a950 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fa29 	bl	800acec <USBD_CtlSendStatus>
      break;
 800a89a:	e059      	b.n	800a950 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a89c:	4b2f      	ldr	r3, [pc, #188]	@ (800a95c <USBD_SetConfig+0x150>)
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d112      	bne.n	800a8ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a8ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a95c <USBD_SetConfig+0x150>)
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a8b6:	4b29      	ldr	r3, [pc, #164]	@ (800a95c <USBD_SetConfig+0x150>)
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	4619      	mov	r1, r3
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7fe ffd2 	bl	8009866 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa12 	bl	800acec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a8c8:	e042      	b.n	800a950 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a8ca:	4b24      	ldr	r3, [pc, #144]	@ (800a95c <USBD_SetConfig+0x150>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d02a      	beq.n	800a92e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	4619      	mov	r1, r3
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7fe ffc0 	bl	8009866 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a8e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a95c <USBD_SetConfig+0x150>)
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a8f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a95c <USBD_SetConfig+0x150>)
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7fe ff99 	bl	800982e <USBD_SetClassConfig>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00f      	beq.n	800a926 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 f918 	bl	800ab3e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	b2db      	uxtb	r3, r3
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f7fe ffa5 	bl	8009866 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2202      	movs	r2, #2
 800a920:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a924:	e014      	b.n	800a950 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f9e0 	bl	800acec <USBD_CtlSendStatus>
      break;
 800a92c:	e010      	b.n	800a950 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 f9dc 	bl	800acec <USBD_CtlSendStatus>
      break;
 800a934:	e00c      	b.n	800a950 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f900 	bl	800ab3e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a93e:	4b07      	ldr	r3, [pc, #28]	@ (800a95c <USBD_SetConfig+0x150>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	4619      	mov	r1, r3
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7fe ff8e 	bl	8009866 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a94a:	2303      	movs	r3, #3
 800a94c:	73fb      	strb	r3, [r7, #15]
      break;
 800a94e:	bf00      	nop
  }

  return ret;
 800a950:	7bfb      	ldrb	r3, [r7, #15]
}
 800a952:	4618      	mov	r0, r3
 800a954:	3710      	adds	r7, #16
 800a956:	46bd      	mov	sp, r7
 800a958:	bd80      	pop	{r7, pc}
 800a95a:	bf00      	nop
 800a95c:	200007b0 	.word	0x200007b0

0800a960 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	88db      	ldrh	r3, [r3, #6]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d004      	beq.n	800a97c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a972:	6839      	ldr	r1, [r7, #0]
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f000 f8e2 	bl	800ab3e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a97a:	e023      	b.n	800a9c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b02      	cmp	r3, #2
 800a986:	dc02      	bgt.n	800a98e <USBD_GetConfig+0x2e>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	dc03      	bgt.n	800a994 <USBD_GetConfig+0x34>
 800a98c:	e015      	b.n	800a9ba <USBD_GetConfig+0x5a>
 800a98e:	2b03      	cmp	r3, #3
 800a990:	d00b      	beq.n	800a9aa <USBD_GetConfig+0x4a>
 800a992:	e012      	b.n	800a9ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	3308      	adds	r3, #8
 800a99e:	2201      	movs	r2, #1
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f948 	bl	800ac38 <USBD_CtlSendData>
        break;
 800a9a8:	e00c      	b.n	800a9c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f940 	bl	800ac38 <USBD_CtlSendData>
        break;
 800a9b8:	e004      	b.n	800a9c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a9ba:	6839      	ldr	r1, [r7, #0]
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 f8be 	bl	800ab3e <USBD_CtlError>
        break;
 800a9c2:	bf00      	nop
}
 800a9c4:	bf00      	nop
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	3b01      	subs	r3, #1
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d81e      	bhi.n	800aa22 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	88db      	ldrh	r3, [r3, #6]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d004      	beq.n	800a9f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f8a5 	bl	800ab3e <USBD_CtlError>
        break;
 800a9f4:	e01a      	b.n	800aa2c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d005      	beq.n	800aa12 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	f043 0202 	orr.w	r2, r3, #2
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	330c      	adds	r3, #12
 800aa16:	2202      	movs	r2, #2
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f90c 	bl	800ac38 <USBD_CtlSendData>
      break;
 800aa20:	e004      	b.n	800aa2c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f88a 	bl	800ab3e <USBD_CtlError>
      break;
 800aa2a:	bf00      	nop
  }
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	885b      	ldrh	r3, [r3, #2]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d107      	bne.n	800aa56 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f94c 	bl	800acec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800aa54:	e013      	b.n	800aa7e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	885b      	ldrh	r3, [r3, #2]
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d10b      	bne.n	800aa76 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	889b      	ldrh	r3, [r3, #4]
 800aa62:	0a1b      	lsrs	r3, r3, #8
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	b2da      	uxtb	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f93c 	bl	800acec <USBD_CtlSendStatus>
}
 800aa74:	e003      	b.n	800aa7e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f860 	bl	800ab3e <USBD_CtlError>
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d80b      	bhi.n	800aab6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	885b      	ldrh	r3, [r3, #2]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d10c      	bne.n	800aac0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f91c 	bl	800acec <USBD_CtlSendStatus>
      }
      break;
 800aab4:	e004      	b.n	800aac0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 f840 	bl	800ab3e <USBD_CtlError>
      break;
 800aabe:	e000      	b.n	800aac2 <USBD_ClrFeature+0x3c>
      break;
 800aac0:	bf00      	nop
  }
}
 800aac2:	bf00      	nop
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b084      	sub	sp, #16
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	3301      	adds	r3, #1
 800aae4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	781a      	ldrb	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f7ff fa40 	bl	8009f7a <SWAPBYTE>
 800aafa:	4603      	mov	r3, r0
 800aafc:	461a      	mov	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3301      	adds	r3, #1
 800ab06:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ab0e:	68f8      	ldr	r0, [r7, #12]
 800ab10:	f7ff fa33 	bl	8009f7a <SWAPBYTE>
 800ab14:	4603      	mov	r3, r0
 800ab16:	461a      	mov	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	3301      	adds	r3, #1
 800ab26:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f7ff fa26 	bl	8009f7a <SWAPBYTE>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	461a      	mov	r2, r3
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	80da      	strh	r2, [r3, #6]
}
 800ab36:	bf00      	nop
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b082      	sub	sp, #8
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab48:	2180      	movs	r1, #128	@ 0x80
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fce8 	bl	800b520 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab50:	2100      	movs	r1, #0
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 fce4 	bl	800b520 <USBD_LL_StallEP>
}
 800ab58:	bf00      	nop
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d042      	beq.n	800abfc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ab7a:	6938      	ldr	r0, [r7, #16]
 800ab7c:	f000 f842 	bl	800ac04 <USBD_GetLen>
 800ab80:	4603      	mov	r3, r0
 800ab82:	3301      	adds	r3, #1
 800ab84:	005b      	lsls	r3, r3, #1
 800ab86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab8a:	d808      	bhi.n	800ab9e <USBD_GetString+0x3e>
 800ab8c:	6938      	ldr	r0, [r7, #16]
 800ab8e:	f000 f839 	bl	800ac04 <USBD_GetLen>
 800ab92:	4603      	mov	r3, r0
 800ab94:	3301      	adds	r3, #1
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	005b      	lsls	r3, r3, #1
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	e001      	b.n	800aba2 <USBD_GetString+0x42>
 800ab9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800aba6:	7dfb      	ldrb	r3, [r7, #23]
 800aba8:	68ba      	ldr	r2, [r7, #8]
 800abaa:	4413      	add	r3, r2
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	701a      	strb	r2, [r3, #0]
  idx++;
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	3301      	adds	r3, #1
 800abb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4413      	add	r3, r2
 800abbe:	2203      	movs	r2, #3
 800abc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	3301      	adds	r3, #1
 800abc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800abc8:	e013      	b.n	800abf2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	4413      	add	r3, r2
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	7812      	ldrb	r2, [r2, #0]
 800abd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	3301      	adds	r3, #1
 800abda:	613b      	str	r3, [r7, #16]
    idx++;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	3301      	adds	r3, #1
 800abe0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	4413      	add	r3, r2
 800abe8:	2200      	movs	r2, #0
 800abea:	701a      	strb	r2, [r3, #0]
    idx++;
 800abec:	7dfb      	ldrb	r3, [r7, #23]
 800abee:	3301      	adds	r3, #1
 800abf0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1e7      	bne.n	800abca <USBD_GetString+0x6a>
 800abfa:	e000      	b.n	800abfe <USBD_GetString+0x9e>
    return;
 800abfc:	bf00      	nop
  }
}
 800abfe:	3718      	adds	r7, #24
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ac14:	e005      	b.n	800ac22 <USBD_GetLen+0x1e>
  {
    len++;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1f5      	bne.n	800ac16 <USBD_GetLen+0x12>
  }

  return len;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	60b9      	str	r1, [r7, #8]
 800ac42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2202      	movs	r2, #2
 800ac48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f000 fce7 	bl	800b632 <USBD_LL_Transmit>

  return USBD_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	60f8      	str	r0, [r7, #12]
 800ac76:	60b9      	str	r1, [r7, #8]
 800ac78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	2100      	movs	r1, #0
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 fcd6 	bl	800b632 <USBD_LL_Transmit>

  return USBD_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2203      	movs	r2, #3
 800aca0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	687a      	ldr	r2, [r7, #4]
 800aca8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	2100      	movs	r1, #0
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 fcda 	bl	800b674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3710      	adds	r7, #16
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b084      	sub	sp, #16
 800acce:	af00      	add	r7, sp, #0
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	2100      	movs	r1, #0
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 fcc9 	bl	800b674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3710      	adds	r7, #16
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2204      	movs	r2, #4
 800acf8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800acfc:	2300      	movs	r3, #0
 800acfe:	2200      	movs	r2, #0
 800ad00:	2100      	movs	r1, #0
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fc95 	bl	800b632 <USBD_LL_Transmit>

  return USBD_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2205      	movs	r2, #5
 800ad1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad22:	2300      	movs	r3, #0
 800ad24:	2200      	movs	r2, #0
 800ad26:	2100      	movs	r1, #0
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f000 fca3 	bl	800b674 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	4912      	ldr	r1, [pc, #72]	@ (800ad88 <MX_USB_DEVICE_Init+0x50>)
 800ad40:	4812      	ldr	r0, [pc, #72]	@ (800ad8c <MX_USB_DEVICE_Init+0x54>)
 800ad42:	f7fe fcf7 	bl	8009734 <USBD_Init>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad4c:	f7f7 fbdc 	bl	8002508 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad50:	490f      	ldr	r1, [pc, #60]	@ (800ad90 <MX_USB_DEVICE_Init+0x58>)
 800ad52:	480e      	ldr	r0, [pc, #56]	@ (800ad8c <MX_USB_DEVICE_Init+0x54>)
 800ad54:	f7fe fd1e 	bl	8009794 <USBD_RegisterClass>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d001      	beq.n	800ad62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad5e:	f7f7 fbd3 	bl	8002508 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad62:	490c      	ldr	r1, [pc, #48]	@ (800ad94 <MX_USB_DEVICE_Init+0x5c>)
 800ad64:	4809      	ldr	r0, [pc, #36]	@ (800ad8c <MX_USB_DEVICE_Init+0x54>)
 800ad66:	f7fe fc15 	bl	8009594 <USBD_CDC_RegisterInterface>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad70:	f7f7 fbca 	bl	8002508 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad74:	4805      	ldr	r0, [pc, #20]	@ (800ad8c <MX_USB_DEVICE_Init+0x54>)
 800ad76:	f7fe fd43 	bl	8009800 <USBD_Start>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad80:	f7f7 fbc2 	bl	8002508 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad84:	bf00      	nop
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	200002d4 	.word	0x200002d4
 800ad8c:	200007b4 	.word	0x200007b4
 800ad90:	20000240 	.word	0x20000240
 800ad94:	200002c0 	.word	0x200002c0

0800ad98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	4905      	ldr	r1, [pc, #20]	@ (800adb4 <CDC_Init_FS+0x1c>)
 800ada0:	4805      	ldr	r0, [pc, #20]	@ (800adb8 <CDC_Init_FS+0x20>)
 800ada2:	f7fe fc11 	bl	80095c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ada6:	4905      	ldr	r1, [pc, #20]	@ (800adbc <CDC_Init_FS+0x24>)
 800ada8:	4803      	ldr	r0, [pc, #12]	@ (800adb8 <CDC_Init_FS+0x20>)
 800adaa:	f7fe fc2f 	bl	800960c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800adae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20001290 	.word	0x20001290
 800adb8:	200007b4 	.word	0x200007b4
 800adbc:	20000a90 	.word	0x20000a90

0800adc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800adc0:	b480      	push	{r7}
 800adc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800adc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	6039      	str	r1, [r7, #0]
 800adda:	71fb      	strb	r3, [r7, #7]
 800addc:	4613      	mov	r3, r2
 800adde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ade0:	79fb      	ldrb	r3, [r7, #7]
 800ade2:	2b23      	cmp	r3, #35	@ 0x23
 800ade4:	d84a      	bhi.n	800ae7c <CDC_Control_FS+0xac>
 800ade6:	a201      	add	r2, pc, #4	@ (adr r2, 800adec <CDC_Control_FS+0x1c>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae7d 	.word	0x0800ae7d
 800adf0:	0800ae7d 	.word	0x0800ae7d
 800adf4:	0800ae7d 	.word	0x0800ae7d
 800adf8:	0800ae7d 	.word	0x0800ae7d
 800adfc:	0800ae7d 	.word	0x0800ae7d
 800ae00:	0800ae7d 	.word	0x0800ae7d
 800ae04:	0800ae7d 	.word	0x0800ae7d
 800ae08:	0800ae7d 	.word	0x0800ae7d
 800ae0c:	0800ae7d 	.word	0x0800ae7d
 800ae10:	0800ae7d 	.word	0x0800ae7d
 800ae14:	0800ae7d 	.word	0x0800ae7d
 800ae18:	0800ae7d 	.word	0x0800ae7d
 800ae1c:	0800ae7d 	.word	0x0800ae7d
 800ae20:	0800ae7d 	.word	0x0800ae7d
 800ae24:	0800ae7d 	.word	0x0800ae7d
 800ae28:	0800ae7d 	.word	0x0800ae7d
 800ae2c:	0800ae7d 	.word	0x0800ae7d
 800ae30:	0800ae7d 	.word	0x0800ae7d
 800ae34:	0800ae7d 	.word	0x0800ae7d
 800ae38:	0800ae7d 	.word	0x0800ae7d
 800ae3c:	0800ae7d 	.word	0x0800ae7d
 800ae40:	0800ae7d 	.word	0x0800ae7d
 800ae44:	0800ae7d 	.word	0x0800ae7d
 800ae48:	0800ae7d 	.word	0x0800ae7d
 800ae4c:	0800ae7d 	.word	0x0800ae7d
 800ae50:	0800ae7d 	.word	0x0800ae7d
 800ae54:	0800ae7d 	.word	0x0800ae7d
 800ae58:	0800ae7d 	.word	0x0800ae7d
 800ae5c:	0800ae7d 	.word	0x0800ae7d
 800ae60:	0800ae7d 	.word	0x0800ae7d
 800ae64:	0800ae7d 	.word	0x0800ae7d
 800ae68:	0800ae7d 	.word	0x0800ae7d
 800ae6c:	0800ae7d 	.word	0x0800ae7d
 800ae70:	0800ae7d 	.word	0x0800ae7d
 800ae74:	0800ae7d 	.word	0x0800ae7d
 800ae78:	0800ae7d 	.word	0x0800ae7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae7c:	bf00      	nop
  }

  return (USBD_OK);
 800ae7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	4808      	ldr	r0, [pc, #32]	@ (800aebc <CDC_Receive_FS+0x30>)
 800ae9a:	f7fe fbb7 	bl	800960c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ae9e:	4807      	ldr	r0, [pc, #28]	@ (800aebc <CDC_Receive_FS+0x30>)
 800aea0:	f7fe fc12 	bl	80096c8 <USBD_CDC_ReceivePacket>
  CDC_ReceiveCallBack(Buf,Len[0]);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7f6 fae4 	bl	8001478 <CDC_ReceiveCallBack>
  return (USBD_OK);
 800aeb0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200007b4 	.word	0x200007b4

0800aec0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aed0:	4b0d      	ldr	r3, [pc, #52]	@ (800af08 <CDC_Transmit_FS+0x48>)
 800aed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aed6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d001      	beq.n	800aee6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e00b      	b.n	800aefe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aee6:	887b      	ldrh	r3, [r7, #2]
 800aee8:	461a      	mov	r2, r3
 800aeea:	6879      	ldr	r1, [r7, #4]
 800aeec:	4806      	ldr	r0, [pc, #24]	@ (800af08 <CDC_Transmit_FS+0x48>)
 800aeee:	f7fe fb6b 	bl	80095c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aef2:	4805      	ldr	r0, [pc, #20]	@ (800af08 <CDC_Transmit_FS+0x48>)
 800aef4:	f7fe fba8 	bl	8009648 <USBD_CDC_TransmitPacket>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	200007b4 	.word	0x200007b4

0800af0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b087      	sub	sp, #28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800af1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af22:	4618      	mov	r0, r3
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
	...

0800af30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	6039      	str	r1, [r7, #0]
 800af3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2212      	movs	r2, #18
 800af40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800af42:	4b03      	ldr	r3, [pc, #12]	@ (800af50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800af44:	4618      	mov	r0, r3
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	200002f0 	.word	0x200002f0

0800af54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	4603      	mov	r3, r0
 800af5c:	6039      	str	r1, [r7, #0]
 800af5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2204      	movs	r2, #4
 800af64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af66:	4b03      	ldr	r3, [pc, #12]	@ (800af74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af68:	4618      	mov	r0, r3
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr
 800af74:	20000304 	.word	0x20000304

0800af78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	4603      	mov	r3, r0
 800af80:	6039      	str	r1, [r7, #0]
 800af82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af84:	79fb      	ldrb	r3, [r7, #7]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d105      	bne.n	800af96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af8a:	683a      	ldr	r2, [r7, #0]
 800af8c:	4907      	ldr	r1, [pc, #28]	@ (800afac <USBD_FS_ProductStrDescriptor+0x34>)
 800af8e:	4808      	ldr	r0, [pc, #32]	@ (800afb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800af90:	f7ff fde6 	bl	800ab60 <USBD_GetString>
 800af94:	e004      	b.n	800afa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af96:	683a      	ldr	r2, [r7, #0]
 800af98:	4904      	ldr	r1, [pc, #16]	@ (800afac <USBD_FS_ProductStrDescriptor+0x34>)
 800af9a:	4805      	ldr	r0, [pc, #20]	@ (800afb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800af9c:	f7ff fde0 	bl	800ab60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afa0:	4b02      	ldr	r3, [pc, #8]	@ (800afac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3708      	adds	r7, #8
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20001a90 	.word	0x20001a90
 800afb0:	0800b7f0 	.word	0x0800b7f0

0800afb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	6039      	str	r1, [r7, #0]
 800afbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	4904      	ldr	r1, [pc, #16]	@ (800afd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800afc4:	4804      	ldr	r0, [pc, #16]	@ (800afd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800afc6:	f7ff fdcb 	bl	800ab60 <USBD_GetString>
  return USBD_StrDesc;
 800afca:	4b02      	ldr	r3, [pc, #8]	@ (800afd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3708      	adds	r7, #8
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	20001a90 	.word	0x20001a90
 800afd8:	0800b808 	.word	0x0800b808

0800afdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	6039      	str	r1, [r7, #0]
 800afe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	221a      	movs	r2, #26
 800afec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afee:	f000 f843 	bl	800b078 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aff2:	4b02      	ldr	r3, [pc, #8]	@ (800affc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000308 	.word	0x20000308

0800b000 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	6039      	str	r1, [r7, #0]
 800b00a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b00c:	79fb      	ldrb	r3, [r7, #7]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d105      	bne.n	800b01e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b012:	683a      	ldr	r2, [r7, #0]
 800b014:	4907      	ldr	r1, [pc, #28]	@ (800b034 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b016:	4808      	ldr	r0, [pc, #32]	@ (800b038 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b018:	f7ff fda2 	bl	800ab60 <USBD_GetString>
 800b01c:	e004      	b.n	800b028 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	4904      	ldr	r1, [pc, #16]	@ (800b034 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b022:	4805      	ldr	r0, [pc, #20]	@ (800b038 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b024:	f7ff fd9c 	bl	800ab60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b028:	4b02      	ldr	r3, [pc, #8]	@ (800b034 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	20001a90 	.word	0x20001a90
 800b038:	0800b81c 	.word	0x0800b81c

0800b03c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	6039      	str	r1, [r7, #0]
 800b046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b048:	79fb      	ldrb	r3, [r7, #7]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d105      	bne.n	800b05a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b04e:	683a      	ldr	r2, [r7, #0]
 800b050:	4907      	ldr	r1, [pc, #28]	@ (800b070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b052:	4808      	ldr	r0, [pc, #32]	@ (800b074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b054:	f7ff fd84 	bl	800ab60 <USBD_GetString>
 800b058:	e004      	b.n	800b064 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	4904      	ldr	r1, [pc, #16]	@ (800b070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b05e:	4805      	ldr	r0, [pc, #20]	@ (800b074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b060:	f7ff fd7e 	bl	800ab60 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b064:	4b02      	ldr	r3, [pc, #8]	@ (800b070 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b066:	4618      	mov	r0, r3
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20001a90 	.word	0x20001a90
 800b074:	0800b828 	.word	0x0800b828

0800b078 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b07e:	4b0f      	ldr	r3, [pc, #60]	@ (800b0bc <Get_SerialNum+0x44>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b084:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c0 <Get_SerialNum+0x48>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b08a:	4b0e      	ldr	r3, [pc, #56]	@ (800b0c4 <Get_SerialNum+0x4c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4413      	add	r3, r2
 800b096:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b09e:	2208      	movs	r2, #8
 800b0a0:	4909      	ldr	r1, [pc, #36]	@ (800b0c8 <Get_SerialNum+0x50>)
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f814 	bl	800b0d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b0a8:	2204      	movs	r2, #4
 800b0aa:	4908      	ldr	r1, [pc, #32]	@ (800b0cc <Get_SerialNum+0x54>)
 800b0ac:	68b8      	ldr	r0, [r7, #8]
 800b0ae:	f000 f80f 	bl	800b0d0 <IntToUnicode>
  }
}
 800b0b2:	bf00      	nop
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	1fff7a10 	.word	0x1fff7a10
 800b0c0:	1fff7a14 	.word	0x1fff7a14
 800b0c4:	1fff7a18 	.word	0x1fff7a18
 800b0c8:	2000030a 	.word	0x2000030a
 800b0cc:	2000031a 	.word	0x2000031a

0800b0d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	75fb      	strb	r3, [r7, #23]
 800b0e6:	e027      	b.n	800b138 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	0f1b      	lsrs	r3, r3, #28
 800b0ec:	2b09      	cmp	r3, #9
 800b0ee:	d80b      	bhi.n	800b108 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	0f1b      	lsrs	r3, r3, #28
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	005b      	lsls	r3, r3, #1
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	440b      	add	r3, r1
 800b100:	3230      	adds	r2, #48	@ 0x30
 800b102:	b2d2      	uxtb	r2, r2
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	e00a      	b.n	800b11e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	0f1b      	lsrs	r3, r3, #28
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	7dfb      	ldrb	r3, [r7, #23]
 800b110:	005b      	lsls	r3, r3, #1
 800b112:	4619      	mov	r1, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	440b      	add	r3, r1
 800b118:	3237      	adds	r2, #55	@ 0x37
 800b11a:	b2d2      	uxtb	r2, r2
 800b11c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	011b      	lsls	r3, r3, #4
 800b122:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	3301      	adds	r3, #1
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	4413      	add	r3, r2
 800b12e:	2200      	movs	r2, #0
 800b130:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b132:	7dfb      	ldrb	r3, [r7, #23]
 800b134:	3301      	adds	r3, #1
 800b136:	75fb      	strb	r3, [r7, #23]
 800b138:	7dfa      	ldrb	r2, [r7, #23]
 800b13a:	79fb      	ldrb	r3, [r7, #7]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d3d3      	bcc.n	800b0e8 <IntToUnicode+0x18>
  }
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr
	...

0800b150 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b08a      	sub	sp, #40	@ 0x28
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b158:	f107 0314 	add.w	r3, r7, #20
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]
 800b160:	605a      	str	r2, [r3, #4]
 800b162:	609a      	str	r2, [r3, #8]
 800b164:	60da      	str	r2, [r3, #12]
 800b166:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b170:	d13a      	bne.n	800b1e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]
 800b176:	4b1e      	ldr	r3, [pc, #120]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b17a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b17c:	f043 0301 	orr.w	r3, r3, #1
 800b180:	6313      	str	r3, [r2, #48]	@ 0x30
 800b182:	4b1b      	ldr	r3, [pc, #108]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b186:	f003 0301 	and.w	r3, r3, #1
 800b18a:	613b      	str	r3, [r7, #16]
 800b18c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b18e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b194:	2302      	movs	r3, #2
 800b196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b198:	2300      	movs	r3, #0
 800b19a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b19c:	2303      	movs	r3, #3
 800b19e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b1a0:	230a      	movs	r3, #10
 800b1a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1a4:	f107 0314 	add.w	r3, r7, #20
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4812      	ldr	r0, [pc, #72]	@ (800b1f4 <HAL_PCD_MspInit+0xa4>)
 800b1ac:	f7f8 ffce 	bl	800414c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1b4:	4a0e      	ldr	r2, [pc, #56]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ba:	6353      	str	r3, [r2, #52]	@ 0x34
 800b1bc:	2300      	movs	r3, #0
 800b1be:	60fb      	str	r3, [r7, #12]
 800b1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1c4:	4a0a      	ldr	r2, [pc, #40]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b1c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b1ca:	6453      	str	r3, [r2, #68]	@ 0x44
 800b1cc:	4b08      	ldr	r3, [pc, #32]	@ (800b1f0 <HAL_PCD_MspInit+0xa0>)
 800b1ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1d4:	60fb      	str	r3, [r7, #12]
 800b1d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1d8:	2200      	movs	r2, #0
 800b1da:	2100      	movs	r1, #0
 800b1dc:	2043      	movs	r0, #67	@ 0x43
 800b1de:	f7f8 fc0e 	bl	80039fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1e2:	2043      	movs	r0, #67	@ 0x43
 800b1e4:	f7f8 fc27 	bl	8003a36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1e8:	bf00      	nop
 800b1ea:	3728      	adds	r7, #40	@ 0x28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	40023800 	.word	0x40023800
 800b1f4:	40020000 	.word	0x40020000

0800b1f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7fe fb43 	bl	800989a <USBD_LL_SetupStage>
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b22e:	78fa      	ldrb	r2, [r7, #3]
 800b230:	6879      	ldr	r1, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	4413      	add	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	440b      	add	r3, r1
 800b23c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	4619      	mov	r1, r3
 800b246:	f7fe fb7d 	bl	8009944 <USBD_LL_DataOutStage>
}
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b264:	78fa      	ldrb	r2, [r7, #3]
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	4613      	mov	r3, r2
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	440b      	add	r3, r1
 800b272:	3320      	adds	r3, #32
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	78fb      	ldrb	r3, [r7, #3]
 800b278:	4619      	mov	r1, r3
 800b27a:	f7fe fc16 	bl	8009aaa <USBD_LL_DataInStage>
}
 800b27e:	bf00      	nop
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe fd50 	bl	8009d3a <USBD_LL_SOF>
}
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	79db      	ldrb	r3, [r3, #7]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d001      	beq.n	800b2ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2b6:	f7f7 f927 	bl	8002508 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2c0:	7bfa      	ldrb	r2, [r7, #15]
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe fcf4 	bl	8009cb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fe fc9c 	bl	8009c0e <USBD_LL_Reset>
}
 800b2d6:	bf00      	nop
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
	...

0800b2e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fcef 	bl	8009cd2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	6812      	ldr	r2, [r2, #0]
 800b302:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b306:	f043 0301 	orr.w	r3, r3, #1
 800b30a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	7adb      	ldrb	r3, [r3, #11]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d005      	beq.n	800b320 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b314:	4b04      	ldr	r3, [pc, #16]	@ (800b328 <HAL_PCD_SuspendCallback+0x48>)
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	4a03      	ldr	r2, [pc, #12]	@ (800b328 <HAL_PCD_SuspendCallback+0x48>)
 800b31a:	f043 0306 	orr.w	r3, r3, #6
 800b31e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	e000ed00 	.word	0xe000ed00

0800b32c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fce5 	bl	8009d0a <USBD_LL_Resume>
}
 800b340:	bf00      	nop
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	460b      	mov	r3, r1
 800b352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b35a:	78fa      	ldrb	r2, [r7, #3]
 800b35c:	4611      	mov	r1, r2
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fd3d 	bl	8009dde <USBD_LL_IsoOUTIncomplete>
}
 800b364:	bf00      	nop
 800b366:	3708      	adds	r7, #8
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	460b      	mov	r3, r1
 800b376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b37e:	78fa      	ldrb	r2, [r7, #3]
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe fcf9 	bl	8009d7a <USBD_LL_IsoINIncomplete>
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fe fd4f 	bl	8009e42 <USBD_LL_DevConnected>
}
 800b3a4:	bf00      	nop
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7fe fd4c 	bl	8009e58 <USBD_LL_DevDisconnected>
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d13c      	bne.n	800b452 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b3d8:	4a20      	ldr	r2, [pc, #128]	@ (800b45c <USBD_LL_Init+0x94>)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a1e      	ldr	r2, [pc, #120]	@ (800b45c <USBD_LL_Init+0x94>)
 800b3e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3e8:	4b1c      	ldr	r3, [pc, #112]	@ (800b45c <USBD_LL_Init+0x94>)
 800b3ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b3ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b3f0:	4b1a      	ldr	r3, [pc, #104]	@ (800b45c <USBD_LL_Init+0x94>)
 800b3f2:	2204      	movs	r2, #4
 800b3f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b3f6:	4b19      	ldr	r3, [pc, #100]	@ (800b45c <USBD_LL_Init+0x94>)
 800b3f8:	2202      	movs	r2, #2
 800b3fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3fc:	4b17      	ldr	r3, [pc, #92]	@ (800b45c <USBD_LL_Init+0x94>)
 800b3fe:	2200      	movs	r2, #0
 800b400:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b402:	4b16      	ldr	r3, [pc, #88]	@ (800b45c <USBD_LL_Init+0x94>)
 800b404:	2202      	movs	r2, #2
 800b406:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b408:	4b14      	ldr	r3, [pc, #80]	@ (800b45c <USBD_LL_Init+0x94>)
 800b40a:	2200      	movs	r2, #0
 800b40c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b40e:	4b13      	ldr	r3, [pc, #76]	@ (800b45c <USBD_LL_Init+0x94>)
 800b410:	2200      	movs	r2, #0
 800b412:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b414:	4b11      	ldr	r3, [pc, #68]	@ (800b45c <USBD_LL_Init+0x94>)
 800b416:	2200      	movs	r2, #0
 800b418:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b41a:	4b10      	ldr	r3, [pc, #64]	@ (800b45c <USBD_LL_Init+0x94>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b420:	4b0e      	ldr	r3, [pc, #56]	@ (800b45c <USBD_LL_Init+0x94>)
 800b422:	2200      	movs	r2, #0
 800b424:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b426:	480d      	ldr	r0, [pc, #52]	@ (800b45c <USBD_LL_Init+0x94>)
 800b428:	f7f9 f845 	bl	80044b6 <HAL_PCD_Init>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d001      	beq.n	800b436 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b432:	f7f7 f869 	bl	8002508 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b436:	2180      	movs	r1, #128	@ 0x80
 800b438:	4808      	ldr	r0, [pc, #32]	@ (800b45c <USBD_LL_Init+0x94>)
 800b43a:	f7fa fa72 	bl	8005922 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b43e:	2240      	movs	r2, #64	@ 0x40
 800b440:	2100      	movs	r1, #0
 800b442:	4806      	ldr	r0, [pc, #24]	@ (800b45c <USBD_LL_Init+0x94>)
 800b444:	f7fa fa26 	bl	8005894 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b448:	2280      	movs	r2, #128	@ 0x80
 800b44a:	2101      	movs	r1, #1
 800b44c:	4803      	ldr	r0, [pc, #12]	@ (800b45c <USBD_LL_Init+0x94>)
 800b44e:	f7fa fa21 	bl	8005894 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	20001c90 	.word	0x20001c90

0800b460 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b476:	4618      	mov	r0, r3
 800b478:	f7f9 f92c 	bl	80046d4 <HAL_PCD_Start>
 800b47c:	4603      	mov	r3, r0
 800b47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	4618      	mov	r0, r3
 800b484:	f000 f942 	bl	800b70c <USBD_Get_USB_Status>
 800b488:	4603      	mov	r3, r0
 800b48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	4608      	mov	r0, r1
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	70fb      	strb	r3, [r7, #3]
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	70bb      	strb	r3, [r7, #2]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b4be:	78bb      	ldrb	r3, [r7, #2]
 800b4c0:	883a      	ldrh	r2, [r7, #0]
 800b4c2:	78f9      	ldrb	r1, [r7, #3]
 800b4c4:	f7f9 fe00 	bl	80050c8 <HAL_PCD_EP_Open>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f000 f91c 	bl	800b70c <USBD_Get_USB_Status>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3710      	adds	r7, #16
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4fc:	78fa      	ldrb	r2, [r7, #3]
 800b4fe:	4611      	mov	r1, r2
 800b500:	4618      	mov	r0, r3
 800b502:	f7f9 fe4b 	bl	800519c <HAL_PCD_EP_Close>
 800b506:	4603      	mov	r3, r0
 800b508:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b50a:	7bfb      	ldrb	r3, [r7, #15]
 800b50c:	4618      	mov	r0, r3
 800b50e:	f000 f8fd 	bl	800b70c <USBD_Get_USB_Status>
 800b512:	4603      	mov	r3, r0
 800b514:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b516:	7bbb      	ldrb	r3, [r7, #14]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b530:	2300      	movs	r3, #0
 800b532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b53a:	78fa      	ldrb	r2, [r7, #3]
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f7f9 ff03 	bl	800534a <HAL_PCD_EP_SetStall>
 800b544:	4603      	mov	r3, r0
 800b546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 f8de 	bl	800b70c <USBD_Get_USB_Status>
 800b550:	4603      	mov	r3, r0
 800b552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b554:	7bbb      	ldrb	r3, [r7, #14]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}

0800b55e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b55e:	b580      	push	{r7, lr}
 800b560:	b084      	sub	sp, #16
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	460b      	mov	r3, r1
 800b568:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b578:	78fa      	ldrb	r2, [r7, #3]
 800b57a:	4611      	mov	r1, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7f9 ff47 	bl	8005410 <HAL_PCD_EP_ClrStall>
 800b582:	4603      	mov	r3, r0
 800b584:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 f8bf 	bl	800b70c <USBD_Get_USB_Status>
 800b58e:	4603      	mov	r3, r0
 800b590:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b592:	7bbb      	ldrb	r3, [r7, #14]
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b5ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b5b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	da0b      	bge.n	800b5d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5b8:	78fb      	ldrb	r3, [r7, #3]
 800b5ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5be:	68f9      	ldr	r1, [r7, #12]
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	00db      	lsls	r3, r3, #3
 800b5c4:	4413      	add	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	440b      	add	r3, r1
 800b5ca:	3316      	adds	r3, #22
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	e00b      	b.n	800b5e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b5d6:	68f9      	ldr	r1, [r7, #12]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	4413      	add	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	440b      	add	r3, r1
 800b5e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b5e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b60e:	78fa      	ldrb	r2, [r7, #3]
 800b610:	4611      	mov	r1, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f7f9 fd34 	bl	8005080 <HAL_PCD_SetAddress>
 800b618:	4603      	mov	r3, r0
 800b61a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b61c:	7bfb      	ldrb	r3, [r7, #15]
 800b61e:	4618      	mov	r0, r3
 800b620:	f000 f874 	bl	800b70c <USBD_Get_USB_Status>
 800b624:	4603      	mov	r3, r0
 800b626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b628:	7bbb      	ldrb	r3, [r7, #14]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b086      	sub	sp, #24
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	607a      	str	r2, [r7, #4]
 800b63c:	603b      	str	r3, [r7, #0]
 800b63e:	460b      	mov	r3, r1
 800b640:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b650:	7af9      	ldrb	r1, [r7, #11]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	f7f9 fe3e 	bl	80052d6 <HAL_PCD_EP_Transmit>
 800b65a:	4603      	mov	r3, r0
 800b65c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	4618      	mov	r0, r3
 800b662:	f000 f853 	bl	800b70c <USBD_Get_USB_Status>
 800b666:	4603      	mov	r3, r0
 800b668:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b66a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3718      	adds	r7, #24
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	603b      	str	r3, [r7, #0]
 800b680:	460b      	mov	r3, r1
 800b682:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b684:	2300      	movs	r3, #0
 800b686:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b692:	7af9      	ldrb	r1, [r7, #11]
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	f7f9 fdca 	bl	8005230 <HAL_PCD_EP_Receive>
 800b69c:	4603      	mov	r3, r0
 800b69e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6a0:	7dfb      	ldrb	r3, [r7, #23]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 f832 	bl	800b70c <USBD_Get_USB_Status>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3718      	adds	r7, #24
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b082      	sub	sp, #8
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	460b      	mov	r3, r1
 800b6c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b6c8:	78fa      	ldrb	r2, [r7, #3]
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7f9 fdea 	bl	80052a6 <HAL_PCD_EP_GetRxCount>
 800b6d2:	4603      	mov	r3, r0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3708      	adds	r7, #8
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6e4:	4b03      	ldr	r3, [pc, #12]	@ (800b6f4 <USBD_static_malloc+0x18>)
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	370c      	adds	r7, #12
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	20002174 	.word	0x20002174

0800b6f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]

}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	4603      	mov	r3, r0
 800b714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	2b03      	cmp	r3, #3
 800b71e:	d817      	bhi.n	800b750 <USBD_Get_USB_Status+0x44>
 800b720:	a201      	add	r2, pc, #4	@ (adr r2, 800b728 <USBD_Get_USB_Status+0x1c>)
 800b722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b726:	bf00      	nop
 800b728:	0800b739 	.word	0x0800b739
 800b72c:	0800b73f 	.word	0x0800b73f
 800b730:	0800b745 	.word	0x0800b745
 800b734:	0800b74b 	.word	0x0800b74b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b738:	2300      	movs	r3, #0
 800b73a:	73fb      	strb	r3, [r7, #15]
    break;
 800b73c:	e00b      	b.n	800b756 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b73e:	2303      	movs	r3, #3
 800b740:	73fb      	strb	r3, [r7, #15]
    break;
 800b742:	e008      	b.n	800b756 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b744:	2301      	movs	r3, #1
 800b746:	73fb      	strb	r3, [r7, #15]
    break;
 800b748:	e005      	b.n	800b756 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b74a:	2303      	movs	r3, #3
 800b74c:	73fb      	strb	r3, [r7, #15]
    break;
 800b74e:	e002      	b.n	800b756 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b750:	2303      	movs	r3, #3
 800b752:	73fb      	strb	r3, [r7, #15]
    break;
 800b754:	bf00      	nop
  }
  return usb_status;
 800b756:	7bfb      	ldrb	r3, [r7, #15]
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <memset>:
 800b764:	4402      	add	r2, r0
 800b766:	4603      	mov	r3, r0
 800b768:	4293      	cmp	r3, r2
 800b76a:	d100      	bne.n	800b76e <memset+0xa>
 800b76c:	4770      	bx	lr
 800b76e:	f803 1b01 	strb.w	r1, [r3], #1
 800b772:	e7f9      	b.n	800b768 <memset+0x4>

0800b774 <__libc_init_array>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	4d0d      	ldr	r5, [pc, #52]	@ (800b7ac <__libc_init_array+0x38>)
 800b778:	4c0d      	ldr	r4, [pc, #52]	@ (800b7b0 <__libc_init_array+0x3c>)
 800b77a:	1b64      	subs	r4, r4, r5
 800b77c:	10a4      	asrs	r4, r4, #2
 800b77e:	2600      	movs	r6, #0
 800b780:	42a6      	cmp	r6, r4
 800b782:	d109      	bne.n	800b798 <__libc_init_array+0x24>
 800b784:	4d0b      	ldr	r5, [pc, #44]	@ (800b7b4 <__libc_init_array+0x40>)
 800b786:	4c0c      	ldr	r4, [pc, #48]	@ (800b7b8 <__libc_init_array+0x44>)
 800b788:	f000 f826 	bl	800b7d8 <_init>
 800b78c:	1b64      	subs	r4, r4, r5
 800b78e:	10a4      	asrs	r4, r4, #2
 800b790:	2600      	movs	r6, #0
 800b792:	42a6      	cmp	r6, r4
 800b794:	d105      	bne.n	800b7a2 <__libc_init_array+0x2e>
 800b796:	bd70      	pop	{r4, r5, r6, pc}
 800b798:	f855 3b04 	ldr.w	r3, [r5], #4
 800b79c:	4798      	blx	r3
 800b79e:	3601      	adds	r6, #1
 800b7a0:	e7ee      	b.n	800b780 <__libc_init_array+0xc>
 800b7a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7a6:	4798      	blx	r3
 800b7a8:	3601      	adds	r6, #1
 800b7aa:	e7f2      	b.n	800b792 <__libc_init_array+0x1e>
 800b7ac:	0800b860 	.word	0x0800b860
 800b7b0:	0800b860 	.word	0x0800b860
 800b7b4:	0800b860 	.word	0x0800b860
 800b7b8:	0800b864 	.word	0x0800b864

0800b7bc <memcpy>:
 800b7bc:	440a      	add	r2, r1
 800b7be:	4291      	cmp	r1, r2
 800b7c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7c4:	d100      	bne.n	800b7c8 <memcpy+0xc>
 800b7c6:	4770      	bx	lr
 800b7c8:	b510      	push	{r4, lr}
 800b7ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7d2:	4291      	cmp	r1, r2
 800b7d4:	d1f9      	bne.n	800b7ca <memcpy+0xe>
 800b7d6:	bd10      	pop	{r4, pc}

0800b7d8 <_init>:
 800b7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7da:	bf00      	nop
 800b7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7de:	bc08      	pop	{r3}
 800b7e0:	469e      	mov	lr, r3
 800b7e2:	4770      	bx	lr

0800b7e4 <_fini>:
 800b7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e6:	bf00      	nop
 800b7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ea:	bc08      	pop	{r3}
 800b7ec:	469e      	mov	lr, r3
 800b7ee:	4770      	bx	lr
